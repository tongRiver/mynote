{"ID":"20241016211640-64cdb40","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241016211640-64cdb40","title":"Redis实战篇","type":"doc","updated":"20241026223645"},"Children":[{"ID":"20241016211641-ogxs4a6","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20241016211641-ogxs4a6","updated":"20241017233539"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"实战篇Redis"}]},{"ID":"20241016211642-jhqvzw4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016211642-jhqvzw4","updated":"20241017233539"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"开篇导读"}]},{"ID":"20241016211643-oc7vluv","Type":"NodeParagraph","Properties":{"id":"20241016211643-oc7vluv","updated":"20241016211643"},"Children":[{"Type":"NodeText","Data":"亲爱的小伙伴们大家好，马上咱们就开始实战篇的内容了，相信通过本章的学习，小伙伴们就能理解各种redis的使用啦，接下来咱们来一起看看实战篇我们要学习一些什么样的内容"}]},{"ID":"20241016211644-qktkypo","Type":"NodeList","ListData":{},"Properties":{"id":"20241016211644-qktkypo","updated":"20241017232626"},"Children":[{"ID":"20241016211645-hjll3jz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241016211645-hjll3jz","updated":"20241017232626"},"Children":[{"ID":"20241016211646-pylikcp","Type":"NodeParagraph","Properties":{"id":"20241016211646-pylikcp","updated":"20241017232626"},"Children":[{"Type":"NodeText","Data":"短信登录：这一块我们会使用redis共享session来实现"}]}]}]},{"ID":"20241016211648-gill8pr","Type":"NodeList","ListData":{},"Properties":{"id":"20241016211648-gill8pr","updated":"20241017232630"},"Children":[{"ID":"20241016211649-bpfm5sr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241016211649-bpfm5sr","updated":"20241017232630"},"Children":[{"ID":"20241016211650-lpi7dzz","Type":"NodeParagraph","Properties":{"id":"20241016211650-lpi7dzz","updated":"20241017232630"},"Children":[{"Type":"NodeText","Data":"商户查询缓存：通过本章节，我们会理解缓存击穿，缓存穿透，缓存雪崩等问题，让小伙伴的对于这些概念的理解不仅仅是停留在概念上，更是能在代码中看到对应的内容"}]}]}]},{"ID":"20241016211652-9wcieqg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211652-9wcieqg","updated":"20241017232650"},"Children":[{"ID":"20241016211653-maq3drh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211653-maq3drh","updated":"20241017232650"},"Children":[{"ID":"20241016211654-2s3wvw3","Type":"NodeParagraph","Properties":{"id":"20241016211654-2s3wvw3","updated":"20241017232650"},"Children":[{"Type":"NodeText","Data":"优惠卷秒杀：通过本章节，我们可以学会Redis的计数器功能， 结合Lua完成高性能的redis操作，同时学会Redis分布式锁的原理，包括Redis的三种消息队列"}]}]}]},{"ID":"20241016211656-np5jgr4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211656-np5jgr4","updated":"20241017233521"},"Children":[{"ID":"20241016211657-tvcc2tm","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211657-tvcc2tm","updated":"20241017233521"},"Children":[{"ID":"20241016211658-0wl48w4","Type":"NodeParagraph","Properties":{"id":"20241016211658-0wl48w4","updated":"20241017233521"},"Children":[{"Type":"NodeText","Data":"附近的商户：我们利用Redis的GEOHash来完成对于地理坐标的操作"}]}]}]},{"ID":"20241016211660-v4ux9k2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211660-v4ux9k2","updated":"20241017233525"},"Children":[{"ID":"20241016211661-nqudpdk","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211661-nqudpdk","updated":"20241017233525"},"Children":[{"ID":"20241016211662-4gn3pap","Type":"NodeParagraph","Properties":{"id":"20241016211662-4gn3pap","updated":"20241017233525"},"Children":[{"Type":"NodeText","Data":"UV统计：主要是使用Redis来完成统计功能"}]}]}]},{"ID":"20241016211664-aft4vsw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211664-aft4vsw","updated":"20241017233530"},"Children":[{"ID":"20241016211665-znrowhk","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211665-znrowhk","updated":"20241017233530"},"Children":[{"ID":"20241016211666-mqnv3l8","Type":"NodeParagraph","Properties":{"id":"20241016211666-mqnv3l8","updated":"20241017233530"},"Children":[{"Type":"NodeText","Data":"用户签到：使用Redis的BitMap数据统计功能"}]}]}]},{"ID":"20241016211668-er90kje","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211668-er90kje","updated":"20241017233535"},"Children":[{"ID":"20241016211669-rh7zj5o","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211669-rh7zj5o","updated":"20241017233535"},"Children":[{"ID":"20241016211670-ob7hlav","Type":"NodeParagraph","Properties":{"id":"20241016211670-ob7hlav","updated":"20241017233535"},"Children":[{"Type":"NodeText","Data":"好友关注：基于Set集合的关注、取消关注，共同关注等等功能，这一块知识咱们之前就讲过，这次我们在项目中来使用一下"}]}]}]},{"ID":"20241016211672-rsmxpb1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211672-rsmxpb1","updated":"20241017233539"},"Children":[{"ID":"20241016211673-q0hp096","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211673-q0hp096","updated":"20241017233539"},"Children":[{"ID":"20241016211674-k2xgguj","Type":"NodeParagraph","Properties":{"id":"20241016211674-k2xgguj","updated":"20241017233539"},"Children":[{"Type":"NodeText","Data":"打人探店：基于List来完成点赞列表的操作，同时基于SortedSet来完成点赞的排行榜功能"}]}]}]},{"ID":"20241016211676-j4rn6iq","Type":"NodeParagraph","Properties":{"id":"20241016211676-j4rn6iq","updated":"20241016211676"},"Children":[{"Type":"NodeText","Data":"以上这些内容咱们统统都会给小伙伴们讲解清楚，让大家充分理解如何使用Redis"}]},{"ID":"20241016211677-2dlsjon","Type":"NodeParagraph","Properties":{"id":"20241016211677-2dlsjon","updated":"20241016213847"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1653056228879"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1653056228879-20241016213637-9nept7y.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016211678-gnp8loa","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016211678-gnp8loa","updated":"20241016211678"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"1、短信登录"}]},{"ID":"20241016211679-ojg9syv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211679-ojg9syv","updated":"20241016211679"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1、导入黑马点评项目"}]},{"ID":"20241016211680-joo26zv","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211680-joo26zv","updated":"20241016211680"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1.1 、导入SQL"}]},{"ID":"20241016211681-agye682","Type":"NodeParagraph","Properties":{"id":"20241016211681-agye682","updated":"20241016211681"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653057872536","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653057872536-20241016213637-07u0nv8.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211682-ekd5712","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211682-ekd5712","updated":"20241016211682"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1.2、有关当前模型"}]},{"ID":"20241016211683-eku5e02","Type":"NodeParagraph","Properties":{"id":"20241016211683-eku5e02","updated":"20241016211683"},"Children":[{"Type":"NodeText","Data":"手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。"}]},{"ID":"20241016211684-bedf4t8","Type":"NodeParagraph","Properties":{"id":"20241016211684-bedf4t8","updated":"20241016211684"},"Children":[{"Type":"NodeText","Data":"在tomcat支撑起并发流量后，我们如果让tomcat直接去访问Mysql，根据经验Mysql企业级服务器只要上点并发，一般是16或32 核心cpu，32 或64G内存，像企业级mysql加上固态硬盘能够支撑的并发，大概就是4000起~7000左右，上万并发， 瞬间就会让Mysql服务器的cpu，硬盘全部打满，容易崩溃，所以我们在高并发场景下，会选择使用mysql集群，同时为了进一步降低Mysql的压力，同时增加访问的性能，我们也会加入Redis，同时使用Redis集群使得Redis对外提供更好的服务。"}]},{"ID":"20241016211685-b75reef","Type":"NodeParagraph","Properties":{"id":"20241016211685-b75reef","updated":"20241016211685"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653059409865","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653059409865-20241016213637-s7ar013.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211686-4ua35q7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211686-4ua35q7","updated":"20241016211686"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1.3、导入后端项目"}]},{"ID":"20241016211687-yhe3p3x","Type":"NodeParagraph","Properties":{"id":"20241016211687-yhe3p3x","updated":"20241016211687"},"Children":[{"Type":"NodeText","Data":"在资料中提供了一个项目源码："}]},{"ID":"20241016211688-8ul5aza","Type":"NodeParagraph","Properties":{"id":"20241016211688-8ul5aza","updated":"20241016211688"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653060237073","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653060237073-20241016213637-kj3u11s.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211689-tbrq6fr","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211689-tbrq6fr","updated":"20241016211689"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1.4、导入前端工程"}]},{"ID":"20241016211690-3zdkqkd","Type":"NodeParagraph","Properties":{"id":"20241016211690-3zdkqkd","updated":"20241016211690"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653060337562","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653060337562-20241016213637-n936isu.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211691-053re4m","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211691-053re4m","updated":"20241016211691"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1.5 运行前端项目"}]},{"ID":"20241016211692-d07ifug","Type":"NodeParagraph","Properties":{"id":"20241016211692-d07ifug","updated":"20241016211692"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653060588190","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653060588190-20241016213637-t9gasqf.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211693-c5xksdp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211693-c5xksdp","updated":"20241019223927"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.2 、基于Session实现登录流程"}]},{"ID":"20241016211694-3jj5q21","Type":"NodeParagraph","Properties":{"id":"20241016211694-3jj5q21","updated":"20241016211694"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"发送验证码："}]},{"ID":"20241016211695-dgz4qu2","Type":"NodeList","ListData":{},"Properties":{"id":"20241016211695-dgz4qu2","updated":"20241016233439"},"Children":[{"ID":"20241016233439-fhb5njw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241016233439-fhb5njw","updated":"20241016233439"},"Children":[{"ID":"20241016233439-vtbqu83","Type":"NodeParagraph","Properties":{"id":"20241016233439-vtbqu83","updated":"20241016233439"},"Children":[{"Type":"NodeText","Data":"用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号"}]}]},{"ID":"20241016233442-86jske1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241016233442-86jske1","updated":"20241016233442"},"Children":[{"ID":"20241016233442-azv3vsw","Type":"NodeParagraph","Properties":{"id":"20241016233442-azv3vsw","updated":"20241016233442"},"Children":[{"Type":"NodeText","Data":"如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户"}]}]}]},{"ID":"20241016211697-b34kksu","Type":"NodeParagraph","Properties":{"id":"20241016211697-b34kksu","updated":"20241016211697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"短信验证码登录、注册："}]},{"ID":"20241016211698-9opbr82","Type":"NodeList","ListData":{},"Properties":{"id":"20241016211698-9opbr82","updated":"20241016233447"},"Children":[{"ID":"20241016233447-u5c7x8x","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241016233447-u5c7x8x","updated":"20241016233447"},"Children":[{"ID":"20241016233447-ojaacq7","Type":"NodeParagraph","Properties":{"id":"20241016233447-ojaacq7","updated":"20241016233447"},"Children":[{"Type":"NodeText","Data":"用户将验证码和手机号进行输入，后台从session中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到session中，方便后续获得当前登录信息"}]}]}]},{"ID":"20241016211699-k391oz4","Type":"NodeParagraph","Properties":{"id":"20241016211699-k391oz4","updated":"20241016211699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"校验登录状态:"}]},{"ID":"20241016211700-djvgjjx","Type":"NodeList","ListData":{},"Properties":{"id":"20241016211700-djvgjjx","updated":"20241019223927"},"Children":[{"ID":"20241016233523-pn22x1s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241016233523-pn22x1s","updated":"20241019223927"},"Children":[{"ID":"20241016233523-nrb6uqh","Type":"NodeParagraph","Properties":{"id":"20241016233523-nrb6uqh","style":"color: var(--b3-card-info-color);background-color: var(--b3-card-info-background);","updated":"20241019223927"},"Children":[{"Type":"NodeText","Data":"用户在请求时候，会从cookie中携带者JsessionId到后台，后台通过JsessionId从session中拿到用户信息，如果没有session信息，则进行拦截，如果有session信息，则将用户信息保存到threadLocal中，并且放行"}]}]}]},{"ID":"20241016211701-zdnr0rb","Type":"NodeParagraph","Properties":{"id":"20241016211701-zdnr0rb","updated":"20241016211701"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653066208144","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653066208144-20241016213637-lbotcdc.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211702-uj94pxi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211702-uj94pxi","updated":"20241016211702"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.3 、实现发送短信验证码功能"}]},{"ID":"20241016211703-ndx7pka","Type":"NodeParagraph","Properties":{"id":"20241016211703-ndx7pka","updated":"20241016211703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"页面流程"}]},{"ID":"20241016211704-fttu3jd","Type":"NodeParagraph","Properties":{"id":"20241016211704-fttu3jd","updated":"20241016211704"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653067054461","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653067054461-20241016213637-jp6u6ij.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211705-53v0kh1","Type":"NodeParagraph","Properties":{"id":"20241016211705-53v0kh1","updated":"20241016211705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体代码如下"}]},{"ID":"20241016211706-omw02yz","Type":"NodeParagraph","Properties":{"id":"20241016211706-omw02yz","updated":"20241016211706"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"贴心小提示："}]},{"ID":"20241016211707-q4j7dmy","Type":"NodeParagraph","Properties":{"id":"20241016211707-q4j7dmy","updated":"20241016211707"},"Children":[{"Type":"NodeText","Data":"具体逻辑上文已经分析，我们仅仅只需要按照提示的逻辑写出代码即可。"}]},{"ID":"20241016211708-5shka2j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211708-5shka2j","updated":"20241016211708"},"Children":[{"ID":"20241016211709-r5tnfji","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211709-r5tnfji","updated":"20241016211709"},"Children":[{"ID":"20241016211710-uhfi2bg","Type":"NodeParagraph","Properties":{"id":"20241016211710-uhfi2bg","updated":"20241016211710"},"Children":[{"Type":"NodeText","Data":"发送验证码"}]}]}]},{"ID":"20241016211711-7s15x2b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211711-7s15x2b","updated":"20241016211711"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    @Override\n    public Result sendCode(String phone, HttpSession session) {\n        // 1.校验手机号\n        if (RegexUtils.isPhoneInvalid(phone)) {\n            // 2.如果不符合，返回错误信息\n            return Result.fail(\"手机号格式错误！\");\n        }\n        // 3.符合，生成验证码\n        String code = RandomUtil.randomNumbers(6);\n\n        // 4.保存验证码到 session\n        session.setAttribute(\"code\",code);\n        // 5.发送验证码\n        log.debug(\"发送短信验证码成功，验证码：{}\", code);\n        // 返回ok\n        return Result.ok();\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211712-518uqb1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211712-518uqb1","updated":"20241016211712"},"Children":[{"ID":"20241016211713-qdb9y9y","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211713-qdb9y9y","updated":"20241016211713"},"Children":[{"ID":"20241016211714-4ba36xg","Type":"NodeParagraph","Properties":{"id":"20241016211714-4ba36xg","updated":"20241016211714"},"Children":[{"Type":"NodeText","Data":"登录"}]}]}]},{"ID":"20241016211715-ubgj2ff","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211715-ubgj2ff","updated":"20241016211715"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"    @Override\n    public Result login(LoginFormDTO loginForm, HttpSession session) {\n        // 1.校验手机号\n        String phone = loginForm.getPhone();\n        if (RegexUtils.isPhoneInvalid(phone)) {\n            // 2.如果不符合，返回错误信息\n            return Result.fail(\"手机号格式错误！\");\n        }\n        // 3.校验验证码\n        Object cacheCode = session.getAttribute(\"code\");\n        String code = loginForm.getCode();\n        if(cacheCode == null || !cacheCode.toString().equals(code)){\n             //3.不一致，报错\n            return Result.fail(\"验证码错误\");\n        }\n        //一致，根据手机号查询用户\n        User user = query().eq(\"phone\", phone).one();\n\n        //5.判断用户是否存在\n        if(user == null){\n            //不存在，则创建\n            user =  createUserWithPhone(phone);\n        }\n        //7.保存用户信息到session中\n        session.setAttribute(\"user\",user);\n\n        return Result.ok();\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211716-5qzgiym","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211716-5qzgiym","updated":"20241016211716"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.4、实现登录拦截功能"}]},{"ID":"20241016211717-l7mlmw7","Type":"NodeParagraph","Properties":{"id":"20241016211717-l7mlmw7","updated":"20241016211717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"温馨小贴士：tomcat的运行原理"}]},{"ID":"20241016211718-vxiobtl","Type":"NodeParagraph","Properties":{"id":"20241016211718-vxiobtl","updated":"20241016211718"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653068196656","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653068196656-20241016213637-ddht0mf.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211719-7agr46c","Type":"NodeParagraph","Properties":{"id":"20241016211719-7agr46c","updated":"20241016211719"},"Children":[{"Type":"NodeText","Data":"当用户发起请求时，会访问我们像tomcat注册的端口，任何程序想要运行，都需要有一个线程对当前端口号进行监听，tomcat也不例外，当监听线程知道用户想要和tomcat连接连接时，那会由监听线程创建socket连接，socket都是成对出现的，用户通过socket像互相传递数据，当tomcat端的socket接受到数据后，此时监听线程会从tomcat的线程池中取出一个线程执行用户请求，在我们的服务部署到tomcat后，线程会找到用户想要访问的工程，然后用这个线程转发到工程中的controller，service，dao中，并且访问对应的DB，在用户执行完请求后，再统一返回，再找到tomcat端的socket，再将数据写回到用户端的socket，完成请求和响应"}]},{"ID":"20241016211720-yxycn00","Type":"NodeParagraph","Properties":{"id":"20241016211720-yxycn00","updated":"20241016211720"},"Children":[{"Type":"NodeText","Data":"通过以上讲解，我们可以得知 每个用户其实对应都是去找tomcat线程池中的一个线程来完成工作的， 使用完成后再进行回收，既然每个请求都是独立的，所以在每个用户去访问我们的工程时，我们可以使用threadlocal来做到线程隔离，每个线程操作自己的一份数据"}]},{"ID":"20241016211721-o5ta34h","Type":"NodeParagraph","Properties":{"id":"20241016211721-o5ta34h","updated":"20241016211721"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"温馨小贴士：关于threadlocal"}]},{"ID":"20241016211722-ex9criu","Type":"NodeParagraph","Properties":{"id":"20241016211722-ex9criu","updated":"20241016211722"},"Children":[{"Type":"NodeText","Data":"如果小伙伴们看过threadLocal的源码，你会发现在threadLocal中，无论是他的put方法和他的get方法， 都是先从获得当前用户的线程，然后从线程中取出线程的成员变量map，只要线程不一样，map就不一样，所以可以通过这种方式来做到线程隔离"}]},{"ID":"20241016211723-of9mkz0","Type":"NodeParagraph","Properties":{"id":"20241016211723-of9mkz0","updated":"20241016211723"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653068874258","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653068874258-20241016213637-82shrr1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211724-3u70d4v","Type":"NodeParagraph","Properties":{"id":"20241016211724-3u70d4v","updated":"20241016211724"},"Children":[{"Type":"NodeText","Data":"拦截器代码"}]},{"ID":"20241016211725-alpwyxe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"SmF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211725-alpwyxe","updated":"20241016211725"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"SmF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class LoginInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n       //1.获取session\n        HttpSession session = request.getSession();\n        //2.获取session中的用户\n        Object user = session.getAttribute(\"user\");\n        //3.判断用户是否存在\n        if(user == null){\n              //4.不存在，拦截，返回401状态码\n              response.setStatus(401);\n              return false;\n        }\n        //5.存在，保存用户信息到Threadlocal\n        UserHolder.saveUser((User)user);\n        //6.放行\n        return true;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211726-a1k7g0s","Type":"NodeParagraph","Properties":{"id":"20241016211726-a1k7g0s","updated":"20241016211726"},"Children":[{"Type":"NodeText","Data":"让拦截器生效"}]},{"ID":"20241016211727-rdmzgdx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211727-rdmzgdx","updated":"20241016211727"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Configuration\npublic class MvcConfig implements WebMvcConfigurer {\n\n    @Resource\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 登录拦截器\n        registry.addInterceptor(new LoginInterceptor())\n                .excludePathPatterns(\n                        \"/shop/**\",\n                        \"/voucher/**\",\n                        \"/shop-type/**\",\n                        \"/upload/**\",\n                        \"/blog/hot\",\n                        \"/user/code\",\n                        \"/user/login\"\n                ).order(1);\n        // token刷新的拦截器\n        registry.addInterceptor(new RefreshTokenInterceptor(stringRedisTemplate)).addPathPatterns(\"/**\").order(0);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211728-w9l725f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211728-w9l725f","updated":"20241016211728"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.5、隐藏用户敏感信息"}]},{"ID":"20241016211729-j1inlew","Type":"NodeParagraph","Properties":{"id":"20241016211729-j1inlew","updated":"20241016211729"},"Children":[{"Type":"NodeText","Data":"我们通过浏览器观察到此时用户的全部信息都在，这样极为不靠谱，所以我们应当在返回用户信息之前，将用户的敏感信息进行隐藏，采用的核心思路就是书写一个UserDto对象，这个UserDto对象就没有敏感信息了，我们在返回前，将有用户敏感信息的User对象转化成没有敏感信息的UserDto对象，那么就能够避免这个尴尬的问题了"}]},{"ID":"20241016211730-d7erg1x","Type":"NodeParagraph","Properties":{"id":"20241016211730-d7erg1x","updated":"20241016211730"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在登录方法处修改"}]},{"ID":"20241016211731-xbbxa25","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211731-xbbxa25","updated":"20241016211731"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//7.保存用户信息到session中\nsession.setAttribute(\"user\", BeanUtils.copyProperties(user,UserDTO.class));\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211732-3gq9h9u","Type":"NodeParagraph","Properties":{"id":"20241016211732-3gq9h9u","updated":"20241016211732"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在拦截器处："}]},{"ID":"20241016211733-v7ao62v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211733-v7ao62v","updated":"20241016211733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//5.存在，保存用户信息到Threadlocal\nUserHolder.saveUser((UserDTO) user);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211734-mor1u1b","Type":"NodeParagraph","Properties":{"id":"20241016211734-mor1u1b","updated":"20241016211734"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在UserHolder处：将user对象换成UserDTO"}]},{"ID":"20241016211735-rbyejub","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211735-rbyejub","updated":"20241016211735"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class UserHolder {\n    private static final ThreadLocal\u003cUserDTO\u003e tl = new ThreadLocal\u003c\u003e();\n\n    public static void saveUser(UserDTO user){\n        tl.set(user);\n    }\n\n    public static UserDTO getUser(){\n        return tl.get();\n    }\n\n    public static void removeUser(){\n        tl.remove();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211736-hgziikp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211736-hgziikp","updated":"20241017233811"},"Children":[{"Type":"NodeText","Data":"1.6、session共享问题"}]},{"ID":"20241017233634-b2td10m","Type":"NodeParagraph","Properties":{"id":"20241017233634-b2td10m","updated":"20241017233649"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"补充：基于session登录"}]},{"ID":"20241017233651-v21jyfl","Type":"NodeParagraph","Properties":{"id":"20241017233651-v21jyfl","updated":"20241017233719"},"Children":[{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241015201427-yxowbt8","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"2.2.2.2 方案二 - Session"}]},{"ID":"20241016211737-x1t1xif","Type":"NodeParagraph","Properties":{"id":"20241016211737-x1t1xif","updated":"20241016211737"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"核心思路分析："}]},{"ID":"20241016211738-jmae4z7","Type":"NodeParagraph","Properties":{"id":"20241016211738-jmae4z7","updated":"20241017233811"},"Children":[{"Type":"NodeText","Data":"每个tomcat中都有一份属于自己的session,假设用户第一次访问第一台tomcat，并且把自己的信息存放到第一台服务器的session中，但是第二次这个用户访问到了第二台tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的session，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"session拷贝"},{"Type":"NodeText","Data":"，就是说虽然每个tomcat上都有不同的session，但是每当任意一台服务器的session修改时，都会同步给其他的Tomcat服务器的session，这样的话，就可以实现session的共享了"}]},{"ID":"20241016211739-frfwqvd","Type":"NodeParagraph","Properties":{"id":"20241016211739-frfwqvd","updated":"20241016211739"},"Children":[{"Type":"NodeText","Data":"但是这种方案具有两个大问题"}]},{"ID":"20241016211740-v7q97za","Type":"NodeParagraph","Properties":{"id":"20241016211740-v7q97za","updated":"20241016211740"},"Children":[{"Type":"NodeText","Data":"1、每台服务器中都有完整的一份session数据，服务器压力过大。"}]},{"ID":"20241016211741-n6u6jok","Type":"NodeParagraph","Properties":{"id":"20241016211741-n6u6jok","updated":"20241016211741"},"Children":[{"Type":"NodeText","Data":"2、session拷贝数据时，可能会出现延迟"}]},{"ID":"20241016211742-s6ke2d5","Type":"NodeParagraph","Properties":{"id":"20241016211742-s6ke2d5","updated":"20241016211742"},"Children":[{"Type":"NodeText","Data":"所以咱们后来采用的方案都是基于redis来完成，我们把session换成redis，redis数据本身就是共享的，就可以避免session共享的问题了"}]},{"ID":"20241016211743-ajzbxiy","Type":"NodeParagraph","Properties":{"id":"20241016211743-ajzbxiy","updated":"20241016211743"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653069893050","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653069893050-20241016213637-vvhxteo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211744-8m30cnn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211744-8m30cnn","updated":"20241026172603"},"Children":[{"Type":"NodeText","Data":"1.7 Redis代替session的业务流程"}]},{"ID":"20241026172540-znxpv2t","Type":"NodeBlockquote","Properties":{"id":"20241026172540-znxpv2t","updated":"20241026172603"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20241026172542-rt0p4mz","Type":"NodeParagraph","Properties":{"id":"20241026172542-rt0p4mz","updated":"20241026172603"},"Children":[{"Type":"NodeText","Data":"视频：【黑马程序员Redis入门到实战教程，深度透析redis底层原理+redis分布式锁+企业解决方案+黑马点评实战项目】 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.bilibili.com/video/BV1cr4y1671t/?p=32\u0026amp;share_source=copy_web\u0026amp;vd_source=29909144aff7d2c1451e8d294e9a5437","TextMarkTextContent":"https://www.bilibili.com/video/BV1cr4y1671t/?p=32\u0026amp;share_source=copy_web\u0026amp;vd_source=29909144aff7d2c1451e8d294e9a5437"}]}]},{"ID":"20241016211745-fxv2xsr","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211745-fxv2xsr","updated":"20241026172356"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.7.1、设计key的结构"}]},{"ID":"20241016211746-k4yhfo8","Type":"NodeParagraph","Properties":{"id":"20241016211746-k4yhfo8","updated":"20241016211746"},"Children":[{"Type":"NodeText","Data":"首先我们要思考一下利用redis来存储数据，那么到底使用哪种结构呢？由于存入的数据比较简单，我们可以考虑使用String，或者是使用哈希，如下图，如果使用String，同学们注意他的value，用多占用一点空间，如果使用哈希，则他的value中只会存储他数据本身，如果不是特别在意内存，其实使用String就可以啦。"}]},{"ID":"20241026172215-qv8cj3c","Type":"NodeParagraph","Properties":{"id":"20241026172215-qv8cj3c","updated":"20241026172236"},"Children":[{"Type":"NodeText","Data":"用户的信息可以用以下两种方式来存到Redis中："}]},{"ID":"20241026172236-zuz4ua8","Type":"NodeList","ListData":{},"Properties":{"id":"20241026172236-zuz4ua8","updated":"20241026172356"},"Children":[{"ID":"20241026172237-ed7nsl4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026172237-ed7nsl4","updated":"20241026172237"},"Children":[{"ID":"20241026172237-bcsnu3w","Type":"NodeParagraph","Properties":{"id":"20241026172237-bcsnu3w","updated":"20241026172250"},"Children":[{"Type":"NodeText","Data":"使用string结构"}]}]},{"ID":"20241026172251-qrzvh2g","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026172251-qrzvh2g","updated":"20241026172356"},"Children":[{"ID":"20241026172251-o3pjc2o","Type":"NodeParagraph","Properties":{"id":"20241026172251-o3pjc2o","updated":"20241026172356"},"Children":[{"Type":"NodeText","Data":"使用hash结构（这里采用的是hash结构）"}]}]}]},{"ID":"20241016211747-qfgb3vf","Type":"NodeParagraph","Properties":{"id":"20241016211747-qfgb3vf","updated":"20241016211747"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1653319261433"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1653319261433-20241016213637-maw71fv.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016211748-rp8qpd4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211748-rp8qpd4","updated":"20241017233941"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.7.2、设计key的具体细节"}]},{"ID":"20241016211749-obbzh3a","Type":"NodeParagraph","Properties":{"id":"20241016211749-obbzh3a","updated":"20241016211749"},"Children":[{"Type":"NodeText","Data":"所以我们可以使用String结构，就是一个简单的key，value键值对的方式，但是关于key的处理，session他是每个用户都有自己的session，但是redis的key是共享的，咱们就不能使用code了"}]},{"ID":"20241016211750-u2gm63w","Type":"NodeParagraph","Properties":{"id":"20241016211750-u2gm63w","updated":"20241016211750"},"Children":[{"Type":"NodeText","Data":"在设计这个key的时候，我们之前讲过需要满足两点"}]},{"ID":"20241016211751-5vtts0e","Type":"NodeParagraph","Properties":{"id":"20241016211751-5vtts0e","updated":"20241016211751"},"Children":[{"Type":"NodeText","Data":"1、key要具有唯一性"}]},{"ID":"20241016211752-osex8mu","Type":"NodeParagraph","Properties":{"id":"20241016211752-osex8mu","updated":"20241016211752"},"Children":[{"Type":"NodeText","Data":"2、key要方便携带"}]},{"ID":"20241016211753-hd3v4ep","Type":"NodeParagraph","Properties":{"id":"20241016211753-hd3v4ep","updated":"20241017233941"},"Children":[{"Type":"NodeText","Data":"如果我们采用phone：手机号这个的数据来存储当然是可以的，但是如果把这样的敏感数据存储到redis中并且从页面中带过来毕竟不太合适，所以我们"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkTextContent":"在后台生成一个随机串token"},{"Type":"NodeText","Data":"，然后让前端带来这个token就能完成我们的整体逻辑了"}]},{"ID":"20241016211754-h8e01jx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211754-h8e01jx","updated":"20241019211129"},"Children":[{"Type":"NodeText","Data":"1.7.3、整体访问流程"}]},{"ID":"20241017235858-vobdutb","Type":"NodeParagraph","Properties":{"id":"20241017235858-vobdutb","updated":"20241017235922"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"tag","TextMarkTextContent":"登录/Redis"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016211755-4xq53wa","Type":"NodeParagraph","Properties":{"id":"20241016211755-4xq53wa","updated":"20241016211755"},"Children":[{"Type":"NodeText","Data":"当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到redis，并且生成token作为redis的key，当我们校验用户是否登录时，会去携带着token进行访问，从redis中取出token对应的value，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到threadLocal中，并且放行。"}]},{"ID":"20241016211756-yxwh1qp","Type":"NodeParagraph","Properties":{"id":"20241016211756-yxwh1qp","updated":"20241017234308"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"基于Redis实现session登录"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1653319474181-20241016213637-p8ru9kp.png"},{"Type":"NodeLinkSpace"},{"Type":"NodeLinkTitle","Data":"基于Redis实现session登录"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241018154904-qlpgzml","Type":"NodeParagraph","Properties":{"id":"20241018154904-qlpgzml","style":"color: var(--b3-font-color6);","updated":"20241019211123"},"Children":[{"Type":"NodeText","Data":"JWT相当于是把用户信息（例如用户id、用户名）放到JWT令牌中；"}]},{"ID":"20241019211129-lbgbuo1","Type":"NodeParagraph","Properties":{"id":"20241019211129-lbgbuo1","style":"color: var(--b3-font-color6);","updated":"20241019211129"},"Children":[{"Type":"NodeText","Data":"而Redis方案是把用户信息放到Redis中，key是随机生成的UUID；"}]},{"ID":"20241016211757-sltpwg3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211757-sltpwg3","updated":"20241026221512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.8 基于Redis实现短信登录"}]},{"ID":"20241016211758-scx7vov","Type":"NodeParagraph","Properties":{"id":"20241016211758-scx7vov","updated":"20241016211758"},"Children":[{"Type":"NodeText","Data":"这里具体逻辑就不分析了，之前咱们已经重点分析过这个逻辑啦。"}]},{"ID":"20241026162007-hvjattw","Type":"NodeParagraph","Properties":{"id":"20241026162007-hvjattw","updated":"20241026162011"},"Children":[{"Type":"NodeText","Data":"重点详解"}]},{"ID":"20241026161936-huhixuq","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026161936-huhixuq","updated":"20241026163707"},"Children":[{"ID":"20241026162005-1xogx15","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241026162005-1xogx15","updated":"20241026163707"},"Children":[{"ID":"20241026162005-9x99y6y","Type":"NodeParagraph","Properties":{"id":"20241026162005-9x99y6y","updated":"20241026163707"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"验证码存在Redis中"}]},{"ID":"20241026162024-m2yhej2","Type":"NodeParagraph","Properties":{"id":"20241026162024-m2yhej2","updated":"20241026163050"},"Children":[{"Type":"NodeText","Data":"在发送验证码的接口中，把验证码存到Redis中。"}]},{"ID":"20241026163144-voqzy49","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026163144-voqzy49","updated":"20241026163157"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 4.保存验证码到 session。现在是存在Redis中了，key是LOGIN_CODE_KEY + phone\nstringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026163141-khn34m7","Type":"NodeParagraph","Properties":{"id":"20241026163141-khn34m7","updated":"20241026163141"},"Children":[{"Type":"NodeText","Data":"然后在登录校验的接口中取验证码。"}]},{"ID":"20241026163204-6u6mx03","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026163204-6u6mx03","updated":"20241026163230"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 3.从redis获取验证码并校验，key是LOGIN_CODE_KEY + phone\nString cacheCode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone); // 服务端Redis中的验证码\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026163203-s58ipoo","Type":"NodeParagraph","Properties":{"id":"20241026163203-s58ipoo","updated":"20241026163203"},"Children":[{"Type":"NodeText","Data":"key是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LOGIN_CODE_KEY + phone"},{"Type":"NodeText","Data":"​，而"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LOGIN_CODE_KEY"},{"Type":"NodeText","Data":"​常量在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"com/hmdp/utils/RedisConstants.java"},{"Type":"NodeText","Data":"​类中定义了："}]},{"ID":"20241026163311-aabaj86","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026163311-aabaj86","updated":"20241026163326"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public static final String LOGIN_CODE_KEY = \"login:code:\";\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20241026161959-buvd078","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026161959-buvd078","updated":"20241026221512"},"Children":[{"ID":"20241026163651-mmbugsp","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241026163651-mmbugsp","updated":"20241026221512"},"Children":[{"ID":"20241026163651-z5nvad4","Type":"NodeParagraph","Properties":{"id":"20241026163651-z5nvad4","updated":"20241026163708"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"保存用户信息到Redis中"}]},{"ID":"20241026163710-wj843th","Type":"NodeParagraph","Properties":{"id":"20241026163710-wj843th","updated":"20241026163749"},"Children":[{"Type":"NodeText","Data":"具体步骤："}]},{"ID":"20241026221206-rhdi2wc","Type":"NodeParagraph","Properties":{"id":"20241026221206-rhdi2wc","updated":"20241026221313"},"Children":[{"Type":"NodeText","Data":"一、在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UserServiceImpl"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"login"},{"Type":"NodeText","Data":"​方法中"}]},{"ID":"20241026163749-hom3yeg","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026163749-hom3yeg","updated":"20241026221512"},"Children":[{"ID":"20241026163752-xzf8vuj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241026163752-xzf8vuj","updated":"20241026163752"},"Children":[{"ID":"20241026163752-g22kmwm","Type":"NodeParagraph","Properties":{"id":"20241026163752-g22kmwm","updated":"20241026163914"},"Children":[{"Type":"NodeText","Data":"随机生成UUID，作为Redis中的key，这个key后面要返回给前端作为令牌token，每次登录的时候都要带上这个"}]},{"ID":"20241026173341-4vc0hpk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026173341-4vc0hpk","updated":"20241026173349"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 7.1.随机生成token，作为登录令牌\nString token = UUID.randomUUID().toString(true);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026173423-1cfh6ks","Type":"NodeParagraph","Properties":{"id":"20241026173423-1cfh6ks","updated":"20241026173946"},"Children":[{"Type":"NodeText","Data":"解释：UUID是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cn.hutool.core.lang"},{"Type":"NodeText","Data":"​下的类，参数true是生成的UUID中不带下划线"}]}]},{"ID":"20241026163917-c9amygo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241026163917-c9amygo","updated":"20241026163917"},"Children":[{"ID":"20241026163917-es2dbiv","Type":"NodeParagraph","Properties":{"id":"20241026163917-es2dbiv","updated":"20241026173237"},"Children":[{"Type":"NodeText","Data":"Redis中用户信息采用hash存储。将user对象转为一个Map"}]},{"ID":"20241026173533-nmxrijl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026173533-nmxrijl","linewrap":"true","updated":"20241026173717"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 7.2.将User对象转为HashMap存储\nUserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); // 工具类，方便地将User类中的属性拷贝到UserDTO对象中\nMap\u003cString, Object\u003e userMap = BeanUtil.beanToMap(userDTO, new HashMap\u003c\u003e(), // beanToMap: 将一个Bean转换为map\n        CopyOptions.create()\n                .setIgnoreNullValue(true)\n                .setFieldValueEditor((fieldName, fieldValue) -\u003e fieldValue.toString())); // 自定义字段值的数据类型，把userDTO中的long类型转为string\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026173540-dlgbpvb","Type":"NodeParagraph","Properties":{"id":"20241026173540-dlgbpvb","updated":"20241026174141"},"Children":[{"Type":"NodeText","Data":"解释：BeanUtil.beanToMap仍然是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"hutool"},{"Type":"NodeText","Data":"​包里面的，将userDTO这个javabean转换为一个map。"}]},{"ID":"20241026174142-wnhyj68","Type":"NodeParagraph","Properties":{"id":"20241026174142-wnhyj68","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20241026174211"},"Children":[{"Type":"NodeText","Data":"注意：因为stringRedisTemplate只能接受string类型"}]}]},{"ID":"20241026173241-y43ni6a","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241026173241-y43ni6a","updated":"20241026221512"},"Children":[{"ID":"20241026173241-upqriq4","Type":"NodeParagraph","Properties":{"id":"20241026173241-upqriq4","updated":"20241026174729"},"Children":[{"Type":"NodeText","Data":"把Map存进Redis中，并给用户信息设置有效期，参考session时的有效期"}]},{"ID":"20241026174228-mv41cyp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026174228-mv41cyp","updated":"20241026174547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 7.3.存储\nString tokenKey = LOGIN_USER_KEY + token;\nstringRedisTemplate.opsForHash().putAll(tokenKey, userMap);\n// 7.4.设置token有效期（参考session的有效期30分钟）\nstringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026174230-j7jm79a","Type":"NodeParagraph","Properties":{"id":"20241026174230-j7jm79a","updated":"20241026221512"},"Children":[{"Type":"NodeText","Data":"但是接下来还需要刷新用户的token，只要用户一直访问我们，每次访问都给他刷新token的有效期，这里使用两个拦截器来实现。具体看"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241016211761-1jwc01h","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"1.9 解决状态登录刷新问题"}]}]}]}]}]},{"ID":"20241026163646-qj8v6wt","Type":"NodeParagraph","Properties":{"id":"20241026163646-qj8v6wt","updated":"20241026163646"}},{"ID":"20241016211759-altdehq","Type":"NodeParagraph","Properties":{"id":"20241016211759-altdehq","updated":"20241016211759"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"UserServiceImpl代码"}]},{"ID":"20241026162532-ln7dn3d","Type":"NodeParagraph","Properties":{"id":"20241026162532-ln7dn3d","updated":"20241026162541"},"Children":[{"Type":"NodeText","Data":"发送验证码的接口："}]},{"ID":"20241026162542-y7fm9no","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026162542-y7fm9no","linenumber":"true","style":"line-height: 22px;","updated":"20241026162825"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result sendCode(String phone, HttpSession session) {\n    // 1.校验手机号\n    if (RegexUtils.isPhoneInvalid(phone)) {\n        // 2.如果不符合，返回错误信息\n        return Result.fail(\"手机号格式错误！\");\n    }\n    // 3.符合，生成验证码（hutool工具包中的）\n    String code = RandomUtil.randomNumbers(6);\n\n    // 4.保存验证码到 session。现在是存在Redis中了，key是LOGIN_CODE_KEY + phone\n    stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);\n\n    // 5.发送验证码\n    log.debug(\"发送短信验证码成功，验证码：{}\", code);\n    // 返回ok\n    return Result.ok();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026162533-7aftdy7","Type":"NodeParagraph","Properties":{"id":"20241026162533-7aftdy7","updated":"20241026162750"},"Children":[{"Type":"NodeText","Data":"登录校验接口："}]},{"ID":"20241016211760-v10age9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241016211760-v10age9","linenumber":"true","style":"line-height: 22px;","updated":"20241026162836"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result login(LoginFormDTO loginForm, HttpSession session) {\n    // 1.校验手机号\n    String phone = loginForm.getPhone();\n    if (RegexUtils.isPhoneInvalid(phone)) {\n        // 2.如果不符合，返回错误信息\n        return Result.fail(\"手机号格式错误！\");\n    }\n    // 3.从redis获取验证码并校验，key是LOGIN_CODE_KEY + phone\n    String cacheCode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone); // 服务端Redis中的验证码\n    String code = loginForm.getCode(); // 用户传过来的验证码\n    if (cacheCode == null || !cacheCode.equals(code)) {\n        // 不一致，报错\n        return Result.fail(\"验证码错误\");\n    }\n\n    // 4.一致，根据手机号查询用户 select * from tb_user where phone = ?\n    User user = query().eq(\"phone\", phone).one();\n\n    // 5.判断用户是否存在\n    if (user == null) {\n        // 6.不存在，创建新用户并保存\n        user = createUserWithPhone(phone);\n    }\n\n    // 7.用户在数据库中有了，保存用户信息到 redis 中\n    // 7.1.随机生成token，作为【登录令牌】\n    String token = UUID.randomUUID().toString(true);\n    // 7.2.将User对象转为HashMap存储\n    UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);\n    Map\u003cString, Object\u003e userMap = BeanUtil.beanToMap(userDTO, new HashMap\u003c\u003e(),\n            CopyOptions.create()\n                    .setIgnoreNullValue(true)\n                    .setFieldValueEditor((fieldName, fieldValue) -\u003e fieldValue.toString()));\n    // 7.3.存储\n    String tokenKey = LOGIN_USER_KEY + token;\n    stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);\n    // 7.4.设置token有效期\n    stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);\n\n    // 8.返回token\n    return Result.ok(token);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026180708-z2f5h4g","Type":"NodeParagraph","Properties":{"id":"20241026180708-z2f5h4g","updated":"20241026180708"}},{"ID":"20241016211761-1jwc01h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211761-1jwc01h","updated":"20241026220916"},"Children":[{"Type":"NodeText","Data":"1.9 解决状态登录刷新问题"}]},{"ID":"20241026180753-j3db3e2","Type":"NodeBlockquote","Properties":{"id":"20241026180753-j3db3e2","updated":"20241026180835"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20241026180800-5uq0g95","Type":"NodeParagraph","Properties":{"id":"20241026180800-5uq0g95","updated":"20241026180835"},"Children":[{"Type":"NodeText","Data":"视频：【黑马程序员Redis入门到实战教程，深度透析redis底层原理+redis分布式锁+企业解决方案+黑马点评实战项目】 【精准空降到 16:54】 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.bilibili.com/video/BV1cr4y1671t/?p=33\u0026amp;share_source=copy_web\u0026amp;vd_source=29909144aff7d2c1451e8d294e9a5437\u0026amp;t=1014","TextMarkTextContent":"https://www.bilibili.com/video/BV1cr4y1671t/?p=33\u0026amp;share_source=copy_web\u0026amp;vd_source=29909144aff7d2c1451e8d294e9a5437\u0026amp;t=1014"}]}]},{"ID":"20241026180844-jd6hkqg","Type":"NodeParagraph","Properties":{"id":"20241026180844-jd6hkqg","style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);","updated":"20241026220916"},"Children":[{"Type":"NodeText","Data":"🌸为什么需要刷新？在Redis中我们设置了用户token的有效期为30分钟，如果每到30分钟直接给token过期让用户重新登录的话不太好。现在的方案是只要用户一直在访问，那么每次访问的时候都给他刷新token的有效期30分钟，相当于每次访问都给他续30分钟。"}]},{"ID":"20241016211762-jtc9ooa","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211762-jtc9ooa","updated":"20241016211762"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.9.1 初始方案思路总结："}]},{"ID":"20241016211763-l8j99xf","Type":"NodeParagraph","Properties":{"id":"20241016211763-l8j99xf","updated":"20241016211763"},"Children":[{"Type":"NodeText","Data":"在这个方案中，他确实可以使用对应路径的拦截，同时刷新登录token令牌的存活时间，但是现在这个拦截器他只是拦截需要被拦截的路径，假设当前用户访问了一些不需要拦截的路径，那么这个拦截器就不会生效，所以此时令牌刷新的动作实际上就不会执行，所以这个方案他是存在问题的"}]},{"ID":"20241016211764-1jyaskr","Type":"NodeParagraph","Properties":{"id":"20241016211764-1jyaskr","updated":"20241016211764"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653320822964","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653320822964-20241016213637-6yxff7d.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211765-qfw1wu2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211765-qfw1wu2","updated":"20241026221023"},"Children":[{"Type":"NodeText","Data":"1.9.2 两个拦截器"}]},{"ID":"20241017235726-tkunoha","Type":"NodeParagraph","Properties":{"id":"20241017235726-tkunoha","updated":"20241017235806"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"tag","TextMarkTextContent":"登录/双拦截器"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016211766-ec5423c","Type":"NodeParagraph","Properties":{"id":"20241016211766-ec5423c","style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);","updated":"20241026221023"},"Children":[{"Type":"NodeText","Data":"既然之前的拦截器无法对不需要拦截的路径生效，那么我们可以添加一个拦截器，在第一个拦截器中拦截所有的路径，把第二个拦截器做的事情放入到第一个拦截器中，"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);"},"TextMarkType":"strong","TextMarkTextContent":"同时刷新令牌"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);\"}"},{"Type":"NodeText","Data":"，因为第一个拦截器有了"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);"},"TextMarkType":"code","TextMarkTextContent":"threadLocal"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);\"}"},{"Type":"NodeText","Data":"​的数据，所以此时第二个拦截器只需要判断拦截器中的"},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);"},"TextMarkType":"code","TextMarkTextContent":"user"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);\"}"},{"Type":"NodeText","Data":"​对象是否存在即可，完成整体刷新功能。"}]},{"ID":"20241016211767-a2xd462","Type":"NodeParagraph","Properties":{"id":"20241016211767-a2xd462","updated":"20241016211767"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"style":"width: 1051px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1653320764547"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1653320764547-20241016213637-4upsxdl.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 1051px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016211768-o5fmdj7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211768-o5fmdj7","updated":"20241026223645"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.9.3 代码"}]},{"ID":"20241016211769-x2siplo","Type":"NodeParagraph","Properties":{"id":"20241016211769-x2siplo","updated":"20241016211769"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"RefreshTokenInterceptor"}]},{"ID":"20241016211770-i6g43kp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241016211770-i6g43kp","updated":"20241026223645"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class RefreshTokenInterceptor implements HandlerInterceptor {\n\n    private StringRedisTemplate stringRedisTemplate;\n\n    public RefreshTokenInterceptor(StringRedisTemplate stringRedisTemplate) {\n        this.stringRedisTemplate = stringRedisTemplate;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 1.获取请求头中的token\n        String token = request.getHeader(\"authorization\");\n        if (StrUtil.isBlank(token)) {\n            return true;\n        }\n        // 2.基于TOKEN获取redis中的用户\n        String key  = LOGIN_USER_KEY + token;\n        Map\u003cObject, Object\u003e userMap = stringRedisTemplate.opsForHash().entries(key);\n        // 3.判断用户是否存在\n        if (userMap.isEmpty()) {\n            return true; // 【拦截不到没关系，可能是不需要登录的接口，直接放过去，ThreadLocal中将不会有这个用户】\n        }\n        // 5.将查询到的hash数据转为UserDTO\n        UserDTO userDTO = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false);\n        // 6.存在，保存用户信息到 ThreadLocal\n        UserHolder.saveUser(userDTO);\n        // 7.刷新token有效期\n        stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);\n        // 8.放行\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        // 移除用户\n        UserHolder.removeUser();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241016211771-72ltfas","Type":"NodeParagraph","Properties":{"id":"20241016211771-72ltfas","updated":"20241016211771"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"LoginInterceptor"}]},{"ID":"20241016211772-64e8bwf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211772-64e8bwf","updated":"20241016211772"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class LoginInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 1.判断是否需要拦截（ThreadLocal中是否有用户）\n        if (UserHolder.getUser() == null) {\n            // 没有，需要拦截，设置状态码\n            response.setStatus(401);\n            // 拦截\n            return false;\n        }\n        // 有用户，则放行\n        return true;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241026180746-c49fjz6","Type":"NodeParagraph","Properties":{"id":"20241026180746-c49fjz6","updated":"20241026180746"}},{"ID":"20241016211773-mxnhr5i","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016211773-mxnhr5i","updated":"20241016234100"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"2、商户查询缓存"}]},{"ID":"20241016211774-v4u7m9w","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211774-v4u7m9w","updated":"20241016234100"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1 什么是缓存?"}]},{"ID":"20241016211775-sbgny3q","Type":"NodeParagraph","Properties":{"id":"20241016211775-sbgny3q","updated":"20241016211775"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"前言"},{"Type":"NodeText","Data":":"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是缓存?"}]},{"ID":"20241016211776-uypmvc5","Type":"NodeParagraph","Properties":{"id":"20241016211776-uypmvc5","updated":"20241016234100"},"Children":[{"Type":"NodeText","Data":"就像自行车,越野车的避震器"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/避震器-20241016213637-wli9k23.gif"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016211777-mxqo863","Type":"NodeParagraph","Properties":{"id":"20241016211777-mxqo863","updated":"20241016211777"},"Children":[{"Type":"NodeText","Data":"举个例子:越野车,山地自行车,都拥有\"避震器\","},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"防止"},{"Type":"NodeText","Data":"车体加速后因惯性,在酷似\"U\"字母的地形上飞跃,硬着陆导致的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"损害"},{"Type":"NodeText","Data":",像个弹簧一样;"}]},{"ID":"20241016211778-ook6if4","Type":"NodeParagraph","Properties":{"id":"20241016211778-ook6if4","updated":"20241016211778"},"Children":[{"Type":"NodeText","Data":"同样,实际开发中,系统也需要\"避震器\",防止过高的数据访问猛冲系统,导致其操作线程无法及时处理信息而瘫痪;"}]},{"ID":"20241016211779-tvwauh5","Type":"NodeParagraph","Properties":{"id":"20241016211779-tvwauh5","updated":"20241016211779"},"Children":[{"Type":"NodeText","Data":"这在实际开发中对企业讲,对产品口碑,用户评价都是致命的;所以企业非常重视缓存技术;"}]},{"ID":"20241016211780-qgsafi9","Type":"NodeParagraph","Properties":{"id":"20241016211780-qgsafi9","updated":"20241016211780"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong strong","TextMarkTextContent":"Cache),就是数据交换的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓冲区"},{"Type":"NodeText","Data":",俗称的缓存就是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓冲区内的数据"},{"Type":"NodeText","Data":",一般从数据库中获取,存储于本地代码(例如:"}]},{"ID":"20241016211781-ihh6ahc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211781-ihh6ahc","updated":"20241016211781"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"例1:Static final ConcurrentHashMap\u003cK,V\u003e map = new ConcurrentHashMap\u003c\u003e(); 本地用于高并发\n\n例2:static final Cache\u003cK,V\u003e USER_CACHE = CacheBuilder.newBuilder().build(); 用于redis等缓存\n\n例3:Static final Map\u003cK,V\u003e map =  new HashMap(); 本地缓存\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211782-zewc6o4","Type":"NodeParagraph","Properties":{"id":"20241016211782-zewc6o4","updated":"20241016211782"},"Children":[{"Type":"NodeText","Data":"由于其被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Static"},{"Type":"NodeText","Data":"修饰,所以随着类的加载而被加载到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存之中"},{"Type":"NodeText","Data":",作为本地缓存,由于其又被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"final"},{"Type":"NodeText","Data":"修饰,所以其引用(例3:map)和对象(例3:new HashMap())之间的关系是固定的,不能改变,因此不用担心赋值(=)导致缓存失效;"}]},{"ID":"20241016211783-yuvizpx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211783-yuvizpx","updated":"20241016211783"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.1 为什么要使用缓存"}]},{"ID":"20241016211784-9nllx8l","Type":"NodeParagraph","Properties":{"id":"20241016211784-9nllx8l","updated":"20241016211784"},"Children":[{"Type":"NodeText","Data":"一句话:因为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"速度快,好用"}]},{"ID":"20241016211785-zlgfnyi","Type":"NodeParagraph","Properties":{"id":"20241016211785-zlgfnyi","updated":"20241016211785"},"Children":[{"Type":"NodeText","Data":"缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降低"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"用户访问并发量带来的"},{"Type":"NodeText","Data":"服务器读写压力"}]},{"ID":"20241016211786-q7v1ezo","Type":"NodeParagraph","Properties":{"id":"20241016211786-q7v1ezo","updated":"20241016211786"},"Children":[{"Type":"NodeText","Data":"实际开发过程中,企业的数据量,少则几十万,多则几千万,这么大数据量,如果没有缓存来作为\"避震器\",系统是几乎撑不住的,所以企业会大量运用到缓存技术;"}]},{"ID":"20241016211787-tvy0si7","Type":"NodeParagraph","Properties":{"id":"20241016211787-tvy0si7","updated":"20241016211787"},"Children":[{"Type":"NodeText","Data":"但是缓存也会增加代码复杂度和运营的成本:"}]},{"ID":"20241016211788-1thwj3k","Type":"NodeParagraph","Properties":{"id":"20241016211788-1thwj3k","updated":"20241016211788"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/image-20220523214414123-20241016213637-jtlos7l.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211789-tccpfgg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211789-tccpfgg","updated":"20241016211789"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.2 如何使用缓存"}]},{"ID":"20241016211790-s9oj96x","Type":"NodeParagraph","Properties":{"id":"20241016211790-s9oj96x","updated":"20241016211790"},"Children":[{"Type":"NodeText","Data":"实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用"}]},{"ID":"20241016211791-8s77byo","Type":"NodeParagraph","Properties":{"id":"20241016211791-8s77byo","updated":"20241016211791"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"浏览器缓存"},{"Type":"NodeText","Data":"：主要是存在于浏览器端的缓存"}]},{"ID":"20241016211792-ijuiv8i","Type":"NodeParagraph","Properties":{"id":"20241016211792-ijuiv8i","updated":"20241016211792"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"应用层缓存："},{"Type":"NodeText","Data":"可以分为tomcat本地缓存，比如之前提到的map，或者是使用redis作为缓存"}]},{"ID":"20241016211793-4e64rgr","Type":"NodeParagraph","Properties":{"id":"20241016211793-4e64rgr","updated":"20241016211793"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"数据库缓存："},{"Type":"NodeText","Data":"在数据库中有一片空间是 buffer pool，增改查数据都会先加载到mysql的缓存中"}]},{"ID":"20241016211794-ubayrrs","Type":"NodeParagraph","Properties":{"id":"20241016211794-ubayrrs","updated":"20241016211794"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"CPU缓存："},{"Type":"NodeText","Data":"当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存"}]},{"ID":"20241016211795-6oxpqo0","Type":"NodeParagraph","Properties":{"id":"20241016211795-6oxpqo0","updated":"20241016211795"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/image-20220523212915666-20241016213637-u2fs5ou.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211796-ryeek1b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211796-ryeek1b","updated":"20241016234110"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.2 添加商户缓存"}]},{"ID":"20241016211797-e0pp11u","Type":"NodeParagraph","Properties":{"id":"20241016211797-e0pp11u","updated":"20241016211797"},"Children":[{"Type":"NodeText","Data":"在我们查询商户信息时，我们是直接操作从数据库中去进行查询的，大致逻辑是这样，直接查询数据库那肯定慢咯，所以我们需要增加缓存"}]},{"ID":"20241016211798-ixx5wci","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241016211798-ixx5wci","updated":"20241016234110"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(\"/{id}\")\npublic Result queryShopById(@PathVariable(\"id\") Long id) {\n    //这里是直接查询数据库\n    return shopService.queryById(id);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241016211799-9mgb7bt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211799-9mgb7bt","updated":"20241016211799"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.2.1 、缓存模型和思路"}]},{"ID":"20241016211800-jz0s4bj","Type":"NodeParagraph","Properties":{"id":"20241016211800-jz0s4bj","updated":"20241016211800"},"Children":[{"Type":"NodeText","Data":"标准的操作方式就是查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入redis。"}]},{"ID":"20241016211801-k28dv9c","Type":"NodeParagraph","Properties":{"id":"20241016211801-k28dv9c","updated":"20241016211801"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653322097736","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653322097736-20241016213637-cgem0za.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211802-rhcuu9c","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211802-rhcuu9c","updated":"20241016211802"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1.2、代码如下"}]},{"ID":"20241016211803-qq7f5b5","Type":"NodeParagraph","Properties":{"id":"20241016211803-qq7f5b5","updated":"20241016211803"},"Children":[{"Type":"NodeText","Data":"代码思路：如果缓存有，则直接返回，如果缓存不存在，则查询数据库，然后存入redis。"}]},{"ID":"20241016211804-iro3ug5","Type":"NodeParagraph","Properties":{"id":"20241016211804-iro3ug5","updated":"20241016211804"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653322190155","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653322190155-20241016213637-kwr2v03.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211805-mr6ouhc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211805-mr6ouhc","updated":"20241016211805"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.3 缓存更新策略"}]},{"ID":"20241016211806-wk897vq","Type":"NodeParagraph","Properties":{"id":"20241016211806-wk897vq","updated":"20241016211806"},"Children":[{"Type":"NodeText","Data":"缓存更新是redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们向redis插入太多数据，此时就可能会导致缓存中的数据过多，所以redis会对部分数据进行更新，或者把他叫为淘汰更合适。"}]},{"ID":"20241016211807-so8c4di","Type":"NodeParagraph","Properties":{"id":"20241016211807-so8c4di","updated":"20241016211807"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"内存淘汰："},{"Type":"NodeText","Data":"redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)"}]},{"ID":"20241016211808-gj2scqr","Type":"NodeParagraph","Properties":{"id":"20241016211808-gj2scqr","updated":"20241016211808"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"超时剔除："},{"Type":"NodeText","Data":"当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存"}]},{"ID":"20241016211809-xoddnyv","Type":"NodeParagraph","Properties":{"id":"20241016211809-xoddnyv","updated":"20241016211809"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"主动更新："},{"Type":"NodeText","Data":"我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题"}]},{"ID":"20241016211810-6evzlkd","Type":"NodeParagraph","Properties":{"id":"20241016211810-6evzlkd","updated":"20241016211810"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653322506393","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653322506393-20241016213637-sz270oq.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211811-kvx3dd7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211811-kvx3dd7","updated":"20241016211811"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.3.1 、数据库缓存不一致解决方案："}]},{"ID":"20241016211812-2jrlc6p","Type":"NodeParagraph","Properties":{"id":"20241016211812-2jrlc6p","updated":"20241016211812"},"Children":[{"Type":"NodeText","Data":"由于我们的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存的数据源来自于数据库"},{"Type":"NodeText","Data":",而数据库的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据是会发生变化的"},{"Type":"NodeText","Data":",因此,如果当数据库中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据发生变化,而缓存却没有同步"},{"Type":"NodeText","Data":",此时就会有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一致性问题存在"},{"Type":"NodeText","Data":",其后果是:"}]},{"ID":"20241016211813-migx56z","Type":"NodeParagraph","Properties":{"id":"20241016211813-migx56z","updated":"20241016211813"},"Children":[{"Type":"NodeText","Data":"用户使用缓存中的过时数据,就会产生类似多线程数据安全问题,从而影响业务,产品口碑等;怎么解决呢？有如下几种方案"}]},{"ID":"20241016211814-lhm6mpq","Type":"NodeParagraph","Properties":{"id":"20241016211814-lhm6mpq","updated":"20241016211814"},"Children":[{"Type":"NodeText","Data":"Cache Aside Pattern 人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案"}]},{"ID":"20241016211815-mvyih1d","Type":"NodeParagraph","Properties":{"id":"20241016211815-mvyih1d","updated":"20241016211815"},"Children":[{"Type":"NodeText","Data":"Read/Write Through Pattern : 由系统本身完成，数据库与缓存的问题交由系统本身去处理"}]},{"ID":"20241016211816-bb2tapg","Type":"NodeParagraph","Properties":{"id":"20241016211816-bb2tapg","updated":"20241016211816"},"Children":[{"Type":"NodeText","Data":"Write Behind Caching Pattern ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致"}]},{"ID":"20241016211817-956dm25","Type":"NodeParagraph","Properties":{"id":"20241016211817-956dm25","updated":"20241016211817"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653322857620","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653322857620-20241016213637-r8s138c.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211818-ayd2qbs","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016211818-ayd2qbs","updated":"20241016211846"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.3.2 、数据库和缓存不一致采用什么方案"}]},{"ID":"20241016211819-7w0qzjm","Type":"NodeParagraph","Properties":{"id":"20241016211819-7w0qzjm","updated":"20241016211819"},"Children":[{"Type":"NodeText","Data":"综合考虑使用方案一，但是方案一调用者如何处理呢？这里有几个问题"}]},{"ID":"20241016211820-ibdfvt6","Type":"NodeParagraph","Properties":{"id":"20241016211820-ibdfvt6","updated":"20241016211820"},"Children":[{"Type":"NodeText","Data":"操作缓存和数据库时有三个问题需要考虑："}]},{"ID":"20241016211821-h5hk755","Type":"NodeParagraph","Properties":{"id":"20241016211821-h5hk755","updated":"20241016211821"},"Children":[{"Type":"NodeText","Data":"如果采用第一个方案，那么假设我们每次操作数据库后，都操作缓存，但是中间如果没有人查询，那么这个更新动作实际上只有最后一次生效，中间的更新动作意义并不大，我们可以把缓存删除，等待再次查询时，将缓存中的数据加载出来"}]},{"ID":"20241016211822-mykj1c3","Type":"NodeList","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211822-mykj1c3","updated":"20241016211822"},"Children":[{"ID":"20241016211823-fv9wdvt","Type":"NodeListItem","Data":"*","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211823-fv9wdvt","updated":"20241016211823"},"Children":[{"ID":"20241016211824-ys3ot7v","Type":"NodeParagraph","Properties":{"id":"20241016211824-ys3ot7v","updated":"20241016211824"},"Children":[{"Type":"NodeText","Data":"删除缓存还是更新缓存？"}]},{"ID":"20241016211825-qc56bkm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211825-qc56bkm","updated":"20241016211825"},"Children":[{"ID":"20241016211826-yxe2v4l","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211826-yxe2v4l","updated":"20241016211826"},"Children":[{"ID":"20241016211827-x8vljxh","Type":"NodeParagraph","Properties":{"id":"20241016211827-x8vljxh","updated":"20241016211827"},"Children":[{"Type":"NodeText","Data":"更新缓存：每次更新数据库都更新缓存，无效写操作较多"}]}]},{"ID":"20241016211828-u9l45yc","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211828-u9l45yc","updated":"20241016211828"},"Children":[{"ID":"20241016211829-jdxm5mn","Type":"NodeParagraph","Properties":{"id":"20241016211829-jdxm5mn","updated":"20241016211829"},"Children":[{"Type":"NodeText","Data":"删除缓存：更新数据库时让缓存失效，查询时再更新缓存✅"}]}]}]}]},{"ID":"20241016211830-dabvgwg","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211830-dabvgwg","updated":"20241016211830"},"Children":[{"ID":"20241016211831-s9wbpel","Type":"NodeParagraph","Properties":{"id":"20241016211831-s9wbpel","updated":"20241016211831"},"Children":[{"Type":"NodeText","Data":"如何保证缓存与数据库的操作的同时成功或失败？"}]},{"ID":"20241016211832-579np62","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211832-579np62","updated":"20241016211832"},"Children":[{"ID":"20241016211833-iivc68e","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211833-iivc68e","updated":"20241016211833"},"Children":[{"ID":"20241016211834-sqrrc6f","Type":"NodeParagraph","Properties":{"id":"20241016211834-sqrrc6f","updated":"20241016211834"},"Children":[{"Type":"NodeText","Data":"单体系统，将缓存与数据库操作放在一个事务"}]}]},{"ID":"20241016211835-qvuifvt","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211835-qvuifvt","updated":"20241016211835"},"Children":[{"ID":"20241016211836-vqdi2mm","Type":"NodeParagraph","Properties":{"id":"20241016211836-vqdi2mm","updated":"20241016211836"},"Children":[{"Type":"NodeText","Data":"分布式系统，利用TCC等分布式事务方案"}]}]}]}]}]},{"ID":"20241016211837-4puzio3","Type":"NodeParagraph","Properties":{"id":"20241016211837-4puzio3","updated":"20241016211837"},"Children":[{"Type":"NodeText","Data":"应该具体操作缓存还是操作数据库，我们应当是先操作数据库，再删除缓存，原因在于，如果你选择第一种方案，在两个线程并发来访问时，假设线程1先来，他先把缓存删了，此时线程2过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程1再执行更新动作时，实际上写入的就是旧的数据，新的数据被旧数据覆盖了。"}]},{"ID":"20241016211838-8lzibqr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211838-8lzibqr","updated":"20241016211838"},"Children":[{"ID":"20241016211839-nmykpz2","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211839-nmykpz2","updated":"20241016211839"},"Children":[{"ID":"20241016211840-d3jxqwq","Type":"NodeParagraph","Properties":{"id":"20241016211840-d3jxqwq","updated":"20241016211840"},"Children":[{"Type":"NodeText","Data":"先操作缓存还是先操作数据库？"}]},{"ID":"20241016211841-vojkxk0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211841-vojkxk0","updated":"20241016211841"},"Children":[{"ID":"20241016211842-n201lzt","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211842-n201lzt","updated":"20241016211842"},"Children":[{"ID":"20241016211843-5yfk9yh","Type":"NodeParagraph","Properties":{"id":"20241016211843-5yfk9yh","updated":"20241016211843"},"Children":[{"Type":"NodeText","Data":"先删除缓存，再操作数据库（⚠️会发生线程安全问题，如下图左所示）"}]}]},{"ID":"20241016211844-lm8uofu","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211844-lm8uofu","updated":"20241016211844"},"Children":[{"ID":"20241016211845-kxt48bh","Type":"NodeParagraph","Properties":{"id":"20241016211845-kxt48bh","updated":"20241016211845"},"Children":[{"Type":"NodeText","Data":"先操作数据库，再删除缓存（⚠️也会有问题，但是发生的概率较小，因为缓存的操作速度（线程1）通常比数据库的操作时间（线程2）快）"}]}]}]}]}]},{"ID":"20241016211846-crtz1ea","Type":"NodeParagraph","Properties":{"id":"20241016211846-crtz1ea","updated":"20241016211846"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"style":"width: 1047px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1653323595206"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1653323595206-20241016213637-tbto27a.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 1047px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016211847-7j8xsy1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211847-7j8xsy1","updated":"20241016211847"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.4 实现商铺和缓存与数据库双写一致"}]},{"ID":"20241016211848-z73kb8u","Type":"NodeParagraph","Properties":{"id":"20241016211848-z73kb8u","updated":"20241016211848"},"Children":[{"Type":"NodeText","Data":"核心思路如下："}]},{"ID":"20241016211849-ptqt2vb","Type":"NodeParagraph","Properties":{"id":"20241016211849-ptqt2vb","updated":"20241016211849"},"Children":[{"Type":"NodeText","Data":"修改ShopController中的业务逻辑，满足下面的需求："}]},{"ID":"20241016211850-uac6i4h","Type":"NodeParagraph","Properties":{"id":"20241016211850-uac6i4h","updated":"20241016211850"},"Children":[{"Type":"NodeText","Data":"根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间"}]},{"ID":"20241016211851-rk9va2v","Type":"NodeParagraph","Properties":{"id":"20241016211851-rk9va2v","updated":"20241016211851"},"Children":[{"Type":"NodeText","Data":"根据id修改店铺时，先修改数据库，再删除缓存"}]},{"ID":"20241016211852-op3ydai","Type":"NodeParagraph","Properties":{"id":"20241016211852-op3ydai","updated":"20241016211852"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"修改重点代码1"},{"Type":"NodeText","Data":"：修改"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ShopServiceImpl"},{"Type":"NodeText","Data":"的queryById方法"}]},{"ID":"20241016211853-gbv0o5y","Type":"NodeParagraph","Properties":{"id":"20241016211853-gbv0o5y","updated":"20241016211853"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"设置redis缓存时添加过期时间"}]},{"ID":"20241016211854-qesv9gp","Type":"NodeParagraph","Properties":{"id":"20241016211854-qesv9gp","updated":"20241016211854"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653325871232","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653325871232-20241016213637-pqb67tl.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211855-w35j7co","Type":"NodeParagraph","Properties":{"id":"20241016211855-w35j7co","updated":"20241016211855"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"修改重点代码2"}]},{"ID":"20241016211856-7u2p0qh","Type":"NodeParagraph","Properties":{"id":"20241016211856-7u2p0qh","updated":"20241016211856"},"Children":[{"Type":"NodeText","Data":"代码分析：通过之前的淘汰，我们确定了采用删除策略，来解决双写问题，当我们修改了数据之后，然后把缓存中的数据进行删除，查询时发现缓存中没有数据，则会从mysql中加载最新的数据，从而避免数据库和缓存不一致的问题"}]},{"ID":"20241016211857-h86c68k","Type":"NodeParagraph","Properties":{"id":"20241016211857-h86c68k","updated":"20241016211857"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653325929549","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653325929549-20241016213637-a499e2k.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211858-jgmrigh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211858-jgmrigh","updated":"20241016211858"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.5 缓存穿透问题的解决思路"}]},{"ID":"20241016211859-2av2hmu","Type":"NodeParagraph","Properties":{"id":"20241016211859-2av2hmu","updated":"20241016211859"},"Children":[{"Type":"NodeText","Data":"缓存穿透 ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。"}]},{"ID":"20241016211860-asevg7g","Type":"NodeParagraph","Properties":{"id":"20241016211860-asevg7g","updated":"20241016211860"},"Children":[{"Type":"NodeText","Data":"常见的解决方案有两种："}]},{"ID":"20241016211861-nwxy3v5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211861-nwxy3v5","updated":"20241016211861"},"Children":[{"ID":"20241016211862-lpyptwh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211862-lpyptwh","updated":"20241016211862"},"Children":[{"ID":"20241016211863-u54650y","Type":"NodeParagraph","Properties":{"id":"20241016211863-u54650y","updated":"20241016211863"},"Children":[{"Type":"NodeText","Data":"缓存空对象"}]},{"ID":"20241016211864-7733lfh","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211864-7733lfh","updated":"20241016211864"},"Children":[{"ID":"20241016211865-oa3763m","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211865-oa3763m","updated":"20241016211865"},"Children":[{"ID":"20241016211866-09f9fe4","Type":"NodeParagraph","Properties":{"id":"20241016211866-09f9fe4","updated":"20241016211866"},"Children":[{"Type":"NodeText","Data":"优点：实现简单，维护方便"}]}]},{"ID":"20241016211867-dq6skn0","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211867-dq6skn0","updated":"20241016211867"},"Children":[{"ID":"20241016211868-qpxtnsr","Type":"NodeParagraph","Properties":{"id":"20241016211868-qpxtnsr","updated":"20241016211868"},"Children":[{"Type":"NodeText","Data":"缺点："}]},{"ID":"20241016211869-0c8abk1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211869-0c8abk1","updated":"20241016211869"},"Children":[{"ID":"20241016211870-ei27dey","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211870-ei27dey","updated":"20241016211870"},"Children":[{"ID":"20241016211871-xjxlhct","Type":"NodeParagraph","Properties":{"id":"20241016211871-xjxlhct","updated":"20241016211871"},"Children":[{"Type":"NodeText","Data":"额外的内存消耗"}]}]},{"ID":"20241016211872-pn91e4b","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211872-pn91e4b","updated":"20241016211872"},"Children":[{"ID":"20241016211873-uxbgrph","Type":"NodeParagraph","Properties":{"id":"20241016211873-uxbgrph","updated":"20241016211873"},"Children":[{"Type":"NodeText","Data":"可能造成短期的不一致"}]}]}]}]}]}]},{"ID":"20241016211874-u1s6t2s","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211874-u1s6t2s","updated":"20241016211874"},"Children":[{"ID":"20241016211875-ic2bdl5","Type":"NodeParagraph","Properties":{"id":"20241016211875-ic2bdl5","updated":"20241016211875"},"Children":[{"Type":"NodeText","Data":"布隆过滤"}]},{"ID":"20241016211876-65g54mj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211876-65g54mj","updated":"20241016211876"},"Children":[{"ID":"20241016211877-nuyuf4a","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211877-nuyuf4a","updated":"20241016211877"},"Children":[{"ID":"20241016211878-lzg8koc","Type":"NodeParagraph","Properties":{"id":"20241016211878-lzg8koc","updated":"20241016211878"},"Children":[{"Type":"NodeText","Data":"优点：内存占用较少，没有多余key"}]}]},{"ID":"20241016211879-drkwerv","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211879-drkwerv","updated":"20241016211879"},"Children":[{"ID":"20241016211880-7y16vk1","Type":"NodeParagraph","Properties":{"id":"20241016211880-7y16vk1","updated":"20241016211880"},"Children":[{"Type":"NodeText","Data":"缺点："}]},{"ID":"20241016211881-nrxzkb8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211881-nrxzkb8","updated":"20241016211881"},"Children":[{"ID":"20241016211882-ttcz0gl","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211882-ttcz0gl","updated":"20241016211882"},"Children":[{"ID":"20241016211883-qrj25kl","Type":"NodeParagraph","Properties":{"id":"20241016211883-qrj25kl","updated":"20241016211883"},"Children":[{"Type":"NodeText","Data":"实现复杂"}]}]},{"ID":"20241016211884-fd1vtzk","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211884-fd1vtzk","updated":"20241016211884"},"Children":[{"ID":"20241016211885-gnfi9t2","Type":"NodeParagraph","Properties":{"id":"20241016211885-gnfi9t2","updated":"20241016211885"},"Children":[{"Type":"NodeText","Data":"存在误判可能"}]}]}]}]}]}]}]},{"ID":"20241016211886-e1lec7q","Type":"NodeParagraph","Properties":{"id":"20241016211886-e1lec7q","updated":"20241016211886"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缓存空对象思路分析："},{"Type":"NodeText","Data":"当我们客户端访问不存在的数据时，先请求redis，但是此时redis中没有数据，此时会访问到数据库，但是数据库中也没有数据，这个数据穿透了缓存，直击数据库，我们都知道数据库能够承载的并发不如redis这么高，如果大量的请求同时过来访问这种不存在的数据，这些请求就都会访问到数据库，简单的解决方案就是哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到缓存了"}]},{"ID":"20241016211887-ppe21i3","Type":"NodeParagraph","Properties":{"id":"20241016211887-ppe21i3","updated":"20241016211887"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"布隆过滤："},{"Type":"NodeText","Data":"布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中，"}]},{"ID":"20241016211888-nxrtksz","Type":"NodeParagraph","Properties":{"id":"20241016211888-nxrtksz","updated":"20241016211888"},"Children":[{"Type":"NodeText","Data":"假设布隆过滤器判断这个数据不存在，则直接返回"}]},{"ID":"20241016211889-wbx5lld","Type":"NodeParagraph","Properties":{"id":"20241016211889-wbx5lld","updated":"20241016211889"},"Children":[{"Type":"NodeText","Data":"这种方式优点在于节约内存空间，存在误判， 误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突"}]},{"ID":"20241016211890-46kw6ac","Type":"NodeParagraph","Properties":{"id":"20241016211890-46kw6ac","updated":"20241016211890"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653326156516","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653326156516-20241016213637-445h6n7.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211891-3jo49nf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211891-3jo49nf","updated":"20241016211891"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.6 编码解决商品查询的缓存穿透问题："}]},{"ID":"20241016211892-t5f77s8","Type":"NodeParagraph","Properties":{"id":"20241016211892-t5f77s8","updated":"20241016211892"},"Children":[{"Type":"NodeText","Data":"核心思路如下："}]},{"ID":"20241016211893-oupgpy3","Type":"NodeParagraph","Properties":{"id":"20241016211893-oupgpy3","updated":"20241016211893"},"Children":[{"Type":"NodeText","Data":"在原来的逻辑中，我们如果发现这个数据在mysql中不存在，直接就返回404了，这样是会存在缓存穿透问题的"}]},{"ID":"20241016211894-vlf2gzx","Type":"NodeParagraph","Properties":{"id":"20241016211894-vlf2gzx","updated":"20241016211894"},"Children":[{"Type":"NodeText","Data":"现在的逻辑中：如果这个数据不存在，我们不会返回404 ，还是会把这个数据写入到Redis中，并且将value设置为空，欧当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据。"}]},{"ID":"20241016211895-zd4lhtc","Type":"NodeParagraph","Properties":{"id":"20241016211895-zd4lhtc","updated":"20241016211895"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653327124561","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653327124561-20241016213637-u6k3c0e.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211896-kc0g7lo","Type":"NodeParagraph","Properties":{"id":"20241016211896-kc0g7lo","updated":"20241016211896"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"小总结："}]},{"ID":"20241016211897-kld116i","Type":"NodeParagraph","Properties":{"id":"20241016211897-kld116i","updated":"20241016211897"},"Children":[{"Type":"NodeText","Data":"缓存穿透产生的原因是什么？"}]},{"ID":"20241016211898-53y5uf4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211898-53y5uf4","updated":"20241016211898"},"Children":[{"ID":"20241016211899-s4xscz4","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211899-s4xscz4","updated":"20241016211899"},"Children":[{"ID":"20241016211900-u09v8ns","Type":"NodeParagraph","Properties":{"id":"20241016211900-u09v8ns","updated":"20241016211900"},"Children":[{"Type":"NodeText","Data":"用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力"}]}]}]},{"ID":"20241016211901-emakppj","Type":"NodeParagraph","Properties":{"id":"20241016211901-emakppj","updated":"20241016211901"},"Children":[{"Type":"NodeText","Data":"缓存穿透的解决方案有哪些？"}]},{"ID":"20241016211902-iucy82f","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211902-iucy82f","updated":"20241016211902"},"Children":[{"ID":"20241016211903-f7ji7ed","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211903-f7ji7ed","updated":"20241016211903"},"Children":[{"ID":"20241016211904-1dffh4b","Type":"NodeParagraph","Properties":{"id":"20241016211904-1dffh4b","updated":"20241016211904"},"Children":[{"Type":"NodeText","Data":"被动方式"}]},{"ID":"20241016211905-3hbreb6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211905-3hbreb6","updated":"20241016211905"},"Children":[{"ID":"20241016211906-j7w2xbi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211906-j7w2xbi","updated":"20241016211906"},"Children":[{"ID":"20241016211907-9azdkf2","Type":"NodeParagraph","Properties":{"id":"20241016211907-9azdkf2","updated":"20241016211907"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"缓存null值"}]}]},{"ID":"20241016211908-n26lndp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211908-n26lndp","updated":"20241016211908"},"Children":[{"ID":"20241016211909-57996j0","Type":"NodeParagraph","Properties":{"id":"20241016211909-57996j0","updated":"20241016211909"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"布隆过滤"}]}]}]}]},{"ID":"20241016211910-xl0n01c","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211910-xl0n01c","updated":"20241016211910"},"Children":[{"ID":"20241016211911-yh8ff1u","Type":"NodeParagraph","Properties":{"id":"20241016211911-yh8ff1u","updated":"20241016211911"},"Children":[{"Type":"NodeText","Data":"主动方式"}]},{"ID":"20241016211912-pud7ktl","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211912-pud7ktl","updated":"20241016211912"},"Children":[{"ID":"20241016211913-fuu1k67","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211913-fuu1k67","updated":"20241016211913"},"Children":[{"ID":"20241016211914-34cy1ll","Type":"NodeParagraph","Properties":{"id":"20241016211914-34cy1ll","updated":"20241016211914"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"增强id的复杂度，避免被猜测id规律"}]}]},{"ID":"20241016211915-yzranv2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211915-yzranv2","updated":"20241016211915"},"Children":[{"ID":"20241016211916-a7tns8q","Type":"NodeParagraph","Properties":{"id":"20241016211916-a7tns8q","updated":"20241016211916"},"Children":[{"Type":"NodeText","Data":"做好"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"数据的基础格式校验"},{"Type":"NodeText","Data":"（例如规定ID格式XX_XXX，攻击者不知道格式，不符合直接禁止）"}]}]},{"ID":"20241016211917-ml3vr6s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211917-ml3vr6s","updated":"20241016211917"},"Children":[{"ID":"20241016211918-gtg0p3s","Type":"NodeParagraph","Properties":{"id":"20241016211918-gtg0p3s","updated":"20241016211918"},"Children":[{"Type":"NodeText","Data":"加强用户"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"权限校验"}]}]},{"ID":"20241016211919-7cw23t9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016211919-7cw23t9","updated":"20241016211919"},"Children":[{"ID":"20241016211920-9t9ypa4","Type":"NodeParagraph","Properties":{"id":"20241016211920-9t9ypa4","updated":"20241016211920"},"Children":[{"Type":"NodeText","Data":"做好"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"热点参数的限流"}]}]}]}]}]},{"ID":"20241016211921-qbfbmc7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211921-qbfbmc7","updated":"20241016211921"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.7 缓存雪崩问题及解决思路"}]},{"ID":"20241016211922-qfo3plh","Type":"NodeParagraph","Properties":{"id":"20241016211922-qfo3plh","updated":"20241016211922"},"Children":[{"Type":"NodeText","Data":"缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。"}]},{"ID":"20241016211923-j1tnlu0","Type":"NodeParagraph","Properties":{"id":"20241016211923-j1tnlu0","updated":"20241016211923"},"Children":[{"Type":"NodeText","Data":"解决方案："}]},{"ID":"20241016211924-gt4xjse","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211924-gt4xjse","updated":"20241016211924"},"Children":[{"ID":"20241016211925-jqmba13","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211925-jqmba13","updated":"20241016211925"},"Children":[{"ID":"20241016211926-egaru1d","Type":"NodeParagraph","Properties":{"id":"20241016211926-egaru1d","updated":"20241016211926"},"Children":[{"Type":"NodeText","Data":"给不同的Key的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"TTL添加随机值"}]}]},{"ID":"20241016211927-ckof0tt","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211927-ckof0tt","updated":"20241016211927"},"Children":[{"ID":"20241016211928-ml1vry6","Type":"NodeParagraph","Properties":{"id":"20241016211928-ml1vry6","updated":"20241016211928"},"Children":[{"Type":"NodeText","Data":"利用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"Redis集群"},{"Type":"NodeText","Data":"提高服务的可用性（高可用）"}]}]},{"ID":"20241016211929-bdc25mh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211929-bdc25mh","updated":"20241016211929"},"Children":[{"ID":"20241016211930-pu49wes","Type":"NodeParagraph","Properties":{"id":"20241016211930-pu49wes","updated":"20241016211930"},"Children":[{"Type":"NodeText","Data":"给缓存业务添加"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"降级限流策略"},{"Type":"NodeText","Data":"（服务降级：直接返回服务不可用、拒绝服务，让用户等等，牺牲部分服务保护数据库，不要把服务压到数据库上去）"}]}]},{"ID":"20241016211931-sqatric","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211931-sqatric","updated":"20241016211931"},"Children":[{"ID":"20241016211932-n4oywgl","Type":"NodeParagraph","Properties":{"id":"20241016211932-n4oywgl","updated":"20241016211932"},"Children":[{"Type":"NodeText","Data":"给业务添加多级缓存"}]}]}]},{"ID":"20241016211933-ub7mxxn","Type":"NodeParagraph","Properties":{"id":"20241016211933-ub7mxxn","updated":"20241016211933"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653327884526","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653327884526-20241016213637-molthoc.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211934-dg3ppi9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211934-dg3ppi9","updated":"20241016211934"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.8 缓存击穿问题及解决思路"}]},{"ID":"20241016211935-u21e808","Type":"NodeParagraph","Properties":{"id":"20241016211935-u21e808","updated":"20241016211935"},"Children":[{"Type":"NodeText","Data":"缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。（可能是做活动的某件商品的key）"}]},{"ID":"20241016211936-h5m3iqz","Type":"NodeParagraph","Properties":{"id":"20241016211936-h5m3iqz","updated":"20241016211936"},"Children":[{"Type":"NodeText","Data":"常见的解决方案有两种："}]},{"ID":"20241016211937-807f1du","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211937-807f1du","updated":"20241016211937"},"Children":[{"ID":"20241016211938-85x0ydk","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211938-85x0ydk","updated":"20241016211938"},"Children":[{"ID":"20241016211939-o4tvhat","Type":"NodeParagraph","Properties":{"id":"20241016211939-o4tvhat","updated":"20241016211939"},"Children":[{"Type":"NodeText","Data":"互斥锁"}]}]},{"ID":"20241016211940-gs5ge53","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211940-gs5ge53","updated":"20241016211940"},"Children":[{"ID":"20241016211941-gfbkopo","Type":"NodeParagraph","Properties":{"id":"20241016211941-gfbkopo","updated":"20241016211941"},"Children":[{"Type":"NodeText","Data":"逻辑过期"}]}]}]},{"ID":"20241016211942-rwh1mcx","Type":"NodeParagraph","Properties":{"id":"20241016211942-rwh1mcx","updated":"20241016211942"},"Children":[{"Type":"NodeText","Data":"逻辑分析：假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大"}]},{"ID":"20241016211943-ts5b5r9","Type":"NodeParagraph","Properties":{"id":"20241016211943-ts5b5r9","updated":"20241016211943"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653328022622","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653328022622-20241016213637-vfy16eh.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211944-g0n5o0d","Type":"NodeParagraph","Properties":{"id":"20241016211944-g0n5o0d","updated":"20241016211944"},"Children":[{"Type":"NodeText","Data":"解决方案一、使用锁来解决："}]},{"ID":"20241016211945-b4kok4j","Type":"NodeParagraph","Properties":{"id":"20241016211945-b4kok4j","updated":"20241016211945"},"Children":[{"Type":"NodeText","Data":"因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。"}]},{"ID":"20241016211946-uimplg1","Type":"NodeParagraph","Properties":{"id":"20241016211946-uimplg1","updated":"20241016211946"},"Children":[{"Type":"NodeText","Data":"假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。"}]},{"ID":"20241016211947-sosy9qr","Type":"NodeParagraph","Properties":{"id":"20241016211947-sosy9qr","updated":"20241016211947"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653328288627","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653328288627-20241016213637-kjx87e7.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211948-8v2bibf","Type":"NodeParagraph","Properties":{"id":"20241016211948-8v2bibf","updated":"20241016211948"},"Children":[{"Type":"NodeText","Data":"解决方案二、逻辑过期方案"}]},{"ID":"20241016211949-2h0p81o","Type":"NodeParagraph","Properties":{"id":"20241016211949-2h0p81o","updated":"20241016211949"},"Children":[{"Type":"NodeText","Data":"方案分析：我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。"}]},{"ID":"20241016211950-tt464f7","Type":"NodeParagraph","Properties":{"id":"20241016211950-tt464f7","updated":"20241016211950"},"Children":[{"Type":"NodeText","Data":"我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。"}]},{"ID":"20241016211951-z34c78l","Type":"NodeParagraph","Properties":{"id":"20241016211951-z34c78l","updated":"20241016211951"},"Children":[{"Type":"NodeText","Data":"这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。"}]},{"ID":"20241016211952-87rawxm","Type":"NodeParagraph","Properties":{"id":"20241016211952-87rawxm","updated":"20241016211952"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653328663897","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653328663897-20241016213637-w4shf84.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211953-9jyib42","Type":"NodeParagraph","Properties":{"id":"20241016211953-9jyib42","updated":"20241016211953"},"Children":[{"Type":"NodeText","Data":"进行对比"}]},{"ID":"20241016211954-vy1nesh","Type":"NodeParagraph","Properties":{"id":"20241016211954-vy1nesh","updated":"20241016211954"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"互斥锁方案："},{"Type":"NodeText","Data":"由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响"}]},{"ID":"20241016211955-eqn5py9","Type":"NodeParagraph","Properties":{"id":"20241016211955-eqn5py9","updated":"20241016211955"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"逻辑过期方案："},{"Type":"NodeText","Data":" 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦"}]},{"ID":"20241016211956-k1lliq0","Type":"NodeParagraph","Properties":{"id":"20241016211956-k1lliq0","updated":"20241016211956"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653357522914","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653357522914-20241016213637-lf1y5mv.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211957-87j4tqi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211957-87j4tqi","updated":"20241016211957"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.9 利用互斥锁解决缓存击穿问题"}]},{"ID":"20241016211958-b335no3","Type":"NodeParagraph","Properties":{"id":"20241016211958-b335no3","updated":"20241016211958"},"Children":[{"Type":"NodeText","Data":"核心思路：相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是 进行查询之后，如果从缓存没有查询到数据，则进行互斥锁的获取，获取互斥锁后，判断是否获得到了锁，如果没有获得到，则休眠，过一会再进行尝试，直到获取到锁为止，才能进行查询"}]},{"ID":"20241016211959-81u87u8","Type":"NodeParagraph","Properties":{"id":"20241016211959-81u87u8","updated":"20241016211959"},"Children":[{"Type":"NodeText","Data":"如果获取到了锁的线程，再去进行查询，查询后将数据写入redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑，防止缓存击穿"}]},{"ID":"20241016211960-rxdrtdz","Type":"NodeParagraph","Properties":{"id":"20241016211960-rxdrtdz","updated":"20241016211960"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653357860001","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653357860001-20241016213637-re3pr3e.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211961-9cownu0","Type":"NodeParagraph","Properties":{"id":"20241016211961-9cownu0","updated":"20241016211961"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作锁的代码："}]},{"ID":"20241016211962-cidfhqv","Type":"NodeParagraph","Properties":{"id":"20241016211962-cidfhqv","updated":"20241016211962"},"Children":[{"Type":"NodeText","Data":"核心思路就是利用redis的setnx方法来表示获取锁，该方法含义是redis中如果没有这个key，则插入成功，返回1，在stringRedisTemplate中返回true，  如果有这个key则插入失败，则返回0，在stringRedisTemplate返回false，我们可以通过true，或者是false，来表示是否有线程成功插入key，成功插入的key的线程我们认为他就是获得到锁的线程。"}]},{"ID":"20241016211963-moz9smy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211963-moz9smy","updated":"20241016211963"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\nprivate boolean tryLock(String key) {\n    Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, \"1\", 10, TimeUnit.SECONDS);\n    return BooleanUtil.isTrue(flag);\n}\n\nprivate void unlock(String key) {\n    stringRedisTemplate.delete(key);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211964-8q85qdt","Type":"NodeParagraph","Properties":{"id":"20241016211964-8q85qdt","updated":"20241016211964"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作代码："}]},{"ID":"20241016211965-1fk5clv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211965-1fk5clv","updated":"20241016211965"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" public Shop queryWithMutex(Long id)  {\n        String key = CACHE_SHOP_KEY + id;\n        // 1、从redis中查询商铺缓存\n        String shopJson = stringRedisTemplate.opsForValue().get(\"key\");\n        // 2、判断是否存在\n        if (StrUtil.isNotBlank(shopJson)) {\n            // 存在,直接返回\n            return JSONUtil.toBean(shopJson, Shop.class);\n        }\n        //判断命中的值是否是空值\n        if (shopJson != null) {\n            //返回一个错误信息\n            return null;\n        }\n        // 4.实现缓存重构\n        //4.1 获取互斥锁\n        String lockKey = \"lock:shop:\" + id;\n        Shop shop = null;\n        try {\n            boolean isLock = tryLock(lockKey);\n            // 4.2 判断否获取成功\n            if(!isLock){\n                //4.3 失败，则休眠重试\n                Thread.sleep(50);\n                return queryWithMutex(id);\n            }\n            //4.4 成功，根据id查询数据库\n             shop = getById(id);\n            // 5.不存在，返回错误\n            if(shop == null){\n                 //将空值写入redis\n                stringRedisTemplate.opsForValue().set(key,\"\",CACHE_NULL_TTL,TimeUnit.MINUTES);\n                //返回错误信息\n                return null;\n            }\n            //6.写入redis\n            stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop),CACHE_NULL_TTL,TimeUnit.MINUTES);\n\n        }catch (Exception e){\n            throw new RuntimeException(e);\n        }\n        finally {\n            //7.释放互斥锁\n            unlock(lockKey);\n        }\n        return shop;\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211966-368dlri","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211966-368dlri","updated":"20241016211966"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.0 、利用逻辑过期解决缓存击穿问题"}]},{"ID":"20241016211967-dhnmys3","Type":"NodeParagraph","Properties":{"id":"20241016211967-dhnmys3","updated":"20241016211967"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"需求：修改根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题"}]},{"ID":"20241016211968-e3nkk5g","Type":"NodeParagraph","Properties":{"id":"20241016211968-e3nkk5g","updated":"20241016211968"},"Children":[{"Type":"NodeText","Data":"思路分析：当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。"}]},{"ID":"20241016211969-szuv8ap","Type":"NodeParagraph","Properties":{"id":"20241016211969-szuv8ap","updated":"20241016211969"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653360308731","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653360308731-20241016213637-o8bog2u.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211970-2y6jjov","Type":"NodeParagraph","Properties":{"id":"20241016211970-2y6jjov","updated":"20241016211970"},"Children":[{"Type":"NodeText","Data":"如果封装数据：因为现在redis中存储的数据的value需要带上过期时间，此时要么你去修改原来的实体类，要么你"}]},{"ID":"20241016211971-eqno7ne","Type":"NodeParagraph","Properties":{"id":"20241016211971-eqno7ne","updated":"20241016211971"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"步骤一、"}]},{"ID":"20241016211972-00m6qhu","Type":"NodeParagraph","Properties":{"id":"20241016211972-00m6qhu","updated":"20241016211972"},"Children":[{"Type":"NodeText","Data":"新建一个实体类，我们采用第二个方案，这个方案，对原来代码没有侵入性。（设计模式思想：=="},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"组合优于继承"},{"Type":"NodeText","Data":"==）"}]},{"ID":"20241016211973-plmm5y5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211973-plmm5y5","updated":"20241016211973"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Data\npublic class RedisData { // 扩展后的类型\n    private LocalDateTime expireTime;\n    private Object data; // 这里是原先的类型\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211974-yus3hub","Type":"NodeParagraph","Properties":{"id":"20241016211974-yus3hub","updated":"20241016211974"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"步骤二、"}]},{"ID":"20241016211975-fowm8s0","Type":"NodeParagraph","Properties":{"id":"20241016211975-fowm8s0","updated":"20241016211975"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ShopServiceImpl"},{"Type":"NodeText","Data":" 新增此方法，利用单元测试进行缓存预热"}]},{"ID":"20241016211976-ccyqkn6","Type":"NodeParagraph","Properties":{"id":"20241016211976-ccyqkn6","updated":"20241016211976"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653360807133","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653360807133-20241016213637-lvcf3th.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211977-ys9hg6a","Type":"NodeParagraph","Properties":{"id":"20241016211977-ys9hg6a","updated":"20241016211977"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在测试类中"}]},{"ID":"20241016211978-iz8ontp","Type":"NodeParagraph","Properties":{"id":"20241016211978-iz8ontp","updated":"20241016211978"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653360864839","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653360864839-20241016213637-amykbou.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016211979-m62zt0o","Type":"NodeParagraph","Properties":{"id":"20241016211979-m62zt0o","updated":"20241016211979"},"Children":[{"Type":"NodeText","Data":"步骤三：正式代码"}]},{"ID":"20241016211980-c1q8ha0","Type":"NodeParagraph","Properties":{"id":"20241016211980-c1q8ha0","updated":"20241016211980"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ShopServiceImpl"}]},{"ID":"20241016211981-x43rai0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211981-x43rai0","updated":"20241016211981"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final ExecutorService CACHE_REBUILD_EXECUTOR = Executors.newFixedThreadPool(10);\npublic Shop queryWithLogicalExpire( Long id ) {\n    String key = CACHE_SHOP_KEY + id;\n    // 1.从redis查询商铺缓存\n    String json = stringRedisTemplate.opsForValue().get(key);\n    // 2.判断是否存在\n    if (StrUtil.isBlank(json)) {\n        // 3.存在，直接返回\n        return null;\n    }\n    // 4.命中，需要先把json反序列化为对象\n    RedisData redisData = JSONUtil.toBean(json, RedisData.class);\n    Shop shop = JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);\n    LocalDateTime expireTime = redisData.getExpireTime();\n    // 5.判断是否过期\n    if(expireTime.isAfter(LocalDateTime.now())) {\n        // 5.1.未过期，直接返回店铺信息\n        return shop;\n    }\n    // 5.2.已过期，需要缓存重建\n    // 6.缓存重建\n    // 6.1.获取互斥锁\n    String lockKey = LOCK_SHOP_KEY + id;\n    boolean isLock = tryLock(lockKey);\n    // 6.2.判断是否获取锁成功\n    if (isLock){\n        CACHE_REBUILD_EXECUTOR.submit( ()-\u003e{\n\n            try{\n                //重建缓存\n                this.saveShop2Redis(id,20L);\n            }catch (Exception e){\n                throw new RuntimeException(e);\n            }finally {\n                unlock(lockKey);\n            }\n        });\n    }\n    // 6.4.返回过期的商铺信息\n    return shop;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211982-44tv72s","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016211982-44tv72s","updated":"20241016211982"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.1、封装Redis工具类"}]},{"ID":"20241016211983-67kh3r5","Type":"NodeParagraph","Properties":{"id":"20241016211983-67kh3r5","updated":"20241016211983"},"Children":[{"Type":"NodeText","Data":"基于StringRedisTemplate封装一个缓存工具类，满足下列需求："}]},{"ID":"20241016211984-vcc090t","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211984-vcc090t","updated":"20241016211984"},"Children":[{"ID":"20241016211985-jt6bvfw","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211985-jt6bvfw","updated":"20241016211985"},"Children":[{"ID":"20241016211986-vnvokax","Type":"NodeParagraph","Properties":{"id":"20241016211986-vnvokax","updated":"20241016211986"},"Children":[{"Type":"NodeText","Data":"方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间"}]}]},{"ID":"20241016211987-ng1o0w8","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211987-ng1o0w8","updated":"20241016211987"},"Children":[{"ID":"20241016211988-jsw5xp9","Type":"NodeParagraph","Properties":{"id":"20241016211988-jsw5xp9","updated":"20241016211988"},"Children":[{"Type":"NodeText","Data":"方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓"}]}]}]},{"ID":"20241016211989-byjyqlk","Type":"NodeParagraph","Properties":{"id":"20241016211989-byjyqlk","updated":"20241016211989"},"Children":[{"Type":"NodeText","Data":"存击穿问题"}]},{"ID":"20241016211990-8c1xazp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211990-8c1xazp","updated":"20241016211990"},"Children":[{"ID":"20241016211991-ece5d7u","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211991-ece5d7u","updated":"20241016211991"},"Children":[{"ID":"20241016211992-q0208uf","Type":"NodeParagraph","Properties":{"id":"20241016211992-q0208uf","updated":"20241016211992"},"Children":[{"Type":"NodeText","Data":"方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题"}]}]},{"ID":"20241016211993-h7ppnry","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016211993-h7ppnry","updated":"20241016211993"},"Children":[{"ID":"20241016211994-k9eayr2","Type":"NodeParagraph","Properties":{"id":"20241016211994-k9eayr2","updated":"20241016211994"},"Children":[{"Type":"NodeText","Data":"方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题"}]}]}]},{"ID":"20241016211995-xtyodle","Type":"NodeParagraph","Properties":{"id":"20241016211995-xtyodle","updated":"20241016211995"},"Children":[{"Type":"NodeText","Data":"将逻辑进行封装"}]},{"ID":"20241016211996-86wu0uu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211996-86wu0uu","updated":"20241016211996"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Slf4j\n@Component\npublic class CacheClient {\n\n    private final StringRedisTemplate stringRedisTemplate;\n\n    private static final ExecutorService CACHE_REBUILD_EXECUTOR = Executors.newFixedThreadPool(10);\n\n    public CacheClient(StringRedisTemplate stringRedisTemplate) {\n        this.stringRedisTemplate = stringRedisTemplate;\n    }\n\n    public void set(String key, Object value, Long time, TimeUnit unit) {\n        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);\n    }\n\n    public void setWithLogicalExpire(String key, Object value, Long time, TimeUnit unit) {\n        // 设置逻辑过期\n        RedisData redisData = new RedisData();\n        redisData.setData(value);\n        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));\n        // 写入Redis\n        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));\n    }\n\n    public \u003cR,ID\u003e R queryWithPassThrough(\n            String keyPrefix, ID id, Class\u003cR\u003e type, Function\u003cID, R\u003e dbFallback, Long time, TimeUnit unit){\n        String key = keyPrefix + id;\n        // 1.从redis查询商铺缓存\n        String json = stringRedisTemplate.opsForValue().get(key);\n        // 2.判断是否存在\n        if (StrUtil.isNotBlank(json)) {\n            // 3.存在，直接返回\n            return JSONUtil.toBean(json, type);\n        }\n        // 判断命中的是否是空值\n        if (json != null) {\n            // 返回一个错误信息\n            return null;\n        }\n\n        // 4.不存在，根据id查询数据库\n        R r = dbFallback.apply(id);\n        // 5.不存在，返回错误\n        if (r == null) {\n            // 将空值写入redis\n            stringRedisTemplate.opsForValue().set(key, \"\", CACHE_NULL_TTL, TimeUnit.MINUTES);\n            // 返回错误信息\n            return null;\n        }\n        // 6.存在，写入redis\n        this.set(key, r, time, unit);\n        return r;\n    }\n\n    public \u003cR, ID\u003e R queryWithLogicalExpire(\n            String keyPrefix, ID id, Class\u003cR\u003e type, Function\u003cID, R\u003e dbFallback, Long time, TimeUnit unit) {\n        String key = keyPrefix + id;\n        // 1.从redis查询商铺缓存\n        String json = stringRedisTemplate.opsForValue().get(key);\n        // 2.判断是否存在\n        if (StrUtil.isBlank(json)) {\n            // 3.存在，直接返回\n            return null;\n        }\n        // 4.命中，需要先把json反序列化为对象\n        RedisData redisData = JSONUtil.toBean(json, RedisData.class);\n        R r = JSONUtil.toBean((JSONObject) redisData.getData(), type);\n        LocalDateTime expireTime = redisData.getExpireTime();\n        // 5.判断是否过期\n        if(expireTime.isAfter(LocalDateTime.now())) {\n            // 5.1.未过期，直接返回店铺信息\n            return r;\n        }\n        // 5.2.已过期，需要缓存重建\n        // 6.缓存重建\n        // 6.1.获取互斥锁\n        String lockKey = LOCK_SHOP_KEY + id;\n        boolean isLock = tryLock(lockKey);\n        // 6.2.判断是否获取锁成功\n        if (isLock){\n            // 6.3.成功，开启独立线程，实现缓存重建\n            CACHE_REBUILD_EXECUTOR.submit(() -\u003e {\n                try {\n                    // 查询数据库\n                    R newR = dbFallback.apply(id);\n                    // 重建缓存\n                    this.setWithLogicalExpire(key, newR, time, unit);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }finally {\n                    // 释放锁\n                    unlock(lockKey);\n                }\n            });\n        }\n        // 6.4.返回过期的商铺信息\n        return r;\n    }\n\n    public \u003cR, ID\u003e R queryWithMutex(\n            String keyPrefix, ID id, Class\u003cR\u003e type, Function\u003cID, R\u003e dbFallback, Long time, TimeUnit unit) {\n        String key = keyPrefix + id;\n        // 1.从redis查询商铺缓存\n        String shopJson = stringRedisTemplate.opsForValue().get(key);\n        // 2.判断是否存在\n        if (StrUtil.isNotBlank(shopJson)) {\n            // 3.存在，直接返回\n            return JSONUtil.toBean(shopJson, type);\n        }\n        // 判断命中的是否是空值\n        if (shopJson != null) {\n            // 返回一个错误信息\n            return null;\n        }\n\n        // 4.实现缓存重建\n        // 4.1.获取互斥锁\n        String lockKey = LOCK_SHOP_KEY + id;\n        R r = null;\n        try {\n            boolean isLock = tryLock(lockKey);\n            // 4.2.判断是否获取成功\n            if (!isLock) {\n                // 4.3.获取锁失败，休眠并重试\n                Thread.sleep(50);\n                return queryWithMutex(keyPrefix, id, type, dbFallback, time, unit);\n            }\n            // 4.4.获取锁成功，根据id查询数据库\n            r = dbFallback.apply(id);\n            // 5.不存在，返回错误\n            if (r == null) {\n                // 将空值写入redis\n                stringRedisTemplate.opsForValue().set(key, \"\", CACHE_NULL_TTL, TimeUnit.MINUTES);\n                // 返回错误信息\n                return null;\n            }\n            // 6.存在，写入redis\n            this.set(key, r, time, unit);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }finally {\n            // 7.释放锁\n            unlock(lockKey);\n        }\n        // 8.返回\n        return r;\n    }\n\n    private boolean tryLock(String key) {\n        Boolean flag = stringRedisTemplate.opsForValue().setIfAbsent(key, \"1\", 10, TimeUnit.SECONDS);\n        return BooleanUtil.isTrue(flag);\n    }\n\n    private void unlock(String key) {\n        stringRedisTemplate.delete(key);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211997-hwucqcr","Type":"NodeParagraph","Properties":{"id":"20241016211997-hwucqcr","updated":"20241016211997"},"Children":[{"Type":"NodeText","Data":"在ShopServiceImpl 中"}]},{"ID":"20241016211998-76007qs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016211998-76007qs","updated":"20241016211998"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Resource\nprivate CacheClient cacheClient;\n\n @Override\n    public Result queryById(Long id) {\n        // 解决缓存穿透\n        Shop shop = cacheClient\n                .queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, this::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);\n\n        // 互斥锁解决缓存击穿\n        // Shop shop = cacheClient\n        //         .queryWithMutex(CACHE_SHOP_KEY, id, Shop.class, this::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);\n\n        // 逻辑过期解决缓存击穿\n        // Shop shop = cacheClient\n        //         .queryWithLogicalExpire(CACHE_SHOP_KEY, id, Shop.class, this::getById, 20L, TimeUnit.SECONDS);\n\n        if (shop == null) {\n            return Result.fail(\"店铺不存在！\");\n        }\n        // 7.返回\n        return Result.ok(shop);\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016211999-aa3b4iz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016211999-aa3b4iz","updated":"20241016211999"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"3、优惠卷秒杀"}]},{"ID":"20241016212000-ujytloa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212000-ujytloa","updated":"20241016212000"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.1 -全局唯一ID"}]},{"ID":"20241016212001-v74rtf1","Type":"NodeParagraph","Properties":{"id":"20241016212001-v74rtf1","updated":"20241016212001"},"Children":[{"Type":"NodeText","Data":"每个店铺都可以发布优惠券："}]},{"ID":"20241016212002-k5dbk2v","Type":"NodeParagraph","Properties":{"id":"20241016212002-k5dbk2v","updated":"20241016212002"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653362612286","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653362612286-20241016213637-w18w4af.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212003-736j75k","Type":"NodeParagraph","Properties":{"id":"20241016212003-736j75k","updated":"20241016212003"},"Children":[{"Type":"NodeText","Data":"当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题："}]},{"ID":"20241016212004-u0h2uru","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212004-u0h2uru","updated":"20241016212004"},"Children":[{"ID":"20241016212005-ax3m450","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212005-ax3m450","updated":"20241016212005"},"Children":[{"ID":"20241016212006-gag5ys3","Type":"NodeParagraph","Properties":{"id":"20241016212006-gag5ys3","updated":"20241016212006"},"Children":[{"Type":"NodeText","Data":"id的规律性太明显"}]}]},{"ID":"20241016212007-e7ikelx","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212007-e7ikelx","updated":"20241016212007"},"Children":[{"ID":"20241016212008-e1nemra","Type":"NodeParagraph","Properties":{"id":"20241016212008-e1nemra","updated":"20241016212008"},"Children":[{"Type":"NodeText","Data":"受单表数据量的限制"}]}]}]},{"ID":"20241016212009-xs1u7dn","Type":"NodeParagraph","Properties":{"id":"20241016212009-xs1u7dn","updated":"20241016212009"},"Children":[{"Type":"NodeText","Data":"场景分析：如果我们的id具有太明显的规则，用户或者说商业对手很容易猜测出来我们的一些敏感信息，比如商城在一天时间内，卖出了多少单，这明显不合适。"}]},{"ID":"20241016212010-ekz8day","Type":"NodeParagraph","Properties":{"id":"20241016212010-ekz8day","updated":"20241016212010"},"Children":[{"Type":"NodeText","Data":"场景分析二：随着我们商城规模越来越大，mysql的单表的容量不宜超过500W，数据量过大之后，我们要进行拆库拆表，但拆分表了之后，他们从逻辑上讲他们是同一张表，所以他们的id是不能一样的， 于是乎我们需要保证id的唯一性。"}]},{"ID":"20241016212011-anvpaqa","Type":"NodeParagraph","Properties":{"id":"20241016212011-anvpaqa","updated":"20241016212011"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"全局ID生成器"},{"Type":"NodeText","Data":"，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性："}]},{"ID":"20241016212012-i2mue2c","Type":"NodeParagraph","Properties":{"id":"20241016212012-i2mue2c","updated":"20241016212012"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653363100502","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653363100502-20241016213637-ux9sb97.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212013-ysdukd2","Type":"NodeParagraph","Properties":{"id":"20241016212013-ysdukd2","updated":"20241016212013"},"Children":[{"Type":"NodeText","Data":"Redis为什么行？"}]},{"ID":"20241016212014-tan675r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212014-tan675r","updated":"20241016212014"},"Children":[{"ID":"20241016212015-3dwvxpa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212015-3dwvxpa","updated":"20241016212015"},"Children":[{"ID":"20241016212016-115tnmb","Type":"NodeParagraph","Properties":{"id":"20241016212016-115tnmb","updated":"20241016212016"},"Children":[{"Type":"NodeText","Data":"Redis是独立于所有数据库表之外的，可以保证全局唯一"}]}]},{"ID":"20241016212017-cfvtlsm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212017-cfvtlsm","updated":"20241016212017"},"Children":[{"ID":"20241016212018-mp07wti","Type":"NodeParagraph","Properties":{"id":"20241016212018-mp07wti","updated":"20241016212018"},"Children":[{"Type":"NodeText","Data":"高可用和高性能"}]}]},{"ID":"20241016212019-6psv8ai","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212019-6psv8ai","updated":"20241016212019"},"Children":[{"ID":"20241016212020-uhqen2n","Type":"NodeParagraph","Properties":{"id":"20241016212020-uhqen2n","updated":"20241016212020"},"Children":[{"Type":"NodeText","Data":"递增性："}]}]},{"ID":"20241016212021-xz84n20","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212021-xz84n20","updated":"20241016212021"},"Children":[{"ID":"20241016212022-ysy8hf0","Type":"NodeParagraph","Properties":{"id":"20241016212022-ysy8hf0","updated":"20241016212022"},"Children":[{"Type":"NodeText","Data":"安全性："}]}]}]},{"ID":"20241016212023-75khyez","Type":"NodeParagraph","Properties":{"id":"20241016212023-75khyez","updated":"20241016212023"},"Children":[{"Type":"NodeText","Data":"为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息："}]},{"ID":"20241016212024-wyeufdr","Type":"NodeParagraph","Properties":{"id":"20241016212024-wyeufdr","updated":"20241016212024"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653363172079","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653363172079-20241016213637-1nxjzh1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":"ID的组成部分：符号位：1bit，永远为0"}]},{"ID":"20241016212025-ydzrb4s","Type":"NodeParagraph","Properties":{"id":"20241016212025-ydzrb4s","updated":"20241016212025"},"Children":[{"Type":"NodeText","Data":"时间戳：31bit，以秒为单位，可以使用69年"}]},{"ID":"20241016212026-6io502r","Type":"NodeParagraph","Properties":{"id":"20241016212026-6io502r","updated":"20241016212026"},"Children":[{"Type":"NodeText","Data":"序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID"}]},{"ID":"20241016212027-ey0gqwu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212027-ey0gqwu","updated":"20241016212027"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.2 -Redis实现全局唯一Id"}]},{"ID":"20241016212028-c8xd526","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212028-c8xd526","updated":"20241016212028"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\npublic class RedisIdWorker {\n    /**\n     * 开始时间戳\n     */\n    private static final long BEGIN_TIMESTAMP = 1640995200L;\n    /**\n     * 序列号的位数\n     */\n    private static final int COUNT_BITS = 32;\n\n    private StringRedisTemplate stringRedisTemplate;\n\n    public RedisIdWorker(StringRedisTemplate stringRedisTemplate) {\n        this.stringRedisTemplate = stringRedisTemplate;\n    }\n\n    public long nextId(String keyPrefix) {\n        // 1.生成时间戳\n        LocalDateTime now = LocalDateTime.now();\n        long nowSecond = now.toEpochSecond(ZoneOffset.UTC);\n        long timestamp = nowSecond - BEGIN_TIMESTAMP;\n\n        // 2.生成序列号\n        // 2.1.获取当前日期，精确到天\n        String date = now.format(DateTimeFormatter.ofPattern(\"yyyy:MM:dd\"));\n        // 2.2.自增长\n        long count = stringRedisTemplate.opsForValue().increment(\"icr:\" + keyPrefix + \":\" + date);\n\n        // 3.拼接并返回\n        return timestamp \u003c\u003c COUNT_BITS | count;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212029-v3efdio","Type":"NodeParagraph","Properties":{"id":"20241016212029-v3efdio","updated":"20241016212029"},"Children":[{"Type":"NodeText","Data":"测试类"}]},{"ID":"20241016212030-qe93dd1","Type":"NodeParagraph","Properties":{"id":"20241016212030-qe93dd1","updated":"20241016212030"},"Children":[{"Type":"NodeText","Data":"知识小贴士：关于countdownlatch"}]},{"ID":"20241016212031-4wxrrv9","Type":"NodeParagraph","Properties":{"id":"20241016212031-4wxrrv9","updated":"20241016212031"},"Children":[{"Type":"NodeText","Data":"countdownlatch名为信号枪：主要的作用是同步协调在多线程的等待于唤醒问题"}]},{"ID":"20241016212032-81fzcc6","Type":"NodeParagraph","Properties":{"id":"20241016212032-81fzcc6","updated":"20241016212032"},"Children":[{"Type":"NodeText","Data":"我们如果没有CountDownLatch ，那么由于程序是异步的，当异步程序没有执行完时，主线程就已经执行完了，然后我们期望的是分线程全部走完之后，主线程再走，所以我们此时需要使用到CountDownLatch"}]},{"ID":"20241016212033-x5phqqh","Type":"NodeParagraph","Properties":{"id":"20241016212033-x5phqqh","updated":"20241016212033"},"Children":[{"Type":"NodeText","Data":"CountDownLatch 中有两个最重要的方法"}]},{"ID":"20241016212034-giekb00","Type":"NodeParagraph","Properties":{"id":"20241016212034-giekb00","updated":"20241016212034"},"Children":[{"Type":"NodeText","Data":"1、countDown"}]},{"ID":"20241016212035-gokw621","Type":"NodeParagraph","Properties":{"id":"20241016212035-gokw621","updated":"20241016212035"},"Children":[{"Type":"NodeText","Data":"2、await"}]},{"ID":"20241016212036-nc845cb","Type":"NodeParagraph","Properties":{"id":"20241016212036-nc845cb","updated":"20241016212036"},"Children":[{"Type":"NodeText","Data":"await 方法 是阻塞方法，我们担心分线程没有执行完时，main线程就先执行，所以使用await可以让main线程阻塞，那么什么时候main线程不再阻塞呢？当CountDownLatch  内部维护的 变量变为0时，就不再阻塞，直接放行，那么什么时候CountDownLatch   维护的变量变为0 呢，我们只需要调用一次countDown ，内部变量就减少1，我们让分线程和变量绑定， 执行完一个分线程就减少一个变量，当分线程全部走完，CountDownLatch 维护的变量就是0，此时await就不再阻塞，统计出来的时间也就是所有分线程执行完后的时间。"}]},{"ID":"20241016212037-iia54vm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212037-iia54vm","updated":"20241016212037"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Test\nvoid testIdWorker() throws InterruptedException {\n    CountDownLatch latch = new CountDownLatch(300);\n\n    Runnable task = () -\u003e {\n        for (int i = 0; i \u003c 100; i++) {\n            long id = redisIdWorker.nextId(\"order\");\n            System.out.println(\"id = \" + id);\n        }\n        latch.countDown();\n    };\n    long begin = System.currentTimeMillis();\n    for (int i = 0; i \u003c 300; i++) {\n        es.submit(task);\n    }\n    latch.await();\n    long end = System.currentTimeMillis();\n    System.out.println(\"time = \" + (end - begin));\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212038-lc1pghw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212038-lc1pghw","updated":"20241016212038"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3 添加优惠卷"}]},{"ID":"20241016212039-rk1xy3k","Type":"NodeParagraph","Properties":{"id":"20241016212039-rk1xy3k","updated":"20241016212039"},"Children":[{"Type":"NodeText","Data":"每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购："}]},{"ID":"20241016212040-zwml106","Type":"NodeParagraph","Properties":{"id":"20241016212040-zwml106","updated":"20241016212040"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653365145124","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653365145124-20241016213637-0ssekfn.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212041-cixt87s","Type":"NodeParagraph","Properties":{"id":"20241016212041-cixt87s","updated":"20241016212041"},"Children":[{"Type":"NodeText","Data":"tb_voucher：优惠券的基本信息，优惠金额、使用规则等"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息"}]},{"ID":"20241016212042-1y2o7wc","Type":"NodeParagraph","Properties":{"id":"20241016212042-1y2o7wc","updated":"20241016212042"},"Children":[{"Type":"NodeText","Data":"平价卷由于优惠力度并不是很大，所以是可以任意领取"}]},{"ID":"20241016212043-5r5j16r","Type":"NodeParagraph","Properties":{"id":"20241016212043-5r5j16r","updated":"20241016212043"},"Children":[{"Type":"NodeText","Data":"而代金券由于优惠力度大，所以像第二种卷，就得限制数量，从表结构上也能看出，特价卷除了具有优惠卷的基本信息以外，还具有库存，抢购时间，结束时间等等字段"}]},{"ID":"20241016212044-z8nid6t","Type":"NodeParagraph","Properties":{"id":"20241016212044-z8nid6t","updated":"20241016212044"},"Children":[{"Type":"NodeText","Data":"**新增普通卷代码：  **VoucherController"}]},{"ID":"20241016212045-9luj87u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212045-9luj87u","updated":"20241016212045"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@PostMapping\npublic Result addVoucher(@RequestBody Voucher voucher) {\n    voucherService.save(voucher);\n    return Result.ok(voucher.getId());\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212046-z6fltjl","Type":"NodeParagraph","Properties":{"id":"20241016212046-z6fltjl","updated":"20241016212046"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"新增秒杀卷代码："}]},{"ID":"20241016212047-xy7hr6t","Type":"NodeParagraph","Properties":{"id":"20241016212047-xy7hr6t","updated":"20241016212047"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"VoucherController"}]},{"ID":"20241016212048-rvevxvw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212048-rvevxvw","updated":"20241016212048"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@PostMapping(\"seckill\")\npublic Result addSeckillVoucher(@RequestBody Voucher voucher) {\n    voucherService.addSeckillVoucher(voucher);\n    return Result.ok(voucher.getId());\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212049-ipn5zns","Type":"NodeParagraph","Properties":{"id":"20241016212049-ipn5zns","updated":"20241016212049"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"VoucherServiceImpl"}]},{"ID":"20241016212050-fnt1z4r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212050-fnt1z4r","updated":"20241016212050"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\n@Transactional\npublic void addSeckillVoucher(Voucher voucher) {\n    // 保存优惠券\n    save(voucher);\n    // 保存秒杀信息\n    SeckillVoucher seckillVoucher = new SeckillVoucher();\n    seckillVoucher.setVoucherId(voucher.getId());\n    seckillVoucher.setStock(voucher.getStock());\n    seckillVoucher.setBeginTime(voucher.getBeginTime());\n    seckillVoucher.setEndTime(voucher.getEndTime());\n    seckillVoucherService.save(seckillVoucher);\n    // 保存秒杀库存到Redis中\n    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212051-wy3xeuh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212051-wy3xeuh","updated":"20241016212051"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.4 实现秒杀下单"}]},{"ID":"20241016212052-pnfll7z","Type":"NodeParagraph","Properties":{"id":"20241016212052-pnfll7z","updated":"20241016212052"},"Children":[{"Type":"NodeText","Data":"下单核心思路：当我们点击抢购时，会触发右侧的请求，我们只需要编写对应的controller即可"}]},{"ID":"20241016212053-rty3woz","Type":"NodeParagraph","Properties":{"id":"20241016212053-rty3woz","updated":"20241016212053"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653365839526","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653365839526-20241016213637-vgozxkc.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212054-gpltqa4","Type":"NodeParagraph","Properties":{"id":"20241016212054-gpltqa4","updated":"20241016212054"},"Children":[{"Type":"NodeText","Data":"秒杀下单应该思考的内容："}]},{"ID":"20241016212055-ubv5uk1","Type":"NodeParagraph","Properties":{"id":"20241016212055-ubv5uk1","updated":"20241016212055"},"Children":[{"Type":"NodeText","Data":"下单时需要判断两点："}]},{"ID":"20241016212056-dgaah0r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212056-dgaah0r","updated":"20241016212056"},"Children":[{"ID":"20241016212057-yyqlhyf","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212057-yyqlhyf","updated":"20241016212057"},"Children":[{"ID":"20241016212058-kj6odh9","Type":"NodeParagraph","Properties":{"id":"20241016212058-kj6odh9","updated":"20241016212058"},"Children":[{"Type":"NodeText","Data":"秒杀是否开始或结束，如果尚未开始或已经结束则无法下单"}]}]},{"ID":"20241016212059-mdm1oxy","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212059-mdm1oxy","updated":"20241016212059"},"Children":[{"ID":"20241016212060-9sksyql","Type":"NodeParagraph","Properties":{"id":"20241016212060-9sksyql","updated":"20241016212060"},"Children":[{"Type":"NodeText","Data":"库存是否充足，不足则无法下单"}]}]}]},{"ID":"20241016212061-hl68zkv","Type":"NodeParagraph","Properties":{"id":"20241016212061-hl68zkv","updated":"20241016212061"},"Children":[{"Type":"NodeText","Data":"下单核心逻辑分析："}]},{"ID":"20241016212062-uxyz5h1","Type":"NodeParagraph","Properties":{"id":"20241016212062-uxyz5h1","updated":"20241016212062"},"Children":[{"Type":"NodeText","Data":"当用户开始进行下单，我们应当去查询优惠卷信息，查询到优惠卷信息，判断是否满足秒杀条件"}]},{"ID":"20241016212063-kvp8ciq","Type":"NodeParagraph","Properties":{"id":"20241016212063-kvp8ciq","updated":"20241016212063"},"Children":[{"Type":"NodeText","Data":"比如时间是否充足，如果时间充足，则进一步判断库存是否足够，如果两者都满足，则扣减库存，创建订单，然后返回订单id，如果有一个条件不满足则直接结束。"}]},{"ID":"20241016212064-y06obdy","Type":"NodeParagraph","Properties":{"id":"20241016212064-y06obdy","updated":"20241016212064"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653366238564","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653366238564-20241016213637-xxghkef.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212065-5x2pfun","Type":"NodeParagraph","Properties":{"id":"20241016212065-5x2pfun","updated":"20241016212065"},"Children":[{"Type":"NodeText","Data":"VoucherOrderServiceImpl"}]},{"ID":"20241016212066-noj75yl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212066-noj75yl","updated":"20241016212066"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\n@Transactional\npublic Result seckillVoucher(Long voucherId) {\n    // 1.查询优惠券\n    SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\n    // 2.判断秒杀是否开始\n    if (voucher.getBeginTime().isAfter(LocalDateTime.now())) {\n        // 尚未开始\n        return Result.fail(\"秒杀尚未开始！\");\n    }\n    // 3.判断秒杀是否已经结束\n    if (voucher.getEndTime().isBefore(LocalDateTime.now())) {\n        // 尚未开始\n        return Result.fail(\"秒杀已经结束！\");\n    }\n    // 4.判断库存是否充足\n    if (voucher.getStock() \u003c 1) {\n        // 库存不足\n        return Result.fail(\"库存不足！\");\n    }\n    //5，扣减库存\n    boolean success = seckillVoucherService.update()\n            .setSql(\"stock= stock -1\")\n            .eq(\"voucher_id\", voucherId).update();\n    if (!success) {\n        //扣减库存\n        return Result.fail(\"库存不足！\");\n    }\n    //6.创建订单\n    VoucherOrder voucherOrder = new VoucherOrder();\n    // 6.1.订单id\n    long orderId = redisIdWorker.nextId(\"order\");\n    voucherOrder.setId(orderId);\n    // 6.2.用户id\n    Long userId = UserHolder.getUser().getId();\n    voucherOrder.setUserId(userId);\n    // 6.3.代金券id\n    voucherOrder.setVoucherId(voucherId);\n    save(voucherOrder);\n\n    return Result.ok(orderId);\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212067-9nktv60","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212067-9nktv60","updated":"20241016212067"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.5 库存超卖问题分析"}]},{"ID":"20241016212068-51u3kty","Type":"NodeParagraph","Properties":{"id":"20241016212068-51u3kty","updated":"20241016212068"},"Children":[{"Type":"NodeText","Data":"有关超卖问题分析：在我们原有代码中是这么写的"}]},{"ID":"20241016212069-az7bbqe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212069-az7bbqe","updated":"20241016212069"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" if (voucher.getStock() \u003c 1) {\n        // 库存不足\n        return Result.fail(\"库存不足！\");\n    }\n    //5，扣减库存\n    boolean success = seckillVoucherService.update()\n            .setSql(\"stock= stock -1\")\n            .eq(\"voucher_id\", voucherId).update();\n    if (!success) {\n        //扣减库存\n        return Result.fail(\"库存不足！\");\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212070-v46omxc","Type":"NodeParagraph","Properties":{"id":"20241016212070-v46omxc","updated":"20241016212070"},"Children":[{"Type":"NodeText","Data":"假设线程1过来查询库存，判断出来库存大于1，正准备去扣减库存，但是还没有来得及去扣减，此时线程2过来，线程2也去查询库存，发现这个数量一定也大于1，那么这两个线程都会去扣减库存，最终多个线程相当于一起去扣减库存，此时就会出现库存的超卖问题。"}]},{"ID":"20241016212071-qse5b1p","Type":"NodeParagraph","Properties":{"id":"20241016212071-qse5b1p","updated":"20241016212071"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653368335155","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653368335155-20241016213637-juau2px.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212072-u6q3cbu","Type":"NodeParagraph","Properties":{"id":"20241016212072-u6q3cbu","updated":"20241016212072"},"Children":[{"Type":"NodeText","Data":"超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：而对于加锁，我们通常有两种解决方案：见下图："}]},{"ID":"20241016212073-hco1ze7","Type":"NodeParagraph","Properties":{"id":"20241016212073-hco1ze7","updated":"20241016212073"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653368562591","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653368562591-20241016213637-nnvxgmx.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212074-ojry4bz","Type":"NodeParagraph","Properties":{"id":"20241016212074-ojry4bz","updated":"20241016212074"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"悲观锁："}]},{"ID":"20241016212075-9nvjkez","Type":"NodeParagraph","Properties":{"id":"20241016212075-9nvjkez","updated":"20241016212075"},"Children":[{"Type":"NodeText","Data":"悲观锁可以实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等"}]},{"ID":"20241016212076-r7qgea4","Type":"NodeParagraph","Properties":{"id":"20241016212076-r7qgea4","updated":"20241016212076"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"乐观锁："}]},{"ID":"20241016212077-dghfb1f","Type":"NodeParagraph","Properties":{"id":"20241016212077-dghfb1f","updated":"20241016212077"},"Children":[{"Type":"NodeText","Data":"乐观锁：会有一个版本号，每次操作数据会对版本号+1，再提交回数据时，会去校验是否比之前的版本大1 ，如果大1 ，则进行操作成功，这套机制的核心逻辑在于，如果在操作过程中，版本号只比原来大1 ，那么就意味着操作过程中没有人对他进行过修改，他的操作就是安全的，如果不大1，则数据被修改过，当然乐观锁还有一些变种的处理方式比如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"cas（但是会有ABA问题，但是这里的优惠卷只会减少，所以不会出现ABA问题）"}]},{"ID":"20241016212078-vw4uykr","Type":"NodeParagraph","Properties":{"id":"20241016212078-vw4uykr","updated":"20241016212078"},"Children":[{"Type":"NodeText","Data":"乐观锁的典型代表：就是cas，利用cas进行无锁化机制加锁，var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 == 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值"}]},{"ID":"20241016212079-8nkm7o3","Type":"NodeParagraph","Properties":{"id":"20241016212079-8nkm7o3","updated":"20241016212079"},"Children":[{"Type":"NodeText","Data":"其中do while 是为了在操作失败时，再次进行自旋操作，即把之前的逻辑再操作一次。"}]},{"ID":"20241016212080-7erbcxr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212080-7erbcxr","updated":"20241016212080"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int var5;\ndo {\n    var5 = this.getIntVolatile(var1, var2);\n} while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n\nreturn var5;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212081-5fr6zzw","Type":"NodeParagraph","Properties":{"id":"20241016212081-5fr6zzw","updated":"20241016212081"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"课程中的使用方式："}]},{"ID":"20241016212082-a59a5k4","Type":"NodeParagraph","Properties":{"id":"20241016212082-a59a5k4","updated":"20241016212082"},"Children":[{"Type":"NodeText","Data":"课程中的使用方式是没有像cas一样带自旋的操作，也没有对version的版本号+1 ，他的操作逻辑是在操作时，对版本号进行+1 操作，然后要求version 如果是1 的情况下，才能操作，那么第一个线程在操作后，数据库中的version变成了2，但是他自己满足version=1 ，所以没有问题，此时线程2执行，线程2 最后也需要加上条件version =1 ，但是现在由于线程1已经操作过了，所以线程2，操作时就不满足version=1 的条件了，所以线程2无法执行成功"}]},{"ID":"20241016212083-msdiduw","Type":"NodeParagraph","Properties":{"id":"20241016212083-msdiduw","updated":"20241016212083"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653369268550","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653369268550-20241016213637-n6lmeh2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212084-9or2pl7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212084-9or2pl7","updated":"20241016212084"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.6 乐观锁解决超卖问题"}]},{"ID":"20241016212085-5wcibkm","Type":"NodeParagraph","Properties":{"id":"20241016212085-5wcibkm","updated":"20241016212085"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"修改代码方案一、"}]},{"ID":"20241016212086-rfi5g62","Type":"NodeParagraph","Properties":{"id":"20241016212086-rfi5g62","updated":"20241016212086"},"Children":[{"Type":"NodeText","Data":"VoucherOrderServiceImpl 在扣减库存时，改为："}]},{"ID":"20241016212087-ffppyg9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212087-ffppyg9","updated":"20241016212087"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"boolean success = seckillVoucherService.update()\n            .setSql(\"stock= stock -1\") //set stock = stock -1\n            .eq(\"voucher_id\", voucherId).eq(\"stock\",voucher.getStock()).update(); //where id = ？ and stock = ?\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212088-t6mq6dn","Type":"NodeParagraph","Properties":{"id":"20241016212088-t6mq6dn","updated":"20241016212088"},"Children":[{"Type":"NodeText","Data":"以上逻辑的核心含义是：只要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败"}]},{"ID":"20241016212089-ypku1i1","Type":"NodeParagraph","Properties":{"id":"20241016212089-ypku1i1","updated":"20241016212089"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"修改代码方案二、"}]},{"ID":"20241016212090-97h9ouo","Type":"NodeParagraph","Properties":{"id":"20241016212090-97h9ouo","updated":"20241016212090"},"Children":[{"Type":"NodeText","Data":"之前的方式要修改前后都保持一致，但是这样我们"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://www.bilibili.com/video/BV1cr4y1671t/?p=53\u0026share_source=copy_web\u0026vd_source=29909144aff7d2c1451e8d294e9a5437\u0026t=302","TextMarkTextContent":"分析过"},{"Type":"NodeText","Data":"，成功的概率太低，所以我们的乐观锁需要变一下，改成stock大于0 即可"}]},{"ID":"20241016212091-wvg3m72","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212091-wvg3m72","updated":"20241016212091"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"boolean success = seckillVoucherService.update()\n            .setSql(\"stock= stock -1\")\n            .eq(\"voucher_id\", voucherId).update().gt(\"stock\",0); //where id = ? and stock \u003e 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212092-169zmuf","Type":"NodeParagraph","Properties":{"id":"20241016212092-169zmuf","updated":"20241016212092"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"知识小扩展："}]},{"ID":"20241016212093-3l9sjf1","Type":"NodeParagraph","Properties":{"id":"20241016212093-3l9sjf1","updated":"20241016212093"},"Children":[{"Type":"NodeText","Data":"针对cas中的自旋压力过大，我们可以使用Longaddr这个类去解决"}]},{"ID":"20241016212094-32gxyos","Type":"NodeParagraph","Properties":{"id":"20241016212094-32gxyos","updated":"20241016212094"},"Children":[{"Type":"NodeText","Data":"Java8 提供的一个对AtomicLong改进后的一个类，LongAdder"}]},{"ID":"20241016212095-rk2sinp","Type":"NodeParagraph","Properties":{"id":"20241016212095-rk2sinp","updated":"20241016212095"},"Children":[{"Type":"NodeText","Data":"大量线程并发更新一个原子性的时候，天然的问题就是自旋，会导致并发性问题，当然这也比我们直接使用syn来的好"}]},{"ID":"20241016212096-5jn5u35","Type":"NodeParagraph","Properties":{"id":"20241016212096-5jn5u35","updated":"20241016212096"},"Children":[{"Type":"NodeText","Data":"所以利用这么一个类，LongAdder来进行优化"}]},{"ID":"20241016212097-pyaohh3","Type":"NodeParagraph","Properties":{"id":"20241016212097-pyaohh3","updated":"20241016212097"},"Children":[{"Type":"NodeText","Data":"如果获取某个值，则会对cell和base的值进行递增，最后返回一个完整的值"}]},{"ID":"20241016212098-otniolr","Type":"NodeParagraph","Properties":{"id":"20241016212098-otniolr","updated":"20241016212098"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653370271627","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653370271627-20241016213637-v2yb3oa.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212099-2c510v3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212099-2c510v3","updated":"20241016212099"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.6 优惠券秒杀-一人一单"}]},{"ID":"20241016212100-0mxcrkc","Type":"NodeParagraph","Properties":{"id":"20241016212100-0mxcrkc","updated":"20241016212100"},"Children":[{"Type":"NodeText","Data":"需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单"}]},{"ID":"20241016212101-n9cumal","Type":"NodeParagraph","Properties":{"id":"20241016212101-n9cumal","updated":"20241016212101"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"现在的问题在于："}]},{"ID":"20241016212102-mgc3dpx","Type":"NodeParagraph","Properties":{"id":"20241016212102-mgc3dpx","updated":"20241016212102"},"Children":[{"Type":"NodeText","Data":"优惠卷是为了引流，但是目前的情况是，一个人可以无限制的抢这个优惠卷，所以我们应当增加一层逻辑，让一个用户只能下一个单，而不是让一个用户下多个单"}]},{"ID":"20241016212103-900gcw3","Type":"NodeParagraph","Properties":{"id":"20241016212103-900gcw3","updated":"20241016212103"},"Children":[{"Type":"NodeText","Data":"具体操作逻辑如下：比如时间是否充足，如果时间充足，则进一步判断库存是否足够，然后再根据优惠卷id和用户id查询是否已经下过这个订单，如果下过这个订单，则不再下单，否则进行下单"}]},{"ID":"20241016212104-7xen8n2","Type":"NodeParagraph","Properties":{"id":"20241016212104-7xen8n2","updated":"20241016212104"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653371854389","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653371854389-20241016213637-hdvbpde.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212105-e16quvh","Type":"NodeParagraph","Properties":{"id":"20241016212105-e16quvh","updated":"20241016212105"},"Children":[{"Type":"NodeText","Data":"VoucherOrderServiceImpl"}]},{"ID":"20241016212106-78juk67","Type":"NodeParagraph","Properties":{"id":"20241016212106-78juk67","updated":"20241016212106"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"初步代码：增加一人一单逻辑"}]},{"ID":"20241016212107-25owxgn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212107-25owxgn","updated":"20241016212107"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result seckillVoucher(Long voucherId) {\n    // 1.查询优惠券\n    SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\n    // 2.判断秒杀是否开始\n    if (voucher.getBeginTime().isAfter(LocalDateTime.now())) {\n        // 尚未开始\n        return Result.fail(\"秒杀尚未开始！\");\n    }\n    // 3.判断秒杀是否已经结束\n    if (voucher.getEndTime().isBefore(LocalDateTime.now())) {\n        // 尚未开始\n        return Result.fail(\"秒杀已经结束！\");\n    }\n    // 4.判断库存是否充足\n    if (voucher.getStock() \u003c 1) {\n        // 库存不足\n        return Result.fail(\"库存不足！\");\n    }\n    // 5.一人一单逻辑\n    // 5.1.用户id\n    Long userId = UserHolder.getUser().getId();\n    int count = query().eq(\"user_id\", userId).eq(\"voucher_id\", voucherId).count();\n    // 5.2.判断是否存在\n    if (count \u003e 0) {\n        // 用户已经购买过了\n        return Result.fail(\"用户已经购买过一次！\");\n    }\n\n    //6，扣减库存\n    boolean success = seckillVoucherService.update()\n            .setSql(\"stock= stock -1\")\n            .eq(\"voucher_id\", voucherId).update();\n    if (!success) {\n        //扣减库存\n        return Result.fail(\"库存不足！\");\n    }\n    //7.创建订单\n    VoucherOrder voucherOrder = new VoucherOrder();\n    // 7.1.订单id\n    long orderId = redisIdWorker.nextId(\"order\");\n    voucherOrder.setId(orderId);\n\n    voucherOrder.setUserId(userId);\n    // 7.3.代金券id\n    voucherOrder.setVoucherId(voucherId);\n    save(voucherOrder);\n\n    return Result.ok(orderId);\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212108-p9042ex","Type":"NodeParagraph","Properties":{"id":"20241016212108-p9042ex","updated":"20241016212108"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"存在问题："},{"Type":"NodeText","Data":"现在的问题还是和之前一样，并发过来，查询数据库，都不存在订单，所以我们还是需要加锁，但是乐观锁比较适合更新数据，而现在是插入数据，所以我们需要使用悲观锁操作"}]},{"ID":"20241016212109-kiuatvn","Type":"NodeParagraph","Properties":{"id":"20241016212109-kiuatvn","updated":"20241016212109"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"注意："},{"Type":"NodeText","Data":"在这里提到了非常多的问题，我们需要慢慢的来思考，首先我们的初始方案是封装了一个createVoucherOrder方法，同时为了确保他线程安全，在方法上添加了一把synchronized 锁"}]},{"ID":"20241016212110-hzja1oe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212110-hzja1oe","updated":"20241016212110"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Transactional\npublic synchronized Result createVoucherOrder(Long voucherId) {\n\n\tLong userId = UserHolder.getUser().getId();\n         // 5.1.查询订单\n        int count = query().eq(\"user_id\", userId).eq(\"voucher_id\", voucherId).count();\n        // 5.2.判断是否存在\n        if (count \u003e 0) {\n            // 用户已经购买过了\n            return Result.fail(\"用户已经购买过一次！\");\n        }\n\n        // 6.扣减库存\n        boolean success = seckillVoucherService.update()\n                .setSql(\"stock = stock - 1\") // set stock = stock - 1\n                .eq(\"voucher_id\", voucherId).gt(\"stock\", 0) // where id = ? and stock \u003e 0\n                .update();\n        if (!success) {\n            // 扣减失败\n            return Result.fail(\"库存不足！\");\n        }\n\n        // 7.创建订单\n        VoucherOrder voucherOrder = new VoucherOrder();\n        // 7.1.订单id\n        long orderId = redisIdWorker.nextId(\"order\");\n        voucherOrder.setId(orderId);\n        // 7.2.用户id\n        voucherOrder.setUserId(userId);\n        // 7.3.代金券id\n        voucherOrder.setVoucherId(voucherId);\n        save(voucherOrder);\n\n        // 7.返回订单id\n        return Result.ok(orderId);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212111-y6w6a0e","Type":"NodeParagraph","Properties":{"id":"20241016212111-y6w6a0e","updated":"20241016212111"},"Children":[{"Type":"NodeText","Data":"，但是这样添加锁，锁的粒度太粗了，在使用锁过程中，控制"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"锁粒度"},{"Type":"NodeText","Data":" 是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会锁住，所以我们需要去控制锁的粒度，以下这段代码需要修改为："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"intern() 这个方法是从常量池中拿到数据，如果我们直接使用userId.toString() 他拿到的对象实际上是不同的对象，new出来的对象，我们使用锁必须保证锁必须是同一把，所以我们需要使用intern()方法"}]},{"ID":"20241016212112-mapwybf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212112-mapwybf","updated":"20241016212112"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Transactional\npublic  Result createVoucherOrder(Long voucherId) {\n\tLong userId = UserHolder.getUser().getId();\n\tsynchronized(userId.toString().intern()){\n         // 5.1.查询订单\n        int count = query().eq(\"user_id\", userId).eq(\"voucher_id\", voucherId).count();\n        // 5.2.判断是否存在\n        if (count \u003e 0) {\n            // 用户已经购买过了\n            return Result.fail(\"用户已经购买过一次！\");\n        }\n\n        // 6.扣减库存\n        boolean success = seckillVoucherService.update()\n                .setSql(\"stock = stock - 1\") // set stock = stock - 1\n                .eq(\"voucher_id\", voucherId).gt(\"stock\", 0) // where id = ? and stock \u003e 0\n                .update();\n        if (!success) {\n            // 扣减失败\n            return Result.fail(\"库存不足！\");\n        }\n\n        // 7.创建订单\n        VoucherOrder voucherOrder = new VoucherOrder();\n        // 7.1.订单id\n        long orderId = redisIdWorker.nextId(\"order\");\n        voucherOrder.setId(orderId);\n        // 7.2.用户id\n        voucherOrder.setUserId(userId);\n        // 7.3.代金券id\n        voucherOrder.setVoucherId(voucherId);\n        save(voucherOrder);\n\n        // 7.返回订单id\n        return Result.ok(orderId);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212113-3ehr1vo","Type":"NodeParagraph","Properties":{"id":"20241016212113-3ehr1vo","updated":"20241016212113"},"Children":[{"Type":"NodeText","Data":"但是以上代码还是存在问题，问题的原因在于当前方法被spring的事务控制，如果你在方法内部加锁，可能会导致当前方法事务还没有提交，但是锁已经释放也会导致问题，所以我们选择将当前方法整体包裹起来，确保事务不会出现问题：如下："}]},{"ID":"20241016212114-0usmlxd","Type":"NodeParagraph","Properties":{"id":"20241016212114-0usmlxd","updated":"20241016212114"},"Children":[{"Type":"NodeText","Data":"在seckillVoucher 方法中，添加以下逻辑，这样就能保证事务的特性，同时也控制了锁的粒度"}]},{"ID":"20241016212115-uqmpqce","Type":"NodeParagraph","Properties":{"id":"20241016212115-uqmpqce","updated":"20241016212115"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653373434815","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653373434815-20241016213637-5dr2tzf.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212116-xll4qhz","Type":"NodeParagraph","Properties":{"id":"20241016212116-xll4qhz","updated":"20241016212116"},"Children":[{"Type":"NodeText","Data":"但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务"}]},{"ID":"20241016212117-vpodque","Type":"NodeParagraph","Properties":{"id":"20241016212117-vpodque","updated":"20241016212117"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653383810643","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653383810643-20241016213637-oo53nzo.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212118-bki7n2u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212118-bki7n2u","updated":"20241016212118"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.7 集群环境下的并发问题"}]},{"ID":"20241016212119-c3au8k3","Type":"NodeParagraph","Properties":{"id":"20241016212119-c3au8k3","updated":"20241016212119"},"Children":[{"Type":"NodeText","Data":"通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。"}]},{"ID":"20241016212120-037mnll","Type":"NodeParagraph","Properties":{"id":"20241016212120-037mnll","updated":"20241016212120"},"Children":[{"Type":"NodeText","Data":"1、我们将服务启动两份，端口分别为8081和8082："}]},{"ID":"20241016212121-uwq1vqz","Type":"NodeParagraph","Properties":{"id":"20241016212121-uwq1vqz","updated":"20241016212121"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653373887844","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653373887844-20241016213637-lthawxz.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212122-cvpbk8z","Type":"NodeParagraph","Properties":{"id":"20241016212122-cvpbk8z","updated":"20241016212122"},"Children":[{"Type":"NodeText","Data":"2、然后修改nginx的conf目录下的nginx.conf文件，配置反向代理和负载均衡："}]},{"ID":"20241016212123-7y2l69g","Type":"NodeParagraph","Properties":{"id":"20241016212123-7y2l69g","updated":"20241016212123"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653373908620","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653373908620-20241016213637-xis1fnz.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212124-m8n44b5","Type":"NodeParagraph","Properties":{"id":"20241016212124-m8n44b5","updated":"20241016212124"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体操作(略)"}]},{"ID":"20241016212125-yv4ciot","Type":"NodeParagraph","Properties":{"id":"20241016212125-yv4ciot","updated":"20241016212125"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有关锁失效原因分析"}]},{"ID":"20241016212126-62uyomw","Type":"NodeParagraph","Properties":{"id":"20241016212126-62uyomw","updated":"20241016212126"},"Children":[{"Type":"NodeText","Data":"由于现在我们部署了多个tomcat，每个tomcat都有一个属于自己的jvm，那么假设在服务器A的tomcat内部，有两个线程，这两个线程由于使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的，但是如果现在是服务器B的tomcat内部，又有两个线程，但是他们的锁对象写的虽然和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2实现互斥，这就是 集群环境下，syn锁失效的原因，在这种情况下，我们就需要使用分布式锁来解决这个问题。"}]},{"ID":"20241016212127-5ydx2fw","Type":"NodeParagraph","Properties":{"id":"20241016212127-5ydx2fw","updated":"20241016212127"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653374044740","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653374044740-20241016213637-zbrvrin.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212128-mpy7z96","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212128-mpy7z96","updated":"20241016212128"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"4、分布式锁"}]},{"ID":"20241016212129-1muc7ql","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212129-1muc7ql","updated":"20241016212129"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.1 、基本原理和实现方式对比"}]},{"ID":"20241016212130-sk7zkw0","Type":"NodeParagraph","Properties":{"id":"20241016212130-sk7zkw0","updated":"20241016212130"},"Children":[{"Type":"NodeText","Data":"分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。"}]},{"ID":"20241016212131-evscma7","Type":"NodeParagraph","Properties":{"id":"20241016212131-evscma7","updated":"20241016212131"},"Children":[{"Type":"NodeText","Data":"分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路"}]},{"ID":"20241016212132-nanpkky","Type":"NodeParagraph","Properties":{"id":"20241016212132-nanpkky","updated":"20241016212132"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653374296906","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653374296906-20241016213637-7qvs9yp.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212133-9ez6ach","Type":"NodeParagraph","Properties":{"id":"20241016212133-9ez6ach","updated":"20241016212133"},"Children":[{"Type":"NodeText","Data":"那么分布式锁他应该满足一些什么样的条件呢？"}]},{"ID":"20241016212134-48j414b","Type":"NodeParagraph","Properties":{"id":"20241016212134-48j414b","updated":"20241016212134"},"Children":[{"Type":"NodeText","Data":"可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思"}]},{"ID":"20241016212135-akaqxsl","Type":"NodeParagraph","Properties":{"id":"20241016212135-akaqxsl","updated":"20241016212135"},"Children":[{"Type":"NodeText","Data":"互斥：互斥是分布式锁的最基本的条件，使得程序串行执行"}]},{"ID":"20241016212136-2tfh03x","Type":"NodeParagraph","Properties":{"id":"20241016212136-2tfh03x","updated":"20241016212136"},"Children":[{"Type":"NodeText","Data":"高可用：程序不易崩溃，时时刻刻都保证较高的可用性"}]},{"ID":"20241016212137-70ssm8v","Type":"NodeParagraph","Properties":{"id":"20241016212137-70ssm8v","updated":"20241016212137"},"Children":[{"Type":"NodeText","Data":"高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能"}]},{"ID":"20241016212138-bg91oax","Type":"NodeParagraph","Properties":{"id":"20241016212138-bg91oax","updated":"20241016212138"},"Children":[{"Type":"NodeText","Data":"安全性：安全也是程序中必不可少的一环"}]},{"ID":"20241016212139-myp9hiw","Type":"NodeParagraph","Properties":{"id":"20241016212139-myp9hiw","updated":"20241016212139"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653381992018","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653381992018-20241016213637-3fzs1j9.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212140-c3ypsxh","Type":"NodeParagraph","Properties":{"id":"20241016212140-c3ypsxh","updated":"20241016212140"},"Children":[{"Type":"NodeText","Data":"常见的分布式锁有三种"}]},{"ID":"20241016212141-xgs3nay","Type":"NodeParagraph","Properties":{"id":"20241016212141-xgs3nay","updated":"20241016212141"},"Children":[{"Type":"NodeText","Data":"Mysql：mysql本身就带有锁机制，但是由于mysql性能本身一般，所以采用分布式锁的情况下，其实使用mysql作为分布式锁比较少见"}]},{"ID":"20241016212142-uv1r30a","Type":"NodeParagraph","Properties":{"id":"20241016212142-uv1r30a","updated":"20241016212142"},"Children":[{"Type":"NodeText","Data":"Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁"}]},{"ID":"20241016212143-oylepb7","Type":"NodeParagraph","Properties":{"id":"20241016212143-oylepb7","updated":"20241016212143"},"Children":[{"Type":"NodeText","Data":"Zookeeper：zookeeper也是企业级开发中较好的一个实现分布式锁的方案，由于本套视频并不讲解zookeeper的原理和分布式锁的实现，所以不过多阐述"}]},{"ID":"20241016212144-attvfmr","Type":"NodeParagraph","Properties":{"id":"20241016212144-attvfmr","updated":"20241016212144"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653382219377","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653382219377-20241016213637-2ajpe3o.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212145-4n310jr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212145-4n310jr","updated":"20241016212145"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.2 、Redis分布式锁的实现核心思路"}]},{"ID":"20241016212146-ed2j2w5","Type":"NodeParagraph","Properties":{"id":"20241016212146-ed2j2w5","updated":"20241016212146"},"Children":[{"Type":"NodeText","Data":"实现分布式锁时需要实现的两个基本方法："}]},{"ID":"20241016212147-zsoke2o","Type":"NodeList","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212147-zsoke2o","updated":"20241016212147"},"Children":[{"ID":"20241016212148-wxjkevq","Type":"NodeListItem","Data":"*","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212148-wxjkevq","updated":"20241016212148"},"Children":[{"ID":"20241016212149-m5ex8f0","Type":"NodeParagraph","Properties":{"id":"20241016212149-m5ex8f0","updated":"20241016212149"},"Children":[{"Type":"NodeText","Data":"获取锁："}]},{"ID":"20241016212150-tkfu745","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212150-tkfu745","updated":"20241016212150"},"Children":[{"ID":"20241016212151-jp7fmnj","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212151-jp7fmnj","updated":"20241016212151"},"Children":[{"ID":"20241016212152-v93cv9i","Type":"NodeParagraph","Properties":{"id":"20241016212152-v93cv9i","updated":"20241016212152"},"Children":[{"Type":"NodeText","Data":"互斥：确保只能有一个线程获取锁"}]}]},{"ID":"20241016212153-qr3bdwq","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212153-qr3bdwq","updated":"20241016212153"},"Children":[{"ID":"20241016212154-5anlh75","Type":"NodeParagraph","Properties":{"id":"20241016212154-5anlh75","updated":"20241016212154"},"Children":[{"Type":"NodeText","Data":"非阻塞：尝试一次，成功返回true，失败返回false"}]}]}]}]},{"ID":"20241016212155-yfc3ei5","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212155-yfc3ei5","updated":"20241016212155"},"Children":[{"ID":"20241016212156-8rqtvfo","Type":"NodeParagraph","Properties":{"id":"20241016212156-8rqtvfo","updated":"20241016212156"},"Children":[{"Type":"NodeText","Data":"释放锁："}]},{"ID":"20241016212157-7zbb5jc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212157-7zbb5jc","updated":"20241016212157"},"Children":[{"ID":"20241016212158-xfb1okz","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212158-xfb1okz","updated":"20241016212158"},"Children":[{"ID":"20241016212159-hwq37to","Type":"NodeParagraph","Properties":{"id":"20241016212159-hwq37to","updated":"20241016212159"},"Children":[{"Type":"NodeText","Data":"手动释放"}]}]},{"ID":"20241016212160-9ng6tl8","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212160-9ng6tl8","updated":"20241016212160"},"Children":[{"ID":"20241016212161-akzca7c","Type":"NodeParagraph","Properties":{"id":"20241016212161-akzca7c","updated":"20241016212161"},"Children":[{"Type":"NodeText","Data":"超时释放：获取锁时添加一个超时时间"}]}]}]},{"ID":"20241016212162-9od5bqt","Type":"NodeParagraph","Properties":{"id":"20241016212162-9od5bqt","updated":"20241016212162"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653382669900","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653382669900-20241016213637-ondslwh.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]}]}]},{"ID":"20241016212163-3erkyfb","Type":"NodeParagraph","Properties":{"id":"20241016212163-3erkyfb","updated":"20241016212163"},"Children":[{"Type":"NodeText","Data":"核心思路："}]},{"ID":"20241016212164-6g64nqv","Type":"NodeParagraph","Properties":{"id":"20241016212164-6g64nqv","updated":"20241016212164"},"Children":[{"Type":"NodeText","Data":"我们利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可"}]},{"ID":"20241016212165-h2i9619","Type":"NodeParagraph","Properties":{"id":"20241016212165-h2i9619","updated":"20241016212165"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653382830810","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653382830810-20241016213637-o3nuw0z.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212166-warrcdg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212166-warrcdg","updated":"20241016212166"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.3 实现分布式锁版本一"}]},{"ID":"20241016212167-k70vx5c","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212167-k70vx5c","updated":"20241016212167"},"Children":[{"ID":"20241016212168-iyz2t7h","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212168-iyz2t7h","updated":"20241016212168"},"Children":[{"ID":"20241016212169-7l3pvoz","Type":"NodeParagraph","Properties":{"id":"20241016212169-7l3pvoz","updated":"20241016212169"},"Children":[{"Type":"NodeText","Data":"加锁逻辑"}]}]}]},{"ID":"20241016212170-x4bx991","Type":"NodeParagraph","Properties":{"id":"20241016212170-x4bx991","updated":"20241016212170"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"锁的基本接口"}]},{"ID":"20241016212171-5jjgig0","Type":"NodeParagraph","Properties":{"id":"20241016212171-5jjgig0","updated":"20241016212171"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1656079017728","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1656079017728-20241016213637-6fqhmji.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212172-rm1w2t3","Type":"NodeParagraph","Properties":{"id":"20241016212172-rm1w2t3","updated":"20241016212172"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SimpleRedisLock"}]},{"ID":"20241016212173-c351aqw","Type":"NodeParagraph","Properties":{"id":"20241016212173-c351aqw","updated":"20241016212173"},"Children":[{"Type":"NodeText","Data":"利用setnx方法进行加锁，同时增加过期时间，防止死锁，此方法可以保证加锁和增加过期时间具有原子性"}]},{"ID":"20241016212174-6zexcby","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212174-6zexcby","updated":"20241016212174"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final String KEY_PREFIX=\"lock:\"\n@Override\npublic boolean tryLock(long timeoutSec) {\n    // 获取线程标示\n    String threadId = Thread.currentThread().getId()\n    // 获取锁\n    Boolean success = stringRedisTemplate.opsForValue()\n            .setIfAbsent(KEY_PREFIX + name, threadId + \"\", timeoutSec, TimeUnit.SECONDS);\n    return Boolean.TRUE.equals(success);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212175-fprless","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212175-fprless","updated":"20241016212175"},"Children":[{"ID":"20241016212176-x101dn9","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212176-x101dn9","updated":"20241016212176"},"Children":[{"ID":"20241016212177-ig4midi","Type":"NodeParagraph","Properties":{"id":"20241016212177-ig4midi","updated":"20241016212177"},"Children":[{"Type":"NodeText","Data":"释放锁逻辑"}]}]}]},{"ID":"20241016212178-s71mp98","Type":"NodeParagraph","Properties":{"id":"20241016212178-s71mp98","updated":"20241016212178"},"Children":[{"Type":"NodeText","Data":"SimpleRedisLock"}]},{"ID":"20241016212179-r9raeq8","Type":"NodeParagraph","Properties":{"id":"20241016212179-r9raeq8","updated":"20241016212179"},"Children":[{"Type":"NodeText","Data":"释放锁，防止删除别人的锁"}]},{"ID":"20241016212180-dyiof4q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212180-dyiof4q","updated":"20241016212180"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public void unlock() {\n    //通过del删除锁\n    stringRedisTemplate.delete(KEY_PREFIX + name);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212181-0ip52x1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212181-0ip52x1","updated":"20241016212181"},"Children":[{"ID":"20241016212182-wwa756x","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212182-wwa756x","updated":"20241016212182"},"Children":[{"ID":"20241016212183-oou5a1v","Type":"NodeParagraph","Properties":{"id":"20241016212183-oou5a1v","updated":"20241016212183"},"Children":[{"Type":"NodeText","Data":"修改业务代码"}]}]}]},{"ID":"20241016212184-k2bptxa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212184-k2bptxa","updated":"20241016212184"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"  @Override\n    public Result seckillVoucher(Long voucherId) {\n        // 1.查询优惠券\n        SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\n        // 2.判断秒杀是否开始\n        if (voucher.getBeginTime().isAfter(LocalDateTime.now())) {\n            // 尚未开始\n            return Result.fail(\"秒杀尚未开始！\");\n        }\n        // 3.判断秒杀是否已经结束\n        if (voucher.getEndTime().isBefore(LocalDateTime.now())) {\n            // 尚未开始\n            return Result.fail(\"秒杀已经结束！\");\n        }\n        // 4.判断库存是否充足\n        if (voucher.getStock() \u003c 1) {\n            // 库存不足\n            return Result.fail(\"库存不足！\");\n        }\n        Long userId = UserHolder.getUser().getId();\n        //创建锁对象(新增代码)\n        SimpleRedisLock lock = new SimpleRedisLock(\"order:\" + userId, stringRedisTemplate);\n        //获取锁对象\n        boolean isLock = lock.tryLock(1200);\n\t\t//加锁失败\n        if (!isLock) {\n            return Result.fail(\"不允许重复下单\");\n        }\n        try {\n            //获取代理对象(事务)\n            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();\n            return proxy.createVoucherOrder(voucherId);\n        } finally {\n            //释放锁\n            lock.unlock();\n        }\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212185-81xbzo8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212185-81xbzo8","updated":"20241016212185"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.4 Redis分布式锁误删情况说明"}]},{"ID":"20241016212186-bzvmos1","Type":"NodeParagraph","Properties":{"id":"20241016212186-bzvmos1","updated":"20241016212186"},"Children":[{"Type":"NodeText","Data":"逻辑说明："}]},{"ID":"20241016212187-zz1bh9q","Type":"NodeParagraph","Properties":{"id":"20241016212187-zz1bh9q","updated":"20241016212187"},"Children":[{"Type":"NodeText","Data":"持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明"}]},{"ID":"20241016212188-o67ykrm","Type":"NodeParagraph","Properties":{"id":"20241016212188-o67ykrm","updated":"20241016212188"},"Children":[{"Type":"NodeText","Data":"解决方案：解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。"}]},{"ID":"20241016212189-beyaujv","Type":"NodeParagraph","Properties":{"id":"20241016212189-beyaujv","updated":"20241016212189"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653385920025","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653385920025-20241016213637-tw22pnm.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212190-pc91w06","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212190-pc91w06","updated":"20241016212190"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.5 解决Redis分布式锁误删问题"}]},{"ID":"20241016212191-fm1p3tp","Type":"NodeParagraph","Properties":{"id":"20241016212191-fm1p3tp","updated":"20241016212191"},"Children":[{"Type":"NodeText","Data":"需求：修改之前的分布式锁实现，满足：在获取锁时存入线程标示（可以用UUID表示）"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致"}]},{"ID":"20241016212192-2ondku5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212192-2ondku5","updated":"20241016212192"},"Children":[{"ID":"20241016212193-vbehuzh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212193-vbehuzh","updated":"20241016212193"},"Children":[{"ID":"20241016212194-d1z97d5","Type":"NodeParagraph","Properties":{"id":"20241016212194-d1z97d5","updated":"20241016212194"},"Children":[{"Type":"NodeText","Data":"如果一致则释放锁"}]}]},{"ID":"20241016212195-z1jeypd","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212195-z1jeypd","updated":"20241016212195"},"Children":[{"ID":"20241016212196-rfuwiri","Type":"NodeParagraph","Properties":{"id":"20241016212196-rfuwiri","updated":"20241016212196"},"Children":[{"Type":"NodeText","Data":"如果不一致则不释放锁"}]}]}]},{"ID":"20241016212197-6v3g9pc","Type":"NodeParagraph","Properties":{"id":"20241016212197-6v3g9pc","updated":"20241016212197"},"Children":[{"Type":"NodeText","Data":"核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。"}]},{"ID":"20241016212198-k97tb6o","Type":"NodeParagraph","Properties":{"id":"20241016212198-k97tb6o","updated":"20241016212198"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653387398820","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653387398820-20241016213637-afgy2zm.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212199-4q4neec","Type":"NodeParagraph","Properties":{"id":"20241016212199-4q4neec","updated":"20241016212199"},"Children":[{"Type":"NodeText","Data":"具体代码如下：加锁"}]},{"ID":"20241016212200-hhrd4dd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212200-hhrd4dd","updated":"20241016212200"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final String ID_PREFIX = UUID.randomUUID().toString(true) + \"-\";\n@Override\npublic boolean tryLock(long timeoutSec) {\n   // 获取线程标示\n   String threadId = ID_PREFIX + Thread.currentThread().getId();\n   // 获取锁\n   Boolean success = stringRedisTemplate.opsForValue()\n                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);\n   return Boolean.TRUE.equals(success);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212201-r04sfb9","Type":"NodeParagraph","Properties":{"id":"20241016212201-r04sfb9","updated":"20241016212201"},"Children":[{"Type":"NodeText","Data":"释放锁"}]},{"ID":"20241016212202-v98mji2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212202-v98mji2","updated":"20241016212202"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public void unlock() {\n    // 获取线程标示（可以用来判断是哪个线程的锁）\n    // 不直接用线程的id，因为在集群中id就可能冲突了，所以拼上UUID\n    String threadId = ID_PREFIX + Thread.currentThread().getId();\n    // 获取锁中的标示\n    String id = stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);\n    // 判断标示是否一致\n    if(threadId.equals(id)) { // 是自己的锁才删\n        // 释放锁\n        stringRedisTemplate.delete(KEY_PREFIX + name);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212203-yq2strq","Type":"NodeParagraph","Properties":{"id":"20241016212203-yq2strq","updated":"20241016212203"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有关代码实操说明："}]},{"ID":"20241016212204-wmzaq20","Type":"NodeParagraph","Properties":{"id":"20241016212204-wmzaq20","updated":"20241016212204"},"Children":[{"Type":"NodeText","Data":"在我们修改完此处代码后，我们重启工程，然后启动两个线程，第一个线程持有锁后，手动释放锁，第二个线程 此时进入到锁内部，再放行第一个线程，此时第一个线程由于锁的value值并非是自己，所以不能释放锁，也就无法删除别人的锁，此时第二个线程能够正确释放锁，通过这个案例初步说明我们解决了锁误删的问题。"}]},{"ID":"20241016212205-ko4kwvq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212205-ko4kwvq","updated":"20241016212205"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.6 分布式锁的原子性问题"}]},{"ID":"20241016212206-krzmrc5","Type":"NodeParagraph","Properties":{"id":"20241016212206-krzmrc5","updated":"20241016212206"},"Children":[{"Type":"NodeText","Data":"更为极端的误删逻辑说明："}]},{"ID":"20241016212207-gace5rk","Type":"NodeParagraph","Properties":{"id":"20241016212207-gace5rk","updated":"20241016212207"},"Children":[{"Type":"NodeText","Data":"线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生，"}]},{"ID":"20241016212208-otp6k70","Type":"NodeParagraph","Properties":{"id":"20241016212208-otp6k70","updated":"20241016212208"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653387764938","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653387764938-20241016213637-84we03z.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212209-t5mvenq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212209-t5mvenq","updated":"20241016212209"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.7 Lua脚本解决多条命令原子性问题"}]},{"ID":"20241016212210-euvf4ty","Type":"NodeParagraph","Properties":{"id":"20241016212210-euvf4ty","updated":"20241016212210"},"Children":[{"Type":"NodeText","Data":"Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：https://www.runoob.com/lua/lua-tutorial.html，这里重点介绍Redis提供的调用函数，我们可以使用lua去操作redis，又能保证他的原子性，这样就可以实现拿锁比锁删锁是一个原子性动作了，作为Java程序员这一块并不作一个简单要求，并不需要大家过于精通，只需要知道他有什么作用即可。"}]},{"ID":"20241016212211-5wbydyo","Type":"NodeParagraph","Properties":{"id":"20241016212211-5wbydyo","updated":"20241016212211"},"Children":[{"Type":"NodeText","Data":"这里重点介绍Redis提供的调用函数，语法如下："}]},{"ID":"20241016212212-mmew934","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"bHVh","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212212-mmew934","updated":"20241016212212"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bHVh","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"redis.call('命令名称', 'key', '其它参数', ...)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212213-qotqzn3","Type":"NodeParagraph","Properties":{"id":"20241016212213-qotqzn3","updated":"20241016212213"},"Children":[{"Type":"NodeText","Data":"例如，我们要执行set name jack，则脚本是这样："}]},{"ID":"20241016212214-yc0qgl8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"bHVh","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212214-yc0qgl8","updated":"20241016212214"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bHVh","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# 执行 set name jack\nredis.call('set', 'name', 'jack')\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212215-2fq1pf1","Type":"NodeParagraph","Properties":{"id":"20241016212215-2fq1pf1","updated":"20241016212215"},"Children":[{"Type":"NodeText","Data":"例如，我们要先执行set name Rose，再执行get name，则脚本如下："}]},{"ID":"20241016212216-ii1juvt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"bHVh","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212216-ii1juvt","updated":"20241016212216"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bHVh","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# 先执行 set name jack\nredis.call('set', 'name', 'Rose')\n# 再执行 get name\nlocal name = redis.call('get', 'name')\n# 返回\nreturn name\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212217-pcs8vut","Type":"NodeParagraph","Properties":{"id":"20241016212217-pcs8vut","updated":"20241016212217"},"Children":[{"Type":"NodeText","Data":"写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下："}]},{"ID":"20241016212218-pr3ark9","Type":"NodeParagraph","Properties":{"id":"20241016212218-pr3ark9","updated":"20241016212218"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653392181413","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653392181413-20241016213637-fc21qqj.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212219-rttzjjb","Type":"NodeParagraph","Properties":{"id":"20241016212219-rttzjjb","updated":"20241016212219"},"Children":[{"Type":"NodeText","Data":"例如，我们要执行 redis.call('set', 'name', 'jack') 这个脚本，语法如下："}]},{"ID":"20241016212220-qv5oprz","Type":"NodeParagraph","Properties":{"id":"20241016212220-qv5oprz","updated":"20241016212220"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653392218531","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653392218531-20241016213637-061qyfq.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212221-mq1imm7","Type":"NodeParagraph","Properties":{"id":"20241016212221-mq1imm7","updated":"20241016212221"},"Children":[{"Type":"NodeText","Data":"如果脚本中的key、value不想写死，可以作为参数传递。key类型参数会放入KEYS数组，其它参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组获取这些参数："}]},{"ID":"20241016212222-p4hnmue","Type":"NodeParagraph","Properties":{"id":"20241016212222-p4hnmue","updated":"20241016212222"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653392438917","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653392438917-20241016213637-cky27pk.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212223-pa1iwvh","Type":"NodeParagraph","Properties":{"id":"20241016212223-pa1iwvh","updated":"20241016212223"},"Children":[{"Type":"NodeText","Data":"接下来我们来回一下我们释放锁的逻辑："}]},{"ID":"20241016212224-rk9qk5f","Type":"NodeParagraph","Properties":{"id":"20241016212224-rk9qk5f","updated":"20241016212224"},"Children":[{"Type":"NodeText","Data":"释放锁的业务流程是这样的"}]},{"ID":"20241016212225-br9nb45","Type":"NodeParagraph","Properties":{"id":"20241016212225-br9nb45","updated":"20241016212225"},"Children":[{"Type":"NodeText","Data":"​\t1、获取锁中的线程标示"}]},{"ID":"20241016212226-feojjrz","Type":"NodeParagraph","Properties":{"id":"20241016212226-feojjrz","updated":"20241016212226"},"Children":[{"Type":"NodeText","Data":"​\t2、判断是否与指定的标示（当前线程标示）一致"}]},{"ID":"20241016212227-dl51rft","Type":"NodeParagraph","Properties":{"id":"20241016212227-dl51rft","updated":"20241016212227"},"Children":[{"Type":"NodeText","Data":"​\t3、如果一致则释放锁（删除）"}]},{"ID":"20241016212228-ancrz4x","Type":"NodeParagraph","Properties":{"id":"20241016212228-ancrz4x","updated":"20241016212228"},"Children":[{"Type":"NodeText","Data":"​\t4、如果不一致则什么都不做"}]},{"ID":"20241016212229-gtjrxua","Type":"NodeParagraph","Properties":{"id":"20241016212229-gtjrxua","updated":"20241016212229"},"Children":[{"Type":"NodeText","Data":"如果用Lua脚本来表示则是这样的："}]},{"ID":"20241016212230-r6x61t8","Type":"NodeParagraph","Properties":{"id":"20241016212230-r6x61t8","updated":"20241016212230"},"Children":[{"Type":"NodeText","Data":"最终我们操作redis的拿锁比锁删锁的lua脚本就会变成这样"}]},{"ID":"20241016212231-ma9ph4i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"bHVh","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212231-ma9ph4i","updated":"20241016212231"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bHVh","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示\n-- 获取锁中的标示，判断是否与当前线程标示一致\nif (redis.call('GET', KEYS[1]) == ARGV[1]) then\n  -- 一致，则删除锁\n  return redis.call('DEL', KEYS[1])\nend\n-- 不一致，则直接返回\nreturn 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212232-oj4rs4k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212232-oj4rs4k","updated":"20241016212232"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.8 利用Java代码调用Lua脚本改造分布式锁"}]},{"ID":"20241016212233-lr7c3i3","Type":"NodeParagraph","Properties":{"id":"20241016212233-lr7c3i3","updated":"20241016212233"},"Children":[{"Type":"NodeText","Data":"lua脚本本身并不需要大家花费太多时间去研究，只需要知道如何调用，大致是什么意思即可，所以在笔记中并不会详细的去解释这些lua表达式的含义。"}]},{"ID":"20241016212234-us46ds0","Type":"NodeParagraph","Properties":{"id":"20241016212234-us46ds0","updated":"20241016212234"},"Children":[{"Type":"NodeText","Data":"我们的RedisTemplate中，可以利用execute方法去执行lua脚本，参数对应关系就如下图股"}]},{"ID":"20241016212235-1qzxz3d","Type":"NodeParagraph","Properties":{"id":"20241016212235-1qzxz3d","updated":"20241016212235"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653393304844","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653393304844-20241016213637-kahox32.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212236-qj21z8n","Type":"NodeParagraph","Properties":{"id":"20241016212236-qj21z8n","updated":"20241016212236"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Java代码"}]},{"ID":"20241016212237-pt44nvk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212237-pt44nvk","updated":"20241016212237"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private static final DefaultRedisScript\u003cLong\u003e UNLOCK_SCRIPT;\n    static {\n        UNLOCK_SCRIPT = new DefaultRedisScript\u003c\u003e();\n        UNLOCK_SCRIPT.setLocation(new ClassPathResource(\"unlock.lua\"));\n        UNLOCK_SCRIPT.setResultType(Long.class);\n    }\n\npublic void unlock() {\n    // 调用lua脚本\n    stringRedisTemplate.execute(\n            UNLOCK_SCRIPT,\n            Collections.singletonList(KEY_PREFIX + name),\n            ID_PREFIX + Thread.currentThread().getId());\n}\n经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了~\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212238-hvxgofc","Type":"NodeParagraph","Properties":{"id":"20241016212238-hvxgofc","updated":"20241016212238"},"Children":[{"Type":"NodeText","Data":"小总结："}]},{"ID":"20241016212239-qjcttuv","Type":"NodeParagraph","Properties":{"id":"20241016212239-qjcttuv","updated":"20241016212239"},"Children":[{"Type":"NodeText","Data":"基于Redis的分布式锁实现思路："}]},{"ID":"20241016212240-li7ubmq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212240-li7ubmq","updated":"20241016212240"},"Children":[{"ID":"20241016212241-90wkf78","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212241-90wkf78","updated":"20241016212241"},"Children":[{"ID":"20241016212242-0jmgoqn","Type":"NodeParagraph","Properties":{"id":"20241016212242-0jmgoqn","updated":"20241016212242"},"Children":[{"Type":"NodeText","Data":"利用set nx ex获取锁，并设置过期时间，保存线程标示"}]}]},{"ID":"20241016212243-c50f50p","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212243-c50f50p","updated":"20241016212243"},"Children":[{"ID":"20241016212244-lqz9fjv","Type":"NodeParagraph","Properties":{"id":"20241016212244-lqz9fjv","updated":"20241016212244"},"Children":[{"Type":"NodeText","Data":"释放锁时先判断线程标示是否与自己一致，一致则删除锁"}]},{"ID":"20241016212245-2juxxzs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212245-2juxxzs","updated":"20241016212245"},"Children":[{"ID":"20241016212246-x3axz6y","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212246-x3axz6y","updated":"20241016212246"},"Children":[{"ID":"20241016212247-bpohi7q","Type":"NodeParagraph","Properties":{"id":"20241016212247-bpohi7q","updated":"20241016212247"},"Children":[{"Type":"NodeText","Data":"特性："}]},{"ID":"20241016212248-in28h3k","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212248-in28h3k","updated":"20241016212248"},"Children":[{"ID":"20241016212249-hpwcn2j","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212249-hpwcn2j","updated":"20241016212249"},"Children":[{"ID":"20241016212250-27gkuvu","Type":"NodeParagraph","Properties":{"id":"20241016212250-27gkuvu","updated":"20241016212250"},"Children":[{"Type":"NodeText","Data":"利用set nx满足互斥性"}]}]},{"ID":"20241016212251-zh7suad","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212251-zh7suad","updated":"20241016212251"},"Children":[{"ID":"20241016212252-y45hfp4","Type":"NodeParagraph","Properties":{"id":"20241016212252-y45hfp4","updated":"20241016212252"},"Children":[{"Type":"NodeText","Data":"利用set ex保证故障时锁依然能释放，避免死锁，提高安全性"}]}]},{"ID":"20241016212253-gu3anv5","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212253-gu3anv5","updated":"20241016212253"},"Children":[{"ID":"20241016212254-t0ucrnp","Type":"NodeParagraph","Properties":{"id":"20241016212254-t0ucrnp","updated":"20241016212254"},"Children":[{"Type":"NodeText","Data":"利用Redis集群保证高可用和高并发特性"}]}]}]}]}]}]}]},{"ID":"20241016212255-8alwi9k","Type":"NodeParagraph","Properties":{"id":"20241016212255-8alwi9k","updated":"20241016212255"},"Children":[{"Type":"NodeText","Data":"笔者总结：我们一路走来，利用添加过期时间，防止死锁问题的发生，但是有了过期时间之后，可能出现误删别人锁的问题，这个问题我们开始是利用删之前 通过拿锁，比锁，删锁这个逻辑来解决的，也就是删之前判断一下当前这把锁是否是属于自己的，但是现在还有原子性问题，也就是我们没法保证拿锁比锁删锁是一个原子性的动作，最后通过lua表达式来解决这个问题"}]},{"ID":"20241016212256-jsd30yn","Type":"NodeParagraph","Properties":{"id":"20241016212256-jsd30yn","updated":"20241016212256"},"Children":[{"Type":"NodeText","Data":"但是目前还剩下一个问题锁不住，什么是锁不住呢，你想一想，如果当过期时间到了之后，我们可以给他续期一下，比如续个30s，就好像是网吧上网， 网费到了之后，然后说，来，网管，再给我来10块的，是不是后边的问题都不会发生了，那么续期问题怎么解决呢，可以依赖于我们接下来要学习redission啦"}]},{"ID":"20241016212257-rf3ajvi","Type":"NodeParagraph","Properties":{"id":"20241016212257-rf3ajvi","updated":"20241016212257"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"测试逻辑："}]},{"ID":"20241016212258-gzhlah3","Type":"NodeParagraph","Properties":{"id":"20241016212258-gzhlah3","updated":"20241016212258"},"Children":[{"Type":"NodeText","Data":"第一个线程进来，得到了锁，手动删除锁，模拟锁超时了，其他线程会执行lua来抢锁，当第一天线程利用lua删除锁时，lua能保证他不能删除他的锁，第二个线程删除锁时，利用lua同样可以保证不会删除别人的锁，同时还能保证原子性。"}]},{"ID":"20241016212259-xienj99","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212259-xienj99","updated":"20241016212259"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"5、分布式锁-redission"}]},{"ID":"20241016212260-iyiy8yx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212260-iyiy8yx","updated":"20241016212260"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.1 分布式锁-redission功能介绍"}]},{"ID":"20241016212261-t8k4qfu","Type":"NodeParagraph","Properties":{"id":"20241016212261-t8k4qfu","updated":"20241016212261"},"Children":[{"Type":"NodeText","Data":"基于setnx实现的分布式锁存在下面的问题："}]},{"ID":"20241016212262-n1l1fzo","Type":"NodeParagraph","Properties":{"id":"20241016212262-n1l1fzo","updated":"20241016212262"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"重入问题"},{"Type":"NodeText","Data":"：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。"}]},{"ID":"20241016212263-xbs3zu1","Type":"NodeParagraph","Properties":{"id":"20241016212263-xbs3zu1","updated":"20241016212263"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不可重试"},{"Type":"NodeText","Data":"：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。"}]},{"ID":"20241016212264-5jx60m2","Type":"NodeParagraph","Properties":{"id":"20241016212264-5jx60m2","updated":"20241016212264"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"超时释放："},{"Type":"NodeText","Data":"我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患"}]},{"ID":"20241016212265-mq4zxpy","Type":"NodeParagraph","Properties":{"id":"20241016212265-mq4zxpy","updated":"20241016212265"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"主从一致性："},{"Type":"NodeText","Data":" 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。"}]},{"ID":"20241016212266-ulqiqjx","Type":"NodeParagraph","Properties":{"id":"20241016212266-ulqiqjx","updated":"20241016212266"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653546070602","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653546070602-20241016213637-oqq9tmg.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212267-i2x1ga6","Type":"NodeParagraph","Properties":{"id":"20241016212267-i2x1ga6","updated":"20241016212267"},"Children":[{"Type":"NodeText","Data":"那么什么是Redission呢"}]},{"ID":"20241016212268-w5bv4hw","Type":"NodeParagraph","Properties":{"id":"20241016212268-w5bv4hw","updated":"20241016212268"},"Children":[{"Type":"NodeText","Data":"Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。"}]},{"ID":"20241016212269-r4sjon2","Type":"NodeParagraph","Properties":{"id":"20241016212269-r4sjon2","updated":"20241016212269"},"Children":[{"Type":"NodeText","Data":"Redission提供了分布式锁的多种多样的功能"}]},{"ID":"20241016212270-7l9h3er","Type":"NodeParagraph","Properties":{"id":"20241016212270-7l9h3er","updated":"20241016212270"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653546736063","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653546736063-20241016213637-qjywiz4.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212271-pe4f8jb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212271-pe4f8jb","updated":"20241016212271"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.2 分布式锁-Redission快速入门"}]},{"ID":"20241016212272-89w62ks","Type":"NodeParagraph","Properties":{"id":"20241016212272-89w62ks","updated":"20241016212272"},"Children":[{"Type":"NodeText","Data":"引入依赖："}]},{"ID":"20241016212273-f4ypki5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212273-f4ypki5","updated":"20241016212273"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cdependency\u003e\n\t\u003cgroupId\u003eorg.redisson\u003c/groupId\u003e\n\t\u003cartifactId\u003eredisson\u003c/artifactId\u003e\n\t\u003cversion\u003e3.13.6\u003c/version\u003e\n\u003c/dependency\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212274-97mxwy9","Type":"NodeParagraph","Properties":{"id":"20241016212274-97mxwy9","updated":"20241016212274"},"Children":[{"Type":"NodeText","Data":"配置Redisson客户端："}]},{"ID":"20241016212275-47szs97","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212275-47szs97","updated":"20241016212275"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Configuration\npublic class RedissonConfig {\n\n    @Bean\n    public RedissonClient redissonClient(){\n        // 配置\n        Config config = new Config();\n        config.useSingleServer().setAddress(\"redis://192.168.150.101:6379\")\n            .setPassword(\"123321\");\n        // 创建RedissonClient对象\n        return Redisson.create(config);\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212276-ea5dobm","Type":"NodeParagraph","Properties":{"id":"20241016212276-ea5dobm","updated":"20241016212276"},"Children":[{"Type":"NodeText","Data":"如何使用Redission的分布式锁"}]},{"ID":"20241016212277-hnk71l5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212277-hnk71l5","updated":"20241016212277"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Resource\nprivate RedissionClient redissonClient;\n\n@Test\nvoid testRedisson() throws Exception{\n    //获取锁(可重入)，指定锁的名称\n    RLock lock = redissonClient.getLock(\"anyLock\");\n    //尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位\n    boolean isLock = lock.tryLock(1,10,TimeUnit.SECONDS);\n    //判断获取锁成功\n    if(isLock){\n        try{\n            System.out.println(\"执行业务\");          \n        }finally{\n            //释放锁\n            lock.unlock();\n        }     \n    }\n   \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212278-yf6c8mp","Type":"NodeParagraph","Properties":{"id":"20241016212278-yf6c8mp","updated":"20241016212278"},"Children":[{"Type":"NodeText","Data":"在 VoucherOrderServiceImpl"}]},{"ID":"20241016212279-e1yu787","Type":"NodeParagraph","Properties":{"id":"20241016212279-e1yu787","updated":"20241016212279"},"Children":[{"Type":"NodeText","Data":"注入RedissonClient"}]},{"ID":"20241016212280-u8wanqf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212280-u8wanqf","updated":"20241016212280"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Resource\nprivate RedissonClient redissonClient;\n\n@Override\npublic Result seckillVoucher(Long voucherId) {\n        // 1.查询优惠券\n        SeckillVoucher voucher = seckillVoucherService.getById(voucherId);\n        // 2.判断秒杀是否开始\n        if (voucher.getBeginTime().isAfter(LocalDateTime.now())) {\n            // 尚未开始\n            return Result.fail(\"秒杀尚未开始！\");\n        }\n        // 3.判断秒杀是否已经结束\n        if (voucher.getEndTime().isBefore(LocalDateTime.now())) {\n            // 尚未开始\n            return Result.fail(\"秒杀已经结束！\");\n        }\n        // 4.判断库存是否充足\n        if (voucher.getStock() \u003c 1) {\n            // 库存不足\n            return Result.fail(\"库存不足！\");\n        }\n        Long userId = UserHolder.getUser().getId();\n        //创建锁对象 这个代码不用了，因为我们现在要使用分布式锁\n        //SimpleRedisLock lock = new SimpleRedisLock(\"order:\" + userId, stringRedisTemplate);\n        RLock lock = redissonClient.getLock(\"lock:order:\" + userId);\n        //获取锁对象\n        boolean isLock = lock.tryLock();\n       \n\t\t//加锁失败\n        if (!isLock) {\n            return Result.fail(\"不允许重复下单\");\n        }\n        try {\n            //获取代理对象(事务)\n            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();\n            return proxy.createVoucherOrder(voucherId);\n        } finally {\n            //释放锁\n            lock.unlock();\n        }\n }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212281-5jkjjvf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212281-5jkjjvf","updated":"20241016212281"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.3 分布式锁-redission可重入锁原理"}]},{"ID":"20241016212282-2apboiu","Type":"NodeParagraph","Properties":{"id":"20241016212282-2apboiu","updated":"20241016212282"},"Children":[{"Type":"NodeText","Data":"在Lock锁中，他是借助于底层的一个voaltile的一个state变量来记录重入的状态的，比如当前没有人持有这把锁，那么state=0，假如有人持有这把锁，那么state=1，如果持有这把锁的人再次持有这把锁，那么state就会+1 ，如果是对于synchronized而言，他在c语言代码中会有一个count，原理和state类似，也是重入一次就加一，释放一次就-1 ，直到减少成0 时，表示当前这把锁没有被人持有。"}]},{"ID":"20241016212283-msoqnvg","Type":"NodeParagraph","Properties":{"id":"20241016212283-msoqnvg","updated":"20241016212283"},"Children":[{"Type":"NodeText","Data":"在redission中，我们的也支持支持可重入锁"}]},{"ID":"20241016212284-v5ucz9r","Type":"NodeParagraph","Properties":{"id":"20241016212284-v5ucz9r","updated":"20241016212284"},"Children":[{"Type":"NodeText","Data":"在分布式锁中，他采用hash结构用来存储锁，其中大key表示表示这把锁是否存在，用小key表示当前这把锁被哪个线程持有，所以接下来我们一起分析一下当前的这个lua表达式"}]},{"ID":"20241016212285-u3s9uhe","Type":"NodeParagraph","Properties":{"id":"20241016212285-u3s9uhe","updated":"20241016212285"},"Children":[{"Type":"NodeText","Data":"这个地方一共有3个参数"}]},{"ID":"20241016212286-lj911vx","Type":"NodeParagraph","Properties":{"id":"20241016212286-lj911vx","updated":"20241016212286"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"KEYS[1] ： 锁名称"}]},{"ID":"20241016212287-grdckkr","Type":"NodeParagraph","Properties":{"id":"20241016212287-grdckkr","updated":"20241016212287"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ARGV[1]：  锁失效时间"}]},{"ID":"20241016212288-bnhtnoz","Type":"NodeParagraph","Properties":{"id":"20241016212288-bnhtnoz","updated":"20241016212288"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ARGV[2]：  id + \u0026quot;:\u0026quot; + threadId; 锁的小key"}]},{"ID":"20241016212289-hzqsnjb","Type":"NodeParagraph","Properties":{"id":"20241016212289-hzqsnjb","updated":"20241016212289"},"Children":[{"Type":"NodeText","Data":"exists: 判断数据是否存在  name：是lock是否存在,如果==0，就表示当前这把锁不存在"}]},{"ID":"20241016212290-rz7arcp","Type":"NodeParagraph","Properties":{"id":"20241016212290-rz7arcp","updated":"20241016212290"},"Children":[{"Type":"NodeText","Data":"redis.call('hset', KEYS[1], ARGV[2], 1);此时他就开始往redis里边去写数据 ，写成一个hash结构"}]},{"ID":"20241016212291-34m950y","Type":"NodeParagraph","Properties":{"id":"20241016212291-34m950y","updated":"20241016212291"},"Children":[{"Type":"NodeText","Data":"Lock{"}]},{"ID":"20241016212292-ak6c3l2","Type":"NodeParagraph","Properties":{"id":"20241016212292-ak6c3l2","updated":"20241016212292"},"Children":[{"Type":"NodeText","Data":"​    id + "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"\u0026quot;:\u0026quot;"},{"Type":"NodeText","Data":" + threadId :  1"}]},{"ID":"20241016212293-ztbu3a5","Type":"NodeParagraph","Properties":{"id":"20241016212293-ztbu3a5","updated":"20241016212293"},"Children":[{"Type":"NodeText","Data":"}"}]},{"ID":"20241016212294-bewes43","Type":"NodeParagraph","Properties":{"id":"20241016212294-bewes43","updated":"20241016212294"},"Children":[{"Type":"NodeText","Data":"如果当前这把锁存在，则第一个条件不满足，再判断"}]},{"ID":"20241016212295-e531qhy","Type":"NodeParagraph","Properties":{"id":"20241016212295-e531qhy","updated":"20241016212295"},"Children":[{"Type":"NodeText","Data":"redis.call('hexists', KEYS[1], ARGV[2]) == 1"}]},{"ID":"20241016212296-kg74f0i","Type":"NodeParagraph","Properties":{"id":"20241016212296-kg74f0i","updated":"20241016212296"},"Children":[{"Type":"NodeText","Data":"此时需要通过大key+小key判断当前这把锁是否是属于自己的，如果是自己的，则进行"}]},{"ID":"20241016212297-1lbkfsq","Type":"NodeParagraph","Properties":{"id":"20241016212297-1lbkfsq","updated":"20241016212297"},"Children":[{"Type":"NodeText","Data":"redis.call('hincrby', KEYS[1], ARGV[2], 1)"}]},{"ID":"20241016212298-fnxcxmm","Type":"NodeParagraph","Properties":{"id":"20241016212298-fnxcxmm","updated":"20241016212298"},"Children":[{"Type":"NodeText","Data":"将当前这个锁的value进行+1 ，redis.call('pexpire', KEYS[1], ARGV[1]); 然后再对其设置过期时间，如果以上两个条件都不满足，则表示当前这把锁抢锁失败，最后返回pttl，即为当前这把锁的失效时间"}]},{"ID":"20241016212299-20y73us","Type":"NodeParagraph","Properties":{"id":"20241016212299-20y73us","updated":"20241016212299"},"Children":[{"Type":"NodeText","Data":"如果小伙帮们看了前边的源码， 你会发现他会去判断当前这个方法的返回值是否为null，如果是null，则对应则前两个if对应的条件，退出抢锁逻辑，如果返回的不是null，即走了第三个分支，在源码处会进行while(true)的自旋抢锁。"}]},{"ID":"20241016212300-toqxj4d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"bHVh","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212300-toqxj4d","updated":"20241016212300"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bHVh","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\"if (redis.call('exists', KEYS[1]) == 0) then \" +\n                  \"redis.call('hset', KEYS[1], ARGV[2], 1); \" +\n                  \"redis.call('pexpire', KEYS[1], ARGV[1]); \" +\n                  \"return nil; \" +\n              \"end; \" +\n              \"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then \" +\n                  \"redis.call('hincrby', KEYS[1], ARGV[2], 1); \" +\n                  \"redis.call('pexpire', KEYS[1], ARGV[1]); \" +\n                  \"return nil; \" +\n              \"end; \" +\n              \"return redis.call('pttl', KEYS[1]);\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212301-eiscert","Type":"NodeParagraph","Properties":{"id":"20241016212301-eiscert","updated":"20241016212301"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653548087334","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653548087334-20241016213637-oqbgf03.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212302-ti78q39","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212302-ti78q39","updated":"20241016212302"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.4 分布式锁-redission锁重试和WatchDog机制"}]},{"ID":"20241016212303-dty8zil","Type":"NodeParagraph","Properties":{"id":"20241016212303-dty8zil","updated":"20241016212303"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"说明"},{"Type":"NodeText","Data":"：由于课程中已经说明了有关tryLock的源码解析以及其看门狗原理，所以笔者在这里给大家分析lock()方法的源码解析，希望大家在学习过程中，能够掌握更多的知识"}]},{"ID":"20241016212304-455jg5g","Type":"NodeParagraph","Properties":{"id":"20241016212304-455jg5g","updated":"20241016212304"},"Children":[{"Type":"NodeText","Data":"抢锁过程中，获得当前线程，通过tryAcquire进行抢锁，该抢锁逻辑和之前逻辑相同"}]},{"ID":"20241016212305-428t5hh","Type":"NodeParagraph","Properties":{"id":"20241016212305-428t5hh","updated":"20241016212305"},"Children":[{"Type":"NodeText","Data":"1、先判断当前这把锁是否存在，如果不存在，插入一把锁，返回null"}]},{"ID":"20241016212306-i77qx7s","Type":"NodeParagraph","Properties":{"id":"20241016212306-i77qx7s","updated":"20241016212306"},"Children":[{"Type":"NodeText","Data":"2、判断当前这把锁是否是属于当前线程，如果是，则返回null"}]},{"ID":"20241016212307-8k7caat","Type":"NodeParagraph","Properties":{"id":"20241016212307-8k7caat","updated":"20241016212307"},"Children":[{"Type":"NodeText","Data":"所以如果返回是null，则代表着当前这哥们已经抢锁完毕，或者可重入完毕，但是如果以上两个条件都不满足，则进入到第三个条件，返回的是锁的失效时间，同学们可以自行往下翻一点点，你能发现有个while( true) 再次进行tryAcquire进行抢锁"}]},{"ID":"20241016212308-zt5cm2x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212308-zt5cm2x","updated":"20241016212308"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"long threadId = Thread.currentThread().getId();\nLong ttl = tryAcquire(-1, leaseTime, unit, threadId);\n// lock acquired\nif (ttl == null) {\n    return;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212309-uy2hna7","Type":"NodeParagraph","Properties":{"id":"20241016212309-uy2hna7","updated":"20241016212309"},"Children":[{"Type":"NodeText","Data":"接下来会有一个条件分支，因为lock方法有重载方法，一个是带参数，一个是不带参数，如果带带参数传入的值是-1，如果传入参数，则leaseTime是他本身，所以如果传入了参数，此时leaseTime != -1 则会进去抢锁，抢锁的逻辑就是之前说的那三个逻辑"}]},{"ID":"20241016212310-x3rgfgl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212310-x3rgfgl","updated":"20241016212310"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"if (leaseTime != -1) {\n    return tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212311-opn2nla","Type":"NodeParagraph","Properties":{"id":"20241016212311-opn2nla","updated":"20241016212311"},"Children":[{"Type":"NodeText","Data":"如果是没有传入时间，则此时也会进行抢锁， 而且抢锁时间是默认看门狗时间 commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout()"}]},{"ID":"20241016212312-vxgzg3q","Type":"NodeParagraph","Properties":{"id":"20241016212312-vxgzg3q","updated":"20241016212312"},"Children":[{"Type":"NodeText","Data":"ttlRemainingFuture.onComplete((ttlRemaining, e) 这句话相当于对以上抢锁进行了监听，也就是说当上边抢锁完毕后，此方法会被调用，具体调用的逻辑就是去后台开启一个线程，进行续约逻辑，也就是看门狗线程"}]},{"ID":"20241016212313-nhvvlh0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212313-nhvvlh0","updated":"20241016212313"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"RFuture\u003cLong\u003e ttlRemainingFuture = tryLockInnerAsync(waitTime,\n                                        commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),\n                                        TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);\nttlRemainingFuture.onComplete((ttlRemaining, e) -\u003e {\n    if (e != null) {\n        return;\n    }\n\n    // lock acquired\n    if (ttlRemaining == null) {\n        scheduleExpirationRenewal(threadId);\n    }\n});\nreturn ttlRemainingFuture;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212314-0fqlra0","Type":"NodeParagraph","Properties":{"id":"20241016212314-0fqlra0","updated":"20241016212314"},"Children":[{"Type":"NodeText","Data":"此逻辑就是续约逻辑，注意看commandExecutor.getConnectionManager().newTimeout（） 此方法"}]},{"ID":"20241016212315-wrunchm","Type":"NodeParagraph","Properties":{"id":"20241016212315-wrunchm","updated":"20241016212315"},"Children":[{"Type":"NodeText","Data":"Method(  "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"new"},{"Type":"NodeText","Data":" TimerTask() {},参数2 ，参数3  )"}]},{"ID":"20241016212316-6ln8hi2","Type":"NodeParagraph","Properties":{"id":"20241016212316-6ln8hi2","updated":"20241016212316"},"Children":[{"Type":"NodeText","Data":"指的是：通过参数2，参数3 去描述什么时候去做参数1的事情，现在的情况是：10s之后去做参数一的事情"}]},{"ID":"20241016212317-mbecny5","Type":"NodeParagraph","Properties":{"id":"20241016212317-mbecny5","updated":"20241016212317"},"Children":[{"Type":"NodeText","Data":"因为锁的失效时间是30s，当10s之后，此时这个timeTask 就触发了，他就去进行续约，把当前这把锁续约成30s，如果操作成功，那么此时就会递归调用自己，再重新设置一个timeTask()，于是再过10s后又再设置一个timerTask，完成不停的续约"}]},{"ID":"20241016212318-ew5owmh","Type":"NodeParagraph","Properties":{"id":"20241016212318-ew5owmh","updated":"20241016212318"},"Children":[{"Type":"NodeText","Data":"那么大家可以想一想，假设我们的线程出现了宕机他还会续约吗？当然不会，因为没有人再去调用renewExpiration这个方法，所以等到时间之后自然就释放了。"}]},{"ID":"20241016212319-o6fkx2d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212319-o6fkx2d","updated":"20241016212319"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private void renewExpiration() {\n    ExpirationEntry ee = EXPIRATION_RENEWAL_MAP.get(getEntryName());\n    if (ee == null) {\n        return;\n    }\n    \n    Timeout task = commandExecutor.getConnectionManager().newTimeout(new TimerTask() {\n        @Override\n        public void run(Timeout timeout) throws Exception {\n            ExpirationEntry ent = EXPIRATION_RENEWAL_MAP.get(getEntryName());\n            if (ent == null) {\n                return;\n            }\n            Long threadId = ent.getFirstThreadId();\n            if (threadId == null) {\n                return;\n            }\n            \n            RFuture\u003cBoolean\u003e future = renewExpirationAsync(threadId);\n            future.onComplete((res, e) -\u003e {\n                if (e != null) {\n                    log.error(\"Can't update lock \" + getName() + \" expiration\", e);\n                    return;\n                }\n                \n                if (res) {\n                    // reschedule itself\n                    renewExpiration();\n                }\n            });\n        }\n    }, internalLockLeaseTime / 3, TimeUnit.MILLISECONDS);\n    \n    ee.setTimeout(task);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212320-31usdvx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212320-31usdvx","updated":"20241016212320"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.5 分布式锁-redission锁的MutiLock原理"}]},{"ID":"20241016212321-w6suepq","Type":"NodeParagraph","Properties":{"id":"20241016212321-w6suepq","updated":"20241016212321"},"Children":[{"Type":"NodeText","Data":"为了提高redis的可用性，我们会搭建集群或者主从，现在以主从为例"}]},{"ID":"20241016212322-bwu06sq","Type":"NodeParagraph","Properties":{"id":"20241016212322-bwu06sq","updated":"20241016212322"},"Children":[{"Type":"NodeText","Data":"此时我们去写命令，写在主机上， 主机会将数据同步给从机，但是假设在主机还没有来得及把数据写入到从机去的时候，此时主机宕机，哨兵会发现主机宕机，并且选举一个slave变成master，而此时新的master中实际上并没有锁信息，此时锁信息就已经丢掉了。"}]},{"ID":"20241016212323-3c0qspr","Type":"NodeParagraph","Properties":{"id":"20241016212323-3c0qspr","updated":"20241016212323"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653553998403","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653553998403-20241016213637-bv80uof.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212324-5xlv4pg","Type":"NodeParagraph","Properties":{"id":"20241016212324-5xlv4pg","updated":"20241016212324"},"Children":[{"Type":"NodeText","Data":"为了解决这个问题，redission提出来了MutiLock锁，使用这把锁咱们就不使用主从了，每个节点的地位都是一样的， 这把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获得锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性。"}]},{"ID":"20241016212325-9qnnjcn","Type":"NodeParagraph","Properties":{"id":"20241016212325-9qnnjcn","updated":"20241016212325"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653554055048","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653554055048-20241016213637-jjrpdpb.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212326-jawxmcf","Type":"NodeParagraph","Properties":{"id":"20241016212326-jawxmcf","updated":"20241016212326"},"Children":[{"Type":"NodeText","Data":"那么MutiLock 加锁原理是什么呢？笔者画了一幅图来说明"}]},{"ID":"20241016212327-poj634q","Type":"NodeParagraph","Properties":{"id":"20241016212327-poj634q","updated":"20241016212327"},"Children":[{"Type":"NodeText","Data":"当我们去设置了多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁，但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms，假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功，如果在4500ms有线程加锁失败，则会再次去进行重试."}]},{"ID":"20241016212328-jav61p1","Type":"NodeParagraph","Properties":{"id":"20241016212328-jav61p1","updated":"20241016212328"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653553093967","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653553093967-20241016213637-4551k4b.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212329-k5l65fk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212329-k5l65fk","updated":"20241016212329"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"6、秒杀优化"}]},{"ID":"20241016212330-uahf0ru","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212330-uahf0ru","updated":"20241016212330"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6.1 秒杀优化-异步秒杀思路"}]},{"ID":"20241016212331-gkb14db","Type":"NodeParagraph","Properties":{"id":"20241016212331-gkb14db","updated":"20241016212331"},"Children":[{"Type":"NodeText","Data":"我们来回顾一下下单流程"}]},{"ID":"20241016212332-zgyk1ee","Type":"NodeParagraph","Properties":{"id":"20241016212332-zgyk1ee","updated":"20241016212332"},"Children":[{"Type":"NodeText","Data":"当用户发起请求，此时会请求nginx，nginx会访问到tomcat，而tomcat中的程序，会进行串行操作，分成如下几个步骤"}]},{"ID":"20241016212333-sh1rxlz","Type":"NodeParagraph","Properties":{"id":"20241016212333-sh1rxlz","updated":"20241016212333"},"Children":[{"Type":"NodeText","Data":"1、查询优惠卷"}]},{"ID":"20241016212334-8tbznqb","Type":"NodeParagraph","Properties":{"id":"20241016212334-8tbznqb","updated":"20241016212334"},"Children":[{"Type":"NodeText","Data":"2、判断秒杀库存是否足够"}]},{"ID":"20241016212335-dfuxqnx","Type":"NodeParagraph","Properties":{"id":"20241016212335-dfuxqnx","updated":"20241016212335"},"Children":[{"Type":"NodeText","Data":"3、查询订单"}]},{"ID":"20241016212336-o3odol3","Type":"NodeParagraph","Properties":{"id":"20241016212336-o3odol3","updated":"20241016212336"},"Children":[{"Type":"NodeText","Data":"4、校验是否是一人一单"}]},{"ID":"20241016212337-ldhxyr9","Type":"NodeParagraph","Properties":{"id":"20241016212337-ldhxyr9","updated":"20241016212337"},"Children":[{"Type":"NodeText","Data":"5、扣减库存"}]},{"ID":"20241016212338-gyio6zm","Type":"NodeParagraph","Properties":{"id":"20241016212338-gyio6zm","updated":"20241016212338"},"Children":[{"Type":"NodeText","Data":"6、创建订单"}]},{"ID":"20241016212339-pbbctad","Type":"NodeParagraph","Properties":{"id":"20241016212339-pbbctad","updated":"20241016212339"},"Children":[{"Type":"NodeText","Data":"在这六步操作中，又有很多操作是要去操作数据库的，而且还是一个线程串行执行， 这样就会导致我们的程序执行的很慢，所以我们需要异步程序执行，那么如何加速呢？"}]},{"ID":"20241016212340-7y5d9q0","Type":"NodeParagraph","Properties":{"id":"20241016212340-7y5d9q0","updated":"20241016212340"},"Children":[{"Type":"NodeText","Data":"在这里笔者想给大家分享一下课程内没有的思路，看看有没有小伙伴这么想，比如，我们可以不可以使用异步编排来做，或者说我开启N多线程，N多个线程，一个线程执行查询优惠卷，一个执行判断扣减库存，一个去创建订单等等，然后再统一做返回，这种做法和课程中有哪种好呢？答案是课程中的好，因为如果你采用我刚说的方式，如果访问的人很多，那么线程池中的线程可能一下子就被消耗完了，而且你使用上述方案，最大的特点在于，你觉得时效性会非常重要，但是你想想是吗？并不是，比如我只要确定他能做这件事，然后我后边慢慢做就可以了，我并不需要他一口气做完这件事，所以我们应当采用的是课程中，类似消息队列的方式来完成我们的需求，而不是使用线程池或者是异步编排的方式来完成这个需求"}]},{"ID":"20241016212341-e052l2q","Type":"NodeParagraph","Properties":{"id":"20241016212341-e052l2q","updated":"20241016212341"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653560986599","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653560986599-20241016213637-zyksich.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212342-pf68a74","Type":"NodeParagraph","Properties":{"id":"20241016212342-pf68a74","updated":"20241016212342"},"Children":[{"Type":"NodeText","Data":"优化方案：我们将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息，这样程序不就超级快了吗？而且也不用担心线程池消耗殆尽的问题，因为这里我们的程序中并没有手动使用任何线程池，当然这里边有两个难点"}]},{"ID":"20241016212343-nfw7an1","Type":"NodeParagraph","Properties":{"id":"20241016212343-nfw7an1","updated":"20241016212343"},"Children":[{"Type":"NodeText","Data":"第一个难点是我们怎么在redis中去快速校验一人一单，还有库存判断"}]},{"ID":"20241016212344-dihvton","Type":"NodeParagraph","Properties":{"id":"20241016212344-dihvton","updated":"20241016212344"},"Children":[{"Type":"NodeText","Data":"第二个难点是由于我们校验和tomct下单是两个线程，那么我们如何知道到底哪个单他最后是否成功，或者是下单完成，为了完成这件事我们在redis操作完之后，我们会将一些信息返回给前端，同时也会把这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询我们tomcat中的下单逻辑是否完成了。"}]},{"ID":"20241016212345-pyoxrag","Type":"NodeParagraph","Properties":{"id":"20241016212345-pyoxrag","updated":"20241016212345"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653561657295","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653561657295-20241016213637-msz204w.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212346-cyhsaix","Type":"NodeParagraph","Properties":{"id":"20241016212346-cyhsaix","updated":"20241016212346"},"Children":[{"Type":"NodeText","Data":"我们现在来看看整体思路：当用户下单之后，判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠卷存入到redis中，并且返回0，整个过程需要保证是原子性的，我们可以使用lua来操作"}]},{"ID":"20241016212347-nxk1q2v","Type":"NodeParagraph","Properties":{"id":"20241016212347-nxk1q2v","updated":"20241016212347"},"Children":[{"Type":"NodeText","Data":"当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。"}]},{"ID":"20241016212348-58ymony","Type":"NodeParagraph","Properties":{"id":"20241016212348-58ymony","updated":"20241016212348"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653562234886","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653562234886-20241016213637-10x9bva.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212349-9vclu33","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212349-9vclu33","updated":"20241016212349"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6.2 秒杀优化-Redis完成秒杀资格判断"}]},{"ID":"20241016212350-6jsmfxj","Type":"NodeParagraph","Properties":{"id":"20241016212350-6jsmfxj","updated":"20241016212350"},"Children":[{"Type":"NodeText","Data":"需求："}]},{"ID":"20241016212351-iu6sown","Type":"NodeList","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212351-iu6sown","updated":"20241016212351"},"Children":[{"ID":"20241016212352-x6iaq2c","Type":"NodeListItem","Data":"*","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212352-x6iaq2c","updated":"20241016212352"},"Children":[{"ID":"20241016212353-womafy8","Type":"NodeParagraph","Properties":{"id":"20241016212353-womafy8","updated":"20241016212353"},"Children":[{"Type":"NodeText","Data":"新增秒杀优惠券的同时，将优惠券信息保存到Redis中"}]}]},{"ID":"20241016212354-kjh49ki","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212354-kjh49ki","updated":"20241016212354"},"Children":[{"ID":"20241016212355-8miwkfc","Type":"NodeParagraph","Properties":{"id":"20241016212355-8miwkfc","updated":"20241016212355"},"Children":[{"Type":"NodeText","Data":"基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功"}]}]},{"ID":"20241016212356-41sqgvh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212356-41sqgvh","updated":"20241016212356"},"Children":[{"ID":"20241016212357-t4e9di1","Type":"NodeParagraph","Properties":{"id":"20241016212357-t4e9di1","updated":"20241016212357"},"Children":[{"Type":"NodeText","Data":"如果抢购成功，将优惠券id和用户id封装后存入阻塞队列"}]}]},{"ID":"20241016212358-yrdtfhc","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212358-yrdtfhc","updated":"20241016212358"},"Children":[{"ID":"20241016212359-6ym2b18","Type":"NodeParagraph","Properties":{"id":"20241016212359-6ym2b18","updated":"20241016212359"},"Children":[{"Type":"NodeText","Data":"开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能"}]},{"ID":"20241016212360-k13iqon","Type":"NodeParagraph","Properties":{"id":"20241016212360-k13iqon","updated":"20241016212360"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1656080546603","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1656080546603-20241016213637-l745lnv.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]}]}]},{"ID":"20241016212361-3jgomn4","Type":"NodeParagraph","Properties":{"id":"20241016212361-3jgomn4","updated":"20241016212361"},"Children":[{"Type":"NodeText","Data":"VoucherServiceImpl"}]},{"ID":"20241016212362-11yqp9s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212362-11yqp9s","updated":"20241016212362"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\n@Transactional\npublic void addSeckillVoucher(Voucher voucher) {\n    // 保存优惠券\n    save(voucher);\n    // 保存秒杀信息\n    SeckillVoucher seckillVoucher = new SeckillVoucher();\n    seckillVoucher.setVoucherId(voucher.getId());\n    seckillVoucher.setStock(voucher.getStock());\n    seckillVoucher.setBeginTime(voucher.getBeginTime());\n    seckillVoucher.setEndTime(voucher.getEndTime());\n    seckillVoucherService.save(seckillVoucher);\n    // 保存秒杀库存到Redis中\n    //SECKILL_STOCK_KEY 这个变量定义在RedisConstans中\n    //private static final String SECKILL_STOCK_KEY =\"seckill:stock:\"\n    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212363-0h0cxct","Type":"NodeParagraph","Properties":{"id":"20241016212363-0h0cxct","updated":"20241016212363"},"Children":[{"Type":"NodeText","Data":"完整lua表达式"}]},{"ID":"20241016212364-j3uyu0s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"bHVh","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212364-j3uyu0s","updated":"20241016212364"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"bHVh","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"-- 1.参数列表\n-- 1.1.优惠券id\nlocal voucherId = ARGV[1]\n-- 1.2.用户id\nlocal userId = ARGV[2]\n-- 1.3.订单id\nlocal orderId = ARGV[3]\n\n-- 2.数据key\n-- 2.1.库存key\nlocal stockKey = 'seckill:stock:' .. voucherId\n-- 2.2.订单key\nlocal orderKey = 'seckill:order:' .. voucherId\n\n-- 3.脚本业务\n-- 3.1.判断库存是否充足 get stockKey\nif(tonumber(redis.call('get', stockKey)) \u003c= 0) then\n    -- 3.2.库存不足，返回1\n    return 1\nend\n-- 3.2.判断用户是否下单 SISMEMBER orderKey userId\nif(redis.call('sismember', orderKey, userId) == 1) then\n    -- 3.3.存在，说明是重复下单，返回2\n    return 2\nend\n-- 3.4.扣库存 incrby stockKey -1\nredis.call('incrby', stockKey, -1)\n-- 3.5.下单（保存用户）sadd orderKey userId\nredis.call('sadd', orderKey, userId)\n-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...\nredis.call('xadd', 'stream.orders', '*', 'userId', userId, 'voucherId', voucherId, 'id', orderId)\nreturn 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212365-wsb9ix7","Type":"NodeParagraph","Properties":{"id":"20241016212365-wsb9ix7","updated":"20241016212365"},"Children":[{"Type":"NodeText","Data":"当以上lua表达式执行完毕后，剩下的就是根据步骤3,4来执行我们接下来的任务了"}]},{"ID":"20241016212366-d8g41o5","Type":"NodeParagraph","Properties":{"id":"20241016212366-d8g41o5","updated":"20241016212366"},"Children":[{"Type":"NodeText","Data":"VoucherOrderServiceImpl"}]},{"ID":"20241016212367-6qom71r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212367-6qom71r","updated":"20241016212367"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result seckillVoucher(Long voucherId) {\n    //获取用户\n    Long userId = UserHolder.getUser().getId();\n    long orderId = redisIdWorker.nextId(\"order\");\n    // 1.执行lua脚本\n    Long result = stringRedisTemplate.execute(\n            SECKILL_SCRIPT,\n            Collections.emptyList(),\n            voucherId.toString(), userId.toString(), String.valueOf(orderId)\n    );\n    int r = result.intValue();\n    // 2.判断结果是否为0\n    if (r != 0) {\n        // 2.1.不为0 ，代表没有购买资格\n        return Result.fail(r == 1 ? \"库存不足\" : \"不能重复下单\");\n    }\n    //TODO 保存阻塞队列\n    // 3.返回订单id\n    return Result.ok(orderId);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212368-bub8a71","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212368-bub8a71","updated":"20241016212368"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6.3 秒杀优化-基于阻塞队列实现秒杀优化"}]},{"ID":"20241016212369-psb303t","Type":"NodeParagraph","Properties":{"id":"20241016212369-psb303t","updated":"20241016212369"},"Children":[{"Type":"NodeText","Data":"VoucherOrderServiceImpl"}]},{"ID":"20241016212370-ug5nren","Type":"NodeParagraph","Properties":{"id":"20241016212370-ug5nren","updated":"20241016212370"},"Children":[{"Type":"NodeText","Data":"修改下单动作，现在我们去下单时，是通过lua表达式去原子执行判断逻辑，如果判断我出来不为0 ，则要么是库存不足，要么是重复下单，返回错误信息，如果是0，则把下单的逻辑保存到队列中去，然后异步执行"}]},{"ID":"20241016212371-ky3kjfo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212371-ky3kjfo","updated":"20241016212371"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//异步处理线程池\nprivate static final ExecutorService SECKILL_ORDER_EXECUTOR = Executors.newSingleThreadExecutor();\n\n//在类初始化之后执行，因为当这个类初始化好了之后，随时都是有可能要执行的\n@PostConstruct // 这个注解：在当前类初始化完毕后就开始执行\nprivate void init() {\n   SECKILL_ORDER_EXECUTOR.submit(new VoucherOrderHandler());\n}\n// 用于线程池处理的任务\n// 当初始化完毕后，就会去从对列中去拿信息\n private class VoucherOrderHandler implements Runnable{\n\n        @Override\n        public void run() {\n            while (true){\n                try {\n                    // 1.获取队列中的订单信息\n                    VoucherOrder voucherOrder = orderTasks.take();\n                    // 2.创建订单\n                    handleVoucherOrder(voucherOrder);\n                } catch (Exception e) {\n                    log.error(\"处理订单异常\", e);\n                }\n          \t }\n        }\n     \n       private void handleVoucherOrder(VoucherOrder voucherOrder) {\n            // === PS：这里不能从ThreadLocal（UserHolder类）中获取用户id了，因为这是一个新线程，不是主线程了，ThreadLocal是给主线程用的 ===\n            //1.获取用户\n            Long userId = voucherOrder.getUserId();\n            // 2.创建锁对象\n            RLock redisLock = redissonClient.getLock(\"lock:order:\" + userId);\n            // 3.尝试获取锁\n            boolean isLock = redisLock.lock();\n            // 4.判断是否获得锁成功\n            if (!isLock) { // 理论上不会进来\n                // 获取锁失败，直接返回失败或者重试\n                log.error(\"不允许重复下单！\");\n                return;\n            }\n            try {\n\t\t\t\t//注意：由于是spring的事务是放在threadLocal中，此时的是多线程，事务会失效\n                proxy.createVoucherOrder(voucherOrder);\n            } finally {\n                // 释放锁\n                redisLock.unlock();\n            }\n    }\n     //a\n\tprivate BlockingQueue\u003cVoucherOrder\u003e orderTasks =new  ArrayBlockingQueue\u003c\u003e(1024 * 1024);\n\n    @Override\n    public Result seckillVoucher(Long voucherId) {\n        Long userId = UserHolder.getUser().getId();\n        long orderId = redisIdWorker.nextId(\"order\");\n        // 1.执行lua脚本\n        Long result = stringRedisTemplate.execute(\n                SECKILL_SCRIPT,\n                Collections.emptyList(),\n                voucherId.toString(), userId.toString(), String.valueOf(orderId)\n        );\n        int r = result.intValue();\n        // 2.判断结果是否为0\n        if (r != 0) {\n            // 2.1.不为0 ，代表没有购买资格\n            return Result.fail(r == 1 ? \"库存不足\" : \"不能重复下单\");\n        }\n        VoucherOrder voucherOrder = new VoucherOrder();\n        // 2.3.订单id\n        long orderId = redisIdWorker.nextId(\"order\");\n        voucherOrder.setId(orderId);\n        // 2.4.用户id\n        voucherOrder.setUserId(userId);\n        // 2.5.代金券id\n        voucherOrder.setVoucherId(voucherId);\n        // 2.6.放入阻塞队列\n        orderTasks.add(voucherOrder);\n        //3.获取代理对象\n         proxy = (IVoucherOrderService)AopContext.currentProxy();\n        //4.返回订单id\n        return Result.ok(orderId);\n    }\n     \n    @Transactional\n    public  void createVoucherOrder(VoucherOrder voucherOrder) {\n        Long userId = voucherOrder.getUserId();\n        // 5.1.查询订单\n        int count = query().eq(\"user_id\", userId).eq(\"voucher_id\", voucherOrder.getVoucherId()).count();\n        // 5.2.判断是否存在\n        if (count \u003e 0) {\n            // 用户已经购买过了\n           log.error(\"用户已经购买过了\");\n           return ;\n        }\n\n        // 6.扣减库存\n        boolean success = seckillVoucherService.update()\n                .setSql(\"stock = stock - 1\") // set stock = stock - 1\n                .eq(\"voucher_id\", voucherOrder.getVoucherId()).gt(\"stock\", 0) // where id = ? and stock \u003e 0\n                .update();\n        if (!success) {\n            // 扣减失败\n            log.error(\"库存不足\");\n            return ;\n        }\n        save(voucherOrder);\n \n    }\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212372-rxlyix8","Type":"NodeParagraph","Properties":{"id":"20241016212372-rxlyix8","updated":"20241016212372"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"小总结："}]},{"ID":"20241016212373-okilbw8","Type":"NodeParagraph","Properties":{"id":"20241016212373-okilbw8","updated":"20241016212373"},"Children":[{"Type":"NodeText","Data":"秒杀业务的优化思路是什么？"}]},{"ID":"20241016212374-gilon5r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212374-gilon5r","updated":"20241016212374"},"Children":[{"ID":"20241016212375-wnh8dst","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212375-wnh8dst","updated":"20241016212375"},"Children":[{"ID":"20241016212376-1camgpe","Type":"NodeParagraph","Properties":{"id":"20241016212376-1camgpe","updated":"20241016212376"},"Children":[{"Type":"NodeText","Data":"先利用Redis完成库存余量、一人一单判断，完成抢单业务"}]}]},{"ID":"20241016212377-dz0r1tx","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212377-dz0r1tx","updated":"20241016212377"},"Children":[{"ID":"20241016212378-hrnjiqn","Type":"NodeParagraph","Properties":{"id":"20241016212378-hrnjiqn","updated":"20241016212378"},"Children":[{"Type":"NodeText","Data":"再将下单业务放入阻塞队列，利用独立线程异步下单"}]}]},{"ID":"20241016212379-3gfp2gj","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212379-3gfp2gj","updated":"20241016212379"},"Children":[{"ID":"20241016212380-fly3w3a","Type":"NodeParagraph","Properties":{"id":"20241016212380-fly3w3a","updated":"20241016212380"},"Children":[{"Type":"NodeText","Data":"基于阻塞队列的异步秒杀存在哪些问题？💡"}]},{"ID":"20241016212381-r05jjcz","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212381-r05jjcz","updated":"20241016212381"},"Children":[{"ID":"20241016212382-h7tfed8","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212382-h7tfed8","updated":"20241016212382"},"Children":[{"ID":"20241016212383-bc3l1gy","Type":"NodeParagraph","Properties":{"id":"20241016212383-bc3l1gy","updated":"20241016212383"},"Children":[{"Type":"NodeText","Data":"内存限制问题（队列塞满了，用的是jvm的内存）"}]}]},{"ID":"20241016212384-q9tgng9","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212384-q9tgng9","updated":"20241016212384"},"Children":[{"ID":"20241016212385-zgkk2q4","Type":"NodeParagraph","Properties":{"id":"20241016212385-zgkk2q4","updated":"20241016212385"},"Children":[{"Type":"NodeText","Data":"数据安全问题（队列在jvm内存中，如果服务宕机了，队列就无了，没有持久化机制，而你已经告诉用户下单成功了；另外如果你从队列中正好读出一个订单信息，此时你的服务刚好宕机了，而你读出的消息就被队列删除无了，那么这个订单信息就无法恢复了）"}]}]}]}]}]},{"ID":"20241016212386-bvemo2q","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016212386-bvemo2q","updated":"20241016212386"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"秒杀业务的优化思路💡"}]},{"ID":"20241016212387-2c8hrsm","Type":"NodeParagraph","Properties":{"id":"20241016212387-2c8hrsm","updated":"20241016212387"},"Children":[{"Type":"NodeText","Data":"💡重点思路："}]},{"ID":"20241016212388-sdh3dnr","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212388-sdh3dnr","updated":"20241016212388"},"Children":[{"ID":"20241016212389-ky8ge0i","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212389-ky8ge0i","updated":"20241016212389"},"Children":[{"ID":"20241016212390-ntc106j","Type":"NodeParagraph","Properties":{"id":"20241016212390-ntc106j","updated":"20241016212390"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"将同步处理转为异步处理"}]},{"ID":"20241016212391-tw56ddk","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212391-tw56ddk","updated":"20241016212391"},"Children":[{"ID":"20241016212392-unii276","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212392-unii276","updated":"20241016212392"},"Children":[{"ID":"20241016212393-h0417y8","Type":"NodeParagraph","Properties":{"id":"20241016212393-h0417y8","updated":"20241016212393"},"Children":[{"Type":"NodeText","Data":"同步处理：用一个线程先判断库存余量、一人一单，再扣减数据库"}]}]},{"ID":"20241016212394-moiw3lv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212394-moiw3lv","updated":"20241016212394"},"Children":[{"ID":"20241016212395-g3lykwl","Type":"NodeParagraph","Properties":{"id":"20241016212395-g3lykwl","updated":"20241016212395"},"Children":[{"Type":"NodeText","Data":"异步处理：较快的判断→阻塞队列→较慢的持久化处理"}]},{"ID":"20241016212396-2rsaqlv","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212396-2rsaqlv","updated":"20241016212396"},"Children":[{"ID":"20241016212397-vezz7vs","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212397-vezz7vs","updated":"20241016212397"},"Children":[{"ID":"20241016212398-zqgub2v","Type":"NodeParagraph","Properties":{"id":"20241016212398-zqgub2v","updated":"20241016212398"},"Children":[{"Type":"NodeText","Data":"用主线程完成判断库存余量、一人一单，且在Redis中进行，判断成功后创建订单对象，放到阻塞队列中去"}]},{"ID":"20241016212399-r7pr7ib","Type":"NodeParagraph","Properties":{"id":"20241016212399-r7pr7ib","updated":"20241016212399"},"Children":[{"Type":"NodeText","Data":"看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"seckillVoucher"},{"Type":"NodeText","Data":"函数的流程"}]}]},{"ID":"20241016212400-pk8wct9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016212400-pk8wct9","updated":"20241016212400"},"Children":[{"ID":"20241016212401-isg6gcq","Type":"NodeParagraph","Properties":{"id":"20241016212401-isg6gcq","updated":"20241016212401"},"Children":[{"Type":"NodeText","Data":"然后线程池中的线程在阻塞队列等着，一旦有订单在队列中了，就将订单持久化到数据库"}]},{"ID":"20241016212402-lv20p9k","Type":"NodeParagraph","Properties":{"id":"20241016212402-lv20p9k","updated":"20241016212402"},"Children":[{"Type":"NodeText","Data":"看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"run"},{"Type":"NodeText","Data":"方法和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"handleVoucherOrder"},{"Type":"NodeText","Data":"方法"}]}]}]}]}]}]}]},{"ID":"20241016212403-wi2nmta","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212403-wi2nmta","updated":"20241016212403"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"7、Redis消息队列"}]},{"ID":"20241016212404-1a5eehu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212404-1a5eehu","updated":"20241016212404"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.1 Redis消息队列-认识消息队列"}]},{"ID":"20241016212405-933xoih","Type":"NodeParagraph","Properties":{"id":"20241016212405-933xoih","updated":"20241016212405"},"Children":[{"Type":"NodeText","Data":"什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色："}]},{"ID":"20241016212406-r0cuaui","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212406-r0cuaui","updated":"20241016212406"},"Children":[{"ID":"20241016212407-wdeadad","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212407-wdeadad","updated":"20241016212407"},"Children":[{"ID":"20241016212408-8svjxlf","Type":"NodeParagraph","Properties":{"id":"20241016212408-8svjxlf","updated":"20241016212408"},"Children":[{"Type":"NodeText","Data":"消息队列：存储和管理消息，也被称为消息代理（Message Broker）"}]}]},{"ID":"20241016212409-en2m7o5","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212409-en2m7o5","updated":"20241016212409"},"Children":[{"ID":"20241016212410-qfmfhac","Type":"NodeParagraph","Properties":{"id":"20241016212410-qfmfhac","updated":"20241016212410"},"Children":[{"Type":"NodeText","Data":"生产者：发送消息到消息队列"}]}]},{"ID":"20241016212411-2ywtoc4","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212411-2ywtoc4","updated":"20241016212411"},"Children":[{"ID":"20241016212412-hys3omo","Type":"NodeParagraph","Properties":{"id":"20241016212412-hys3omo","updated":"20241016212412"},"Children":[{"Type":"NodeText","Data":"消费者：从消息队列获取消息并处理消息"}]}]}]},{"ID":"20241016212413-jle6tk5","Type":"NodeParagraph","Properties":{"id":"20241016212413-jle6tk5","updated":"20241016212413"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653574849336","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653574849336-20241016213637-33f2d23.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212414-lkria29","Type":"NodeParagraph","Properties":{"id":"20241016212414-lkria29","updated":"20241016212414"},"Children":[{"Type":"NodeText","Data":"使用队列的好处在于 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"解耦："},{"Type":"NodeText","Data":"所谓解耦，举一个生活中的例子就是：快递员(生产者)把快递放到快递柜里边(Message Queue)去，我们(消费者)从快递柜里边去拿东西，这就是一个异步，如果耦合，那么这个快递员相当于直接把快递交给你，这事固然好，但是万一你不在家，那么快递员就会一直等你，这就浪费了快递员的时间，所以这种思想在我们日常开发中，是非常有必要的。"}]},{"ID":"20241016212415-n81i70q","Type":"NodeParagraph","Properties":{"id":"20241016212415-n81i70q","updated":"20241016212415"},"Children":[{"Type":"NodeText","Data":"这种场景在我们秒杀中就变成了：我们下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。"}]},{"ID":"20241016212416-5bbwsud","Type":"NodeParagraph","Properties":{"id":"20241016212416-5bbwsud","updated":"20241016212416"},"Children":[{"Type":"NodeText","Data":"这里我们可以使用一些现成的mq，比如kafka，rabbitmq等等，但是呢，如果没有安装mq，我们也可以直接使用redis提供的mq方案，降低我们的部署和学习成本。"}]},{"ID":"20241016212417-4xt0jxe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212417-4xt0jxe","updated":"20241016212417"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.2 Redis消息队列-基于List实现消息队列"}]},{"ID":"20241016212418-l7p9j5p","Type":"NodeParagraph","Properties":{"id":"20241016212418-l7p9j5p","updated":"20241016212418"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"基于List结构模拟消息队列"}]},{"ID":"20241016212419-kvq71my","Type":"NodeParagraph","Properties":{"id":"20241016212419-kvq71my","updated":"20241016212419"},"Children":[{"Type":"NodeText","Data":"消息队列（Message Queue），字面意思就是存放消息的队列。而Redis的list数据结构是一个双向链表，很容易模拟出队列效果。"}]},{"ID":"20241016212420-jhsu8qi","Type":"NodeParagraph","Properties":{"id":"20241016212420-jhsu8qi","updated":"20241016212420"},"Children":[{"Type":"NodeText","Data":"队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果。"}]},{"ID":"20241016212421-yd6bggt","Type":"NodeParagraph","Properties":{"id":"20241016212421-yd6bggt","updated":"20241016212421"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653575176451","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653575176451-20241016213637-vj3h1wd.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212422-cf0y5a8","Type":"NodeParagraph","Properties":{"id":"20241016212422-cf0y5a8","updated":"20241016212422"},"Children":[{"Type":"NodeText","Data":"基于List的消息队列有哪些优缺点？"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"优点："}]},{"ID":"20241016212423-ltorxrd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212423-ltorxrd","updated":"20241016212423"},"Children":[{"ID":"20241016212424-n4921dt","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212424-n4921dt","updated":"20241016212424"},"Children":[{"ID":"20241016212425-0aqs1x7","Type":"NodeParagraph","Properties":{"id":"20241016212425-0aqs1x7","updated":"20241016212425"},"Children":[{"Type":"NodeText","Data":"利用Redis存储，不受限于JVM内存上限"}]}]},{"ID":"20241016212426-jfrxa5r","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212426-jfrxa5r","updated":"20241016212426"},"Children":[{"ID":"20241016212427-3xw03si","Type":"NodeParagraph","Properties":{"id":"20241016212427-3xw03si","updated":"20241016212427"},"Children":[{"Type":"NodeText","Data":"基于Redis的持久化机制，数据安全性有保证"}]}]},{"ID":"20241016212428-fr08bv4","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212428-fr08bv4","updated":"20241016212428"},"Children":[{"ID":"20241016212429-j7szak5","Type":"NodeParagraph","Properties":{"id":"20241016212429-j7szak5","updated":"20241016212429"},"Children":[{"Type":"NodeText","Data":"可以满足消息有序性"}]}]}]},{"ID":"20241016212430-wulzlht","Type":"NodeParagraph","Properties":{"id":"20241016212430-wulzlht","updated":"20241016212430"},"Children":[{"Type":"NodeText","Data":"缺点："}]},{"ID":"20241016212431-i81cfmu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212431-i81cfmu","updated":"20241016212431"},"Children":[{"ID":"20241016212432-c3l2tgc","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212432-c3l2tgc","updated":"20241016212432"},"Children":[{"ID":"20241016212433-tmyl7fj","Type":"NodeParagraph","Properties":{"id":"20241016212433-tmyl7fj","updated":"20241016212433"},"Children":[{"Type":"NodeText","Data":"无法避免消息丢失"}]}]},{"ID":"20241016212434-qbh7m8j","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212434-qbh7m8j","updated":"20241016212434"},"Children":[{"ID":"20241016212435-64m3vlw","Type":"NodeParagraph","Properties":{"id":"20241016212435-64m3vlw","updated":"20241016212435"},"Children":[{"Type":"NodeText","Data":"只支持"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"单消费者"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"有一个消费者消费了消息之后，其他消费者就看不到这条消息了"}]}]}]},{"ID":"20241016212436-yqz90si","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212436-yqz90si","updated":"20241016212436"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.3 Redis消息队列-基于PubSub的消息队列"}]},{"ID":"20241016212437-hjlx1rw","Type":"NodeParagraph","Properties":{"id":"20241016212437-hjlx1rw","updated":"20241016212437"},"Children":[{"Type":"NodeText","Data":"PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。"}]},{"ID":"20241016212438-4q4d068","Type":"NodeParagraph","Properties":{"id":"20241016212438-4q4d068","updated":"20241016212438"},"Children":[{"Type":"NodeText","Data":"SUBSCRIBE channel [channel] ：订阅一个或多个频道"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"PUBLISH channel msg ：向一个频道发送消息"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道"}]},{"ID":"20241016212439-el54vf3","Type":"NodeParagraph","Properties":{"id":"20241016212439-el54vf3","updated":"20241016212439"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653575506373","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653575506373-20241016213637-eis92ba.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212440-vt1bfmz","Type":"NodeParagraph","Properties":{"id":"20241016212440-vt1bfmz","updated":"20241016212440"},"Children":[{"Type":"NodeText","Data":"基于PubSub的消息队列有哪些优缺点？"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"优点："}]},{"ID":"20241016212441-8piqynw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212441-8piqynw","updated":"20241016212441"},"Children":[{"ID":"20241016212442-k5c95n1","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212442-k5c95n1","updated":"20241016212442"},"Children":[{"ID":"20241016212443-z6cflh4","Type":"NodeParagraph","Properties":{"id":"20241016212443-z6cflh4","updated":"20241016212443"},"Children":[{"Type":"NodeText","Data":"采用发布订阅模型，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"支持多生产、多消费"}]}]}]},{"ID":"20241016212444-ujn5gnz","Type":"NodeParagraph","Properties":{"id":"20241016212444-ujn5gnz","updated":"20241016212444"},"Children":[{"Type":"NodeText","Data":"缺点："}]},{"ID":"20241016212445-b0x2d77","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212445-b0x2d77","updated":"20241016212445"},"Children":[{"ID":"20241016212446-olw1b0l","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212446-olw1b0l","updated":"20241016212446"},"Children":[{"ID":"20241016212447-hgcebf5","Type":"NodeParagraph","Properties":{"id":"20241016212447-hgcebf5","updated":"20241016212447"},"Children":[{"Type":"NodeText","Data":"不支持数据持久化"}]}]},{"ID":"20241016212448-01uzhgx","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212448-01uzhgx","updated":"20241016212448"},"Children":[{"ID":"20241016212449-vb2vfhz","Type":"NodeParagraph","Properties":{"id":"20241016212449-vb2vfhz","updated":"20241016212449"},"Children":[{"Type":"NodeText","Data":"无法避免消息丢失"}]}]},{"ID":"20241016212450-t1jcn2e","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212450-t1jcn2e","updated":"20241016212450"},"Children":[{"ID":"20241016212451-23can97","Type":"NodeParagraph","Properties":{"id":"20241016212451-23can97","updated":"20241016212451"},"Children":[{"Type":"NodeText","Data":"消息堆积有上限，超出时数据丢失"}]}]}]},{"ID":"20241016212452-10mtqok","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212452-10mtqok","updated":"20241016212452"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.4 Redis消息队列-基于Stream的消息队列"}]},{"ID":"20241016212453-svzc5eq","Type":"NodeParagraph","Properties":{"id":"20241016212453-svzc5eq","updated":"20241016212453"},"Children":[{"Type":"NodeText","Data":"Stream 是 Redis 5.0 引入的一种"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"新数据类型"},{"Type":"NodeText","Data":"（支持持久化的），可以实现一个功能非常完善的消息队列。"}]},{"ID":"20241016212454-11y9pia","Type":"NodeParagraph","Properties":{"id":"20241016212454-11y9pia","updated":"20241016212454"},"Children":[{"Type":"NodeText","Data":"发送消息的命令："}]},{"ID":"20241016212455-6qcajpv","Type":"NodeParagraph","Properties":{"id":"20241016212455-6qcajpv","updated":"20241016212455"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577301737","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577301737-20241016213637-7g7f0te.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212456-57ka2hk","Type":"NodeParagraph","Properties":{"id":"20241016212456-57ka2hk","updated":"20241016212456"},"Children":[{"Type":"NodeText","Data":"例如："}]},{"ID":"20241016212457-wk6dcwe","Type":"NodeParagraph","Properties":{"id":"20241016212457-wk6dcwe","updated":"20241016212457"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577349691","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577349691-20241016213637-gc1f2t2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212458-d5gsg3m","Type":"NodeParagraph","Properties":{"id":"20241016212458-d5gsg3m","updated":"20241016212458"},"Children":[{"Type":"NodeText","Data":"读取消息的方式之一：XREAD"}]},{"ID":"20241016212459-bmgim59","Type":"NodeParagraph","Properties":{"id":"20241016212459-bmgim59","updated":"20241016212459"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577445413","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577445413-20241016213637-q2smehq.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212460-747yu3h","Type":"NodeParagraph","Properties":{"id":"20241016212460-747yu3h","updated":"20241016212460"},"Children":[{"Type":"NodeText","Data":"例如，使用XREAD读取第一个消息："}]},{"ID":"20241016212461-49dumdl","Type":"NodeParagraph","Properties":{"id":"20241016212461-49dumdl","updated":"20241016212461"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577643629","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577643629-20241016213637-6y03l2a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212462-978pgjf","Type":"NodeParagraph","Properties":{"id":"20241016212462-978pgjf","updated":"20241016212462"},"Children":[{"Type":"NodeText","Data":"XREAD阻塞方式，读取最新的消息："}]},{"ID":"20241016212463-oxwimwy","Type":"NodeParagraph","Properties":{"id":"20241016212463-oxwimwy","updated":"20241016212463"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577659166","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577659166-20241016213637-nfkkqoc.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212464-77iso4p","Type":"NodeParagraph","Properties":{"id":"20241016212464-77iso4p","updated":"20241016212464"},"Children":[{"Type":"NodeText","Data":"在业务开发中，我们可以循环的调用XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下"}]},{"ID":"20241016212465-w4ge4ex","Type":"NodeParagraph","Properties":{"id":"20241016212465-w4ge4ex","updated":"20241016212465"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577689129","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577689129-20241016213637-d9363x7.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212466-ps46txt","Type":"NodeParagraph","Properties":{"id":"20241016212466-ps46txt","updated":"20241016212466"},"Children":[{"Type":"NodeText","Data":"注意：当我们指定起始ID为$时，代表读取最新的消息，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条"},{"Type":"NodeText","Data":"，会出现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"漏读消息的问题"}]},{"ID":"20241016212467-40mibtu","Type":"NodeParagraph","Properties":{"id":"20241016212467-40mibtu","updated":"20241016212467"},"Children":[{"Type":"NodeText","Data":"STREAM类型消息队列的XREAD命令特点："}]},{"ID":"20241016212468-vg2h08j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212468-vg2h08j","updated":"20241016212468"},"Children":[{"ID":"20241016212469-ffq3zyb","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212469-ffq3zyb","updated":"20241016212469"},"Children":[{"ID":"20241016212470-cjtikja","Type":"NodeParagraph","Properties":{"id":"20241016212470-cjtikja","updated":"20241016212470"},"Children":[{"Type":"NodeText","Data":"消息可回溯（永久保存在队列中）"}]}]},{"ID":"20241016212471-bazp96j","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212471-bazp96j","updated":"20241016212471"},"Children":[{"ID":"20241016212472-4x622hl","Type":"NodeParagraph","Properties":{"id":"20241016212472-4x622hl","updated":"20241016212472"},"Children":[{"Type":"NodeText","Data":"一个消息可以被多个消费者读取"}]}]},{"ID":"20241016212473-a3w0i0m","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212473-a3w0i0m","updated":"20241016212473"},"Children":[{"ID":"20241016212474-4rkloj0","Type":"NodeParagraph","Properties":{"id":"20241016212474-4rkloj0","updated":"20241016212474"},"Children":[{"Type":"NodeText","Data":"可以阻塞读取"}]}]},{"ID":"20241016212475-50jni27","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212475-50jni27","updated":"20241016212475"},"Children":[{"ID":"20241016212476-wp63a4f","Type":"NodeParagraph","Properties":{"id":"20241016212476-wp63a4f","updated":"20241016212476"},"Children":[{"Type":"NodeText","Data":"有消息漏读的风险"}]}]}]},{"ID":"20241016212477-mibaa6v","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212477-mibaa6v","updated":"20241016212477"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.5 Redis消息队列-基于Stream的消息队列-消费者组"}]},{"ID":"20241016212478-pxon6fx","Type":"NodeParagraph","Properties":{"id":"20241016212478-pxon6fx","updated":"20241016212478"},"Children":[{"Type":"NodeText","Data":"消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点："}]},{"ID":"20241016212479-jht8ra5","Type":"NodeParagraph","Properties":{"id":"20241016212479-jht8ra5","updated":"20241016212479"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577801668","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577801668-20241016213637-rwrhesm.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212480-2xvfd0r","Type":"NodeParagraph","Properties":{"id":"20241016212480-2xvfd0r","updated":"20241016212480"},"Children":[{"Type":"NodeText","Data":"创建消费者组："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653577984924","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653577984924-20241016213637-vok1ofk.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"key：队列名称"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"groupName：消费者组名称"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"ID：起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"MKSTREAM：队列不存在时自动创建队列"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"其它常见命令："}]},{"ID":"20241016212481-9rmkrab","Type":"NodeParagraph","Properties":{"id":"20241016212481-9rmkrab","updated":"20241016212481"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"删除指定的消费者组"}]},{"ID":"20241016212482-bb22wpl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212482-bb22wpl","updated":"20241016212482"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"XGROUP DESTORY key groupName\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212483-sjjxh9j","Type":"NodeParagraph","Properties":{"id":"20241016212483-sjjxh9j","updated":"20241016212483"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"给指定的消费者组添加消费者"}]},{"ID":"20241016212484-h6u3cw3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212484-h6u3cw3","updated":"20241016212484"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"XGROUP CREATECONSUMER key groupname consumername\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212485-vmy9dij","Type":"NodeParagraph","Properties":{"id":"20241016212485-vmy9dij","updated":"20241016212485"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"删除消费者组中的指定消费者"}]},{"ID":"20241016212486-dypmsag","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212486-dypmsag","updated":"20241016212486"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"XGROUP DELCONSUMER key groupname consumername\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212487-e3xyx4f","Type":"NodeParagraph","Properties":{"id":"20241016212487-e3xyx4f","updated":"20241016212487"},"Children":[{"Type":"NodeText","Data":"从消费者组读取消息："}]},{"ID":"20241016212488-18oxv80","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212488-18oxv80","updated":"20241016212488"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] \n    [NOACK] STREAMS key [key ...] ID [ID ...]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212489-2szbyom","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212489-2szbyom","updated":"20241016212489"},"Children":[{"ID":"20241016212490-aw5t3gn","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212490-aw5t3gn","updated":"20241016212490"},"Children":[{"ID":"20241016212491-x56gr3u","Type":"NodeParagraph","Properties":{"id":"20241016212491-x56gr3u","updated":"20241016212491"},"Children":[{"Type":"NodeText","Data":"group：消费组名称"}]}]},{"ID":"20241016212492-2it0cch","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212492-2it0cch","updated":"20241016212492"},"Children":[{"ID":"20241016212493-k2fad4u","Type":"NodeParagraph","Properties":{"id":"20241016212493-k2fad4u","updated":"20241016212493"},"Children":[{"Type":"NodeText","Data":"consumer：消费者名称，如果消费者不存在，会自动创建一个消费者"}]}]},{"ID":"20241016212494-rqva33d","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212494-rqva33d","updated":"20241016212494"},"Children":[{"ID":"20241016212495-rg7m81y","Type":"NodeParagraph","Properties":{"id":"20241016212495-rg7m81y","updated":"20241016212495"},"Children":[{"Type":"NodeText","Data":"count：本次查询的最大数量"}]}]},{"ID":"20241016212496-pd4s8sz","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212496-pd4s8sz","updated":"20241016212496"},"Children":[{"ID":"20241016212497-qqntycb","Type":"NodeParagraph","Properties":{"id":"20241016212497-qqntycb","updated":"20241016212497"},"Children":[{"Type":"NodeText","Data":"BLOCK milliseconds：当没有消息时最长等待时间"}]}]},{"ID":"20241016212498-ymu1hce","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212498-ymu1hce","updated":"20241016212498"},"Children":[{"ID":"20241016212499-6x2a9t9","Type":"NodeParagraph","Properties":{"id":"20241016212499-6x2a9t9","updated":"20241016212499"},"Children":[{"Type":"NodeText","Data":"NOACK：无需手动ACK，获取到消息后自动确认"}]}]},{"ID":"20241016212500-86x4yov","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212500-86x4yov","updated":"20241016212500"},"Children":[{"ID":"20241016212501-qf8xwdt","Type":"NodeParagraph","Properties":{"id":"20241016212501-qf8xwdt","updated":"20241016212501"},"Children":[{"Type":"NodeText","Data":"STREAMS key：指定队列名称"}]}]},{"ID":"20241016212502-gl9o2sz","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212502-gl9o2sz","updated":"20241016212502"},"Children":[{"ID":"20241016212503-9a0c8zs","Type":"NodeParagraph","Properties":{"id":"20241016212503-9a0c8zs","updated":"20241016212503"},"Children":[{"Type":"NodeText","Data":"ID：获取消息的起始ID："}]}]}]},{"ID":"20241016212504-gap18pv","Type":"NodeParagraph","Properties":{"id":"20241016212504-gap18pv","updated":"20241016212504"},"Children":[{"Type":"NodeText","Data":"\"\u003e\"：从下一个未消费的消息开始"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始"}]},{"ID":"20241016212505-4rui87e","Type":"NodeParagraph","Properties":{"id":"20241016212505-4rui87e","updated":"20241016212505"},"Children":[{"Type":"NodeText","Data":"🌞"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"消费者监听消息的基本思路"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"："}]},{"ID":"20241016212506-kyuagji","Type":"NodeParagraph","Properties":{"id":"20241016212506-kyuagji","updated":"20241016212506"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653578211854","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653578211854-20241016213637-dsgyhzt.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212507-t1gepxm","Type":"NodeParagraph","Properties":{"id":"20241016212507-t1gepxm","updated":"20241016212507"},"Children":[{"Type":"NodeText","Data":"✅STREAM类型消息队列的XREADGROUP命令特点："}]},{"ID":"20241016212508-bgcqz1h","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212508-bgcqz1h","updated":"20241016212508"},"Children":[{"ID":"20241016212509-2ooziat","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212509-2ooziat","updated":"20241016212509"},"Children":[{"ID":"20241016212510-p7m7s0t","Type":"NodeParagraph","Properties":{"id":"20241016212510-p7m7s0t","updated":"20241016212510"},"Children":[{"Type":"NodeText","Data":"消息可回溯"}]}]},{"ID":"20241016212511-k6el1o2","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212511-k6el1o2","updated":"20241016212511"},"Children":[{"ID":"20241016212512-rl3ngp7","Type":"NodeParagraph","Properties":{"id":"20241016212512-rl3ngp7","updated":"20241016212512"},"Children":[{"Type":"NodeText","Data":"可以多消费者争抢消息，加快消费速度"}]}]},{"ID":"20241016212513-2vkx5t3","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212513-2vkx5t3","updated":"20241016212513"},"Children":[{"ID":"20241016212514-8qd5684","Type":"NodeParagraph","Properties":{"id":"20241016212514-8qd5684","updated":"20241016212514"},"Children":[{"Type":"NodeText","Data":"可以阻塞读取"}]}]},{"ID":"20241016212515-m4754ut","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212515-m4754ut","updated":"20241016212515"},"Children":[{"ID":"20241016212516-4nr1lsv","Type":"NodeParagraph","Properties":{"id":"20241016212516-4nr1lsv","updated":"20241016212516"},"Children":[{"Type":"NodeText","Data":"没有消息漏读的风险"}]}]},{"ID":"20241016212517-13gvpob","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212517-13gvpob","updated":"20241016212517"},"Children":[{"ID":"20241016212518-bkf0ccf","Type":"NodeParagraph","Properties":{"id":"20241016212518-bkf0ccf","updated":"20241016212518"},"Children":[{"Type":"NodeText","Data":"有消息确认机制，保证消息至少被消费一次"}]}]}]},{"ID":"20241016212519-e6vmg0k","Type":"NodeParagraph","Properties":{"id":"20241016212519-e6vmg0k","updated":"20241016212519"},"Children":[{"Type":"NodeText","Data":"最后我们来个小对比"}]},{"ID":"20241016212520-d2kphqd","Type":"NodeParagraph","Properties":{"id":"20241016212520-d2kphqd","updated":"20241016212520"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653578560691","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653578560691-20241016213637-tk51cql.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212521-i9e0mmw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212521-i9e0mmw","updated":"20241016212521"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.6 基于Redis的Stream结构作为消息队列，实现异步秒杀下单"}]},{"ID":"20241016212522-5t584ef","Type":"NodeParagraph","Properties":{"id":"20241016212522-5t584ef","updated":"20241016212522"},"Children":[{"Type":"NodeText","Data":"需求："}]},{"ID":"20241016212523-661l04c","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212523-661l04c","updated":"20241016212523"},"Children":[{"ID":"20241016212524-796rgsg","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212524-796rgsg","updated":"20241016212524"},"Children":[{"ID":"20241016212525-nigj6u7","Type":"NodeParagraph","Properties":{"id":"20241016212525-nigj6u7","updated":"20241016212525"},"Children":[{"Type":"NodeText","Data":"创建一个Stream类型的消息队列，名为stream.orders"}]}]},{"ID":"20241016212526-pejkqqf","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212526-pejkqqf","updated":"20241016212526"},"Children":[{"ID":"20241016212527-8pta06w","Type":"NodeParagraph","Properties":{"id":"20241016212527-8pta06w","updated":"20241016212527"},"Children":[{"Type":"NodeText","Data":"修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId"}]}]},{"ID":"20241016212528-qo450fh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212528-qo450fh","updated":"20241016212528"},"Children":[{"ID":"20241016212529-dv07v6k","Type":"NodeParagraph","Properties":{"id":"20241016212529-dv07v6k","updated":"20241016212529"},"Children":[{"Type":"NodeText","Data":"项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单\\"}]}]}]},{"ID":"20241016212530-faiolo3","Type":"NodeParagraph","Properties":{"id":"20241016212530-faiolo3","updated":"20241016212530"},"Children":[{"Type":"NodeText","Data":"修改lua表达式,新增3.6"}]},{"ID":"20241016212531-vugeitn","Type":"NodeParagraph","Properties":{"id":"20241016212531-vugeitn","updated":"20241016212531"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1656082824939","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1656082824939-20241016213637-60uwbvc.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212532-nai7aj6","Type":"NodeParagraph","Properties":{"id":"20241016212532-nai7aj6","updated":"20241016212532"},"Children":[{"Type":"NodeText","Data":"VoucherOrderServiceImpl"}]},{"ID":"20241016212533-eyd1vbk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212533-eyd1vbk","updated":"20241016212533"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"private class VoucherOrderHandler implements Runnable {\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                // 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 \u003e\n                List\u003cMapRecord\u003cString, Object, Object\u003e\u003e list = stringRedisTemplate.opsForStream().read(\n                    Consumer.from(\"g1\", \"c1\"),\n                    StreamReadOptions.empty().count(1).block(Duration.ofSeconds(2)),\n                    StreamOffset.create(\"stream.orders\", ReadOffset.lastConsumed())\n                );\n                // 2.判断订单信息是否为空\n                if (list == null || list.isEmpty()) {\n                    // 如果为null，说明没有消息，继续下一次循环\n                    continue;\n                }\n                // 解析数据\n                MapRecord\u003cString, Object, Object\u003e record = list.get(0);\n                Map\u003cObject, Object\u003e value = record.getValue();\n                VoucherOrder voucherOrder = BeanUtil.fillBeanWithMap(value, new VoucherOrder(), true);\n                // 3.创建订单\n                createVoucherOrder(voucherOrder);\n                // 4.确认消息 XACK\n                stringRedisTemplate.opsForStream().acknowledge(\"s1\", \"g1\", record.getId());\n            } catch (Exception e) {\n                log.error(\"处理订单异常\", e);\n                //处理异常消息\n                handlePendingList();\n            }\n        }\n    }\n\n    private void handlePendingList() {\n        while (true) {\n            try {\n                // 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0\n                List\u003cMapRecord\u003cString, Object, Object\u003e\u003e list = stringRedisTemplate.opsForStream().read(\n                    Consumer.from(\"g1\", \"c1\"),\n                    StreamReadOptions.empty().count(1),\n                    StreamOffset.create(\"stream.orders\", ReadOffset.from(\"0\"))\n                );\n                // 2.判断订单信息是否为空\n                if (list == null || list.isEmpty()) {\n                    // 如果为null，说明没有异常消息，结束循环\n                    break;\n                }\n                // 解析数据\n                MapRecord\u003cString, Object, Object\u003e record = list.get(0);\n                Map\u003cObject, Object\u003e value = record.getValue();\n                VoucherOrder voucherOrder = BeanUtil.fillBeanWithMap(value, new VoucherOrder(), true);\n                // 3.创建订单\n                createVoucherOrder(voucherOrder);\n                // 4.确认消息 XACK\n                stringRedisTemplate.opsForStream().acknowledge(\"s1\", \"g1\", record.getId());\n            } catch (Exception e) {\n                log.error(\"处理pendding订单异常\", e);\n                try{\n                    Thread.sleep(20);\n                }catch(Exception e){\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212534-90p7j85","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212534-90p7j85","updated":"20241016212534"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"8、达人探店"}]},{"ID":"20241016212535-p2sebd1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212535-p2sebd1","updated":"20241016212535"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"8.1、达人探店-发布探店笔记"}]},{"ID":"20241016212536-yctg4bi","Type":"NodeParagraph","Properties":{"id":"20241016212536-yctg4bi","updated":"20241016212536"},"Children":[{"Type":"NodeText","Data":"发布探店笔记"}]},{"ID":"20241016212537-no8t1l7","Type":"NodeParagraph","Properties":{"id":"20241016212537-no8t1l7","updated":"20241016212537"},"Children":[{"Type":"NodeText","Data":"探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tb_blog：探店笔记表，包含笔记中的标题、文字、图片等"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"tb_blog_comments：其他用户对探店笔记的评价"}]},{"ID":"20241016212538-oyfqmlz","Type":"NodeParagraph","Properties":{"id":"20241016212538-oyfqmlz","updated":"20241016212538"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体发布流程"}]},{"ID":"20241016212539-l6tj9ng","Type":"NodeParagraph","Properties":{"id":"20241016212539-l6tj9ng","updated":"20241016212539"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653578992639","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653578992639-20241016213637-y0is9d9.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212540-wh3ick1","Type":"NodeParagraph","Properties":{"id":"20241016212540-wh3ick1","updated":"20241016212540"},"Children":[{"Type":"NodeText","Data":"上传接口"}]},{"ID":"20241016212541-5l4x3pw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212541-5l4x3pw","updated":"20241016212541"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Slf4j\n@RestController\n@RequestMapping(\"upload\")\npublic class UploadController {\n\n    @PostMapping(\"blog\")\n    public Result uploadImage(@RequestParam(\"file\") MultipartFile image) {\n        try {\n            // 获取原始文件名称\n            String originalFilename = image.getOriginalFilename();\n            // 生成新文件名\n            String fileName = createNewFileName(originalFilename);\n            // 保存文件\n            image.transferTo(new File(SystemConstants.IMAGE_UPLOAD_DIR, fileName));\n            // 返回结果\n            log.debug(\"文件上传成功，{}\", fileName);\n            return Result.ok(fileName);\n        } catch (IOException e) {\n            throw new RuntimeException(\"文件上传失败\", e);\n        }\n    }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212542-rbq7uap","Type":"NodeParagraph","Properties":{"id":"20241016212542-rbq7uap","updated":"20241016212542"},"Children":[{"Type":"NodeText","Data":"注意：同学们在操作时，需要修改SystemConstants.IMAGE_UPLOAD_DIR 自己图片所在的地址，在实际开发中图片一般会放在nginx上或者是云存储上。"}]},{"ID":"20241016212543-7bipzsm","Type":"NodeParagraph","Properties":{"id":"20241016212543-7bipzsm","updated":"20241016212543"},"Children":[{"Type":"NodeText","Data":"BlogController"}]},{"ID":"20241016212544-1vxksrq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212544-1vxksrq","updated":"20241016212544"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@RestController\n@RequestMapping(\"/blog\")\npublic class BlogController {\n\n    @Resource\n    private IBlogService blogService;\n\n    @PostMapping\n    public Result saveBlog(@RequestBody Blog blog) {\n        //获取登录用户\n        UserDTO user = UserHolder.getUser();\n        blog.setUpdateTime(user.getId());\n        //保存探店博文\n        blogService.saveBlog(blog);\n        //返回id\n        return Result.ok(blog.getId());\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212545-qg03ska","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212545-qg03ska","updated":"20241016212545"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"8.2 达人探店-查看探店笔记"}]},{"ID":"20241016212546-0qt94aw","Type":"NodeParagraph","Properties":{"id":"20241016212546-0qt94aw","updated":"20241016212546"},"Children":[{"Type":"NodeText","Data":"实现查看发布探店笔记的接口"}]},{"ID":"20241016212547-p5dz6wh","Type":"NodeParagraph","Properties":{"id":"20241016212547-p5dz6wh","updated":"20241016212547"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653579931626","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653579931626-20241016213637-9cj2aw3.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212548-58h2tar","Type":"NodeParagraph","Properties":{"id":"20241016212548-58h2tar","updated":"20241016212548"},"Children":[{"Type":"NodeText","Data":"实现代码："}]},{"ID":"20241016212549-n29weew","Type":"NodeParagraph","Properties":{"id":"20241016212549-n29weew","updated":"20241016212549"},"Children":[{"Type":"NodeText","Data":"BlogServiceImpl"}]},{"ID":"20241016212550-6uq8plz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212550-6uq8plz","updated":"20241016212550"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result queryBlogById(Long id) {\n    // 1.查询blog\n    Blog blog = getById(id);\n    if (blog == null) {\n        return Result.fail(\"笔记不存在！\");\n    }\n    // 2.查询blog有关的用户\n    queryBlogUser(blog);\n  \n    return Result.ok(blog);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212551-f4iybc1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212551-f4iybc1","updated":"20241016212551"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"8.3 达人探店-点赞功能🚩"}]},{"ID":"20241016212552-80f1s8m","Type":"NodeParagraph","Properties":{"id":"20241016212552-80f1s8m","updated":"20241016212552"},"Children":[{"Type":"NodeText","Data":"初始代码"}]},{"ID":"20241016212553-33c9qjv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212553-33c9qjv","updated":"20241016212553"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(\"/likes/{id}\")\npublic Result queryBlogLikes(@PathVariable(\"id\") Long id) {\n    //修改点赞数量\n    blogService.update().setSql(\"liked = liked +1 \").eq(\"id\",id).update();\n    return Result.ok();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212554-fcpo5fz","Type":"NodeParagraph","Properties":{"id":"20241016212554-fcpo5fz","updated":"20241016212554"},"Children":[{"Type":"NodeText","Data":"问题分析：这种方式会导致一个用户无限点赞，明显是不合理的"}]},{"ID":"20241016212555-dvi0ux1","Type":"NodeParagraph","Properties":{"id":"20241016212555-dvi0ux1","updated":"20241016212555"},"Children":[{"Type":"NodeText","Data":"造成这个问题的原因是，我们现在的逻辑，发起请求只是给数据库+1，所以才会出现这个问题"}]},{"ID":"20241016212556-xw6jqq1","Type":"NodeParagraph","Properties":{"id":"20241016212556-xw6jqq1","updated":"20241016212556"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653581590453","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653581590453-20241016213637-0m4r9x4.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212557-b9pasef","Type":"NodeParagraph","Properties":{"id":"20241016212557-b9pasef","updated":"20241016212557"},"Children":[{"Type":"NodeText","Data":"完善点赞功能"}]},{"ID":"20241016212558-3lazpvn","Type":"NodeParagraph","Properties":{"id":"20241016212558-3lazpvn","updated":"20241016212558"},"Children":[{"Type":"NodeText","Data":"需求："}]},{"ID":"20241016212559-absd8rm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212559-absd8rm","updated":"20241016212559"},"Children":[{"ID":"20241016212560-kfn6ege","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212560-kfn6ege","updated":"20241016212560"},"Children":[{"ID":"20241016212561-fljyaal","Type":"NodeParagraph","Properties":{"id":"20241016212561-fljyaal","updated":"20241016212561"},"Children":[{"Type":"NodeText","Data":"同一个用户只能点赞一次，再次点击则取消点赞"}]}]},{"ID":"20241016212562-gkpuyrs","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212562-gkpuyrs","updated":"20241016212562"},"Children":[{"ID":"20241016212563-jj6l144","Type":"NodeParagraph","Properties":{"id":"20241016212563-jj6l144","updated":"20241016212563"},"Children":[{"Type":"NodeText","Data":"如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"判断字段Blog类的isLike属性"},{"Type":"NodeText","Data":"）"}]}]}]},{"ID":"20241016212564-ojwv7av","Type":"NodeParagraph","Properties":{"id":"20241016212564-ojwv7av","updated":"20241016212564"},"Children":[{"Type":"NodeText","Data":"实现步骤："}]},{"ID":"20241016212565-4svpt0n","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212565-4svpt0n","updated":"20241016212565"},"Children":[{"ID":"20241016212566-8nqbwzk","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212566-8nqbwzk","updated":"20241016212566"},"Children":[{"ID":"20241016212567-ra7byef","Type":"NodeParagraph","Properties":{"id":"20241016212567-ra7byef","updated":"20241016212567"},"Children":[{"Type":"NodeText","Data":"给Blog类中添加一个isLike字段，标示是否被当前用户点赞"}]}]},{"ID":"20241016212568-6my7dnm","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212568-6my7dnm","updated":"20241016212568"},"Children":[{"ID":"20241016212569-82k3dnt","Type":"NodeParagraph","Properties":{"id":"20241016212569-82k3dnt","updated":"20241016212569"},"Children":[{"Type":"NodeText","Data":"修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1"}]}]},{"ID":"20241016212570-lhotr0k","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212570-lhotr0k","updated":"20241016212570"},"Children":[{"ID":"20241016212571-831u4ki","Type":"NodeParagraph","Properties":{"id":"20241016212571-831u4ki","updated":"20241016212571"},"Children":[{"Type":"NodeText","Data":"修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段"}]}]},{"ID":"20241016212572-iyxp4ep","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212572-iyxp4ep","updated":"20241016212572"},"Children":[{"ID":"20241016212573-pd775df","Type":"NodeParagraph","Properties":{"id":"20241016212573-pd775df","updated":"20241016212573"},"Children":[{"Type":"NodeText","Data":"修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段"}]}]}]},{"ID":"20241016212574-d6f9xkf","Type":"NodeParagraph","Properties":{"id":"20241016212574-d6f9xkf","updated":"20241016212574"},"Children":[{"Type":"NodeText","Data":"为什么采用set集合："}]},{"ID":"20241016212575-d0uev3g","Type":"NodeParagraph","Properties":{"id":"20241016212575-d0uev3g","updated":"20241016212575"},"Children":[{"Type":"NodeText","Data":"因为我们的数据是不能重复的，当用户操作过之后，无论他怎么操作，都是"}]},{"ID":"20241016212576-d5c8dl9","Type":"NodeParagraph","Properties":{"id":"20241016212576-d5c8dl9","updated":"20241016212576"},"Children":[{"Type":"NodeText","Data":"具体步骤："}]},{"ID":"20241016212577-kh9c0ov","Type":"NodeParagraph","Properties":{"id":"20241016212577-kh9c0ov","updated":"20241016212577"},"Children":[{"Type":"NodeText","Data":"1、在Blog 添加一个字段"}]},{"ID":"20241016212578-ycattw5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212578-ycattw5","updated":"20241016212578"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@TableField(exist = false)\nprivate Boolean isLike;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212579-g86k0at","Type":"NodeParagraph","Properties":{"id":"20241016212579-g86k0at","updated":"20241016212579"},"Children":[{"Type":"NodeText","Data":"2、修改代码"}]},{"ID":"20241016212580-al8r3mc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212580-al8r3mc","updated":"20241016212580"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" @Override\n    public Result likeBlog(Long id){\n        // 1.获取登录用户\n        Long userId = UserHolder.getUser().getId();\n        // 2.判断当前登录用户是否已经点赞\n        String key = BLOG_LIKED_KEY + id;\n        Boolean isMember = stringRedisTemplate.opsForSet().isMember(key, userId.toString());\n        if(BooleanUtil.isFalse(isMember)){\n             //3.如果未点赞，可以点赞\n            //3.1 数据库点赞数+1\n            boolean isSuccess = update().setSql(\"liked = liked + 1\").eq(\"id\", id).update();\n            //3.2 保存用户到Redis的set集合\n            if(isSuccess){\n                stringRedisTemplate.opsForSet().add(key,userId.toString());\n            }\n        }else{\n             //4.如果已点赞，取消点赞\n            //4.1 数据库点赞数-1\n            boolean isSuccess = update().setSql(\"liked = liked - 1\").eq(\"id\", id).update();\n            //4.2 把用户从Redis的set集合移除\n            if(isSuccess){\n                stringRedisTemplate.opsForSet().remove(key,userId.toString());\n            }\n        }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212581-drk0dsc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212581-drk0dsc","updated":"20241016212581"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"8.4 达人探店-点赞排行榜"}]},{"ID":"20241016212582-l3wx37p","Type":"NodeParagraph","Properties":{"id":"20241016212582-l3wx37p","updated":"20241016212582"},"Children":[{"Type":"NodeText","Data":"在探店笔记的详情页面，应该把给该笔记点赞的人显示出来，比如最早点赞的TOP5，形成点赞排行榜："}]},{"ID":"20241016212583-buc3i76","Type":"NodeParagraph","Properties":{"id":"20241016212583-buc3i76","updated":"20241016212583"},"Children":[{"Type":"NodeText","Data":"之前的点赞是放到set集合，但是set集合是不能排序的，所以这个时候，咱们可以采用一个可以排序的set集合，就是咱们的sortedSet"}]},{"ID":"20241016212584-kf4l98n","Type":"NodeParagraph","Properties":{"id":"20241016212584-kf4l98n","updated":"20241016212584"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653805077118","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653805077118-20241016213637-qgipmua.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212585-lhhs960","Type":"NodeParagraph","Properties":{"id":"20241016212585-lhhs960","updated":"20241016212585"},"Children":[{"Type":"NodeText","Data":"我们接下来来对比一下这些集合的区别是什么"}]},{"ID":"20241016212586-hlcj5bt","Type":"NodeParagraph","Properties":{"id":"20241016212586-hlcj5bt","updated":"20241016212586"},"Children":[{"Type":"NodeText","Data":"所有点赞的人，需要是唯一的，所以我们应当使用set或者是sortedSet"}]},{"ID":"20241016212587-935hv7c","Type":"NodeParagraph","Properties":{"id":"20241016212587-935hv7c","updated":"20241016212587"},"Children":[{"Type":"NodeText","Data":"其次我们需要排序，就可以直接锁定使用sortedSet啦"}]},{"ID":"20241016212588-1qvzyk8","Type":"NodeParagraph","Properties":{"id":"20241016212588-1qvzyk8","updated":"20241016212588"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653805203758","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653805203758-20241016213637-w9m8xc3.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212589-m9j6vk0","Type":"NodeParagraph","Properties":{"id":"20241016212589-m9j6vk0","updated":"20241016212589"},"Children":[{"Type":"NodeText","Data":"修改代码"}]},{"ID":"20241016212590-6mx3uzi","Type":"NodeParagraph","Properties":{"id":"20241016212590-6mx3uzi","updated":"20241016212590"},"Children":[{"Type":"NodeText","Data":"BlogServiceImpl"}]},{"ID":"20241016212591-o7uxt34","Type":"NodeParagraph","Properties":{"id":"20241016212591-o7uxt34","updated":"20241016212591"},"Children":[{"Type":"NodeText","Data":"点赞逻辑代码"}]},{"ID":"20241016212592-nsbmbtz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212592-nsbmbtz","updated":"20241016212592"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"   @Override\n    public Result likeBlog(Long id) {\n        // 1.获取登录用户\n        Long userId = UserHolder.getUser().getId();\n        // 2.判断当前登录用户是否已经点赞\n        String key = BLOG_LIKED_KEY + id;\n        Double score = stringRedisTemplate.opsForZSet().score(key, userId.toString());\n        if (score == null) {\n            // 3.如果未点赞，可以点赞\n            // 3.1.数据库点赞数 + 1\n            boolean isSuccess = update().setSql(\"liked = liked + 1\").eq(\"id\", id).update();\n            // 3.2.保存用户到Redis的set集合  zadd key value score\n            if (isSuccess) {\n                stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());\n            }\n        } else {\n            // 4.如果已点赞，取消点赞\n            // 4.1.数据库点赞数 -1\n            boolean isSuccess = update().setSql(\"liked = liked - 1\").eq(\"id\", id).update();\n            // 4.2.把用户从Redis的set集合移除\n            if (isSuccess) {\n                stringRedisTemplate.opsForZSet().remove(key, userId.toString());\n            }\n        }\n        return Result.ok();\n    }\n\n\n    private void isBlogLiked(Blog blog) {\n        // 1.获取登录用户\n        UserDTO user = UserHolder.getUser();\n        if (user == null) {\n            // 用户未登录，无需查询是否点赞\n            return;\n        }\n        Long userId = user.getId();\n        // 2.判断当前登录用户是否已经点赞\n        String key = \"blog:liked:\" + blog.getId();\n        Double score = stringRedisTemplate.opsForZSet().score(key, userId.toString());\n        blog.setIsLike(score != null);\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212593-zdbddz7","Type":"NodeParagraph","Properties":{"id":"20241016212593-zdbddz7","updated":"20241016212593"},"Children":[{"Type":"NodeText","Data":"点赞列表查询列表"}]},{"ID":"20241016212594-jfdnnz8","Type":"NodeParagraph","Properties":{"id":"20241016212594-jfdnnz8","updated":"20241016212594"},"Children":[{"Type":"NodeText","Data":"BlogController"}]},{"ID":"20241016212595-gsvrdyf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212595-gsvrdyf","updated":"20241016212595"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(\"/likes/{id}\")\npublic Result queryBlogLikes(@PathVariable(\"id\") Long id) {\n\n    return blogService.queryBlogLikes(id);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212596-5yxrc9s","Type":"NodeParagraph","Properties":{"id":"20241016212596-5yxrc9s","updated":"20241016212596"},"Children":[{"Type":"NodeText","Data":"BlogService"}]},{"ID":"20241016212597-wytpo5j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212597-wytpo5j","updated":"20241016212597"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result queryBlogLikes(Long id) {\n    String key = BLOG_LIKED_KEY + id;\n    // 1.查询top5的点赞用户 zrange key 0 4\n    Set\u003cString\u003e top5 = stringRedisTemplate.opsForZSet().range(key, 0, 4);\n    if (top5 == null || top5.isEmpty()) {\n        return Result.ok(Collections.emptyList());\n    }\n    // 2.解析出其中的用户id\n    List\u003cLong\u003e ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());\n    String idStr = StrUtil.join(\",\", ids);\n    // 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1)\n    List\u003cUserDTO\u003e userDTOS = userService.query()\n            .in(\"id\", ids).last(\"ORDER BY FIELD(id,\" + idStr + \")\").list()\n            .stream()\n            .map(user -\u003e BeanUtil.copyProperties(user, UserDTO.class))\n            .collect(Collectors.toList());\n    // 4.返回\n    return Result.ok(userDTOS);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212598-f20r1py","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212598-f20r1py","updated":"20241016212598"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"9、好友关注"}]},{"ID":"20241016212599-e9umb9z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212599-e9umb9z","updated":"20241016212599"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"9.1 好友关注-关注和取消关注"}]},{"ID":"20241016212600-68ux4oi","Type":"NodeParagraph","Properties":{"id":"20241016212600-68ux4oi","updated":"20241016212600"},"Children":[{"Type":"NodeText","Data":"针对用户的操作：可以对用户进行关注和取消关注功能。"}]},{"ID":"20241016212601-zvl88jm","Type":"NodeParagraph","Properties":{"id":"20241016212601-zvl88jm","updated":"20241016212601"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653806140822","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653806140822-20241016213637-ln9gvg1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212602-gfh6kfi","Type":"NodeParagraph","Properties":{"id":"20241016212602-gfh6kfi","updated":"20241016212602"},"Children":[{"Type":"NodeText","Data":"实现思路："}]},{"ID":"20241016212603-6b8dtip","Type":"NodeParagraph","Properties":{"id":"20241016212603-6b8dtip","updated":"20241016212603"},"Children":[{"Type":"NodeText","Data":"需求：基于该表数据结构，实现两个接口："}]},{"ID":"20241016212604-qtakvhx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212604-qtakvhx","updated":"20241016212604"},"Children":[{"ID":"20241016212605-dusu13w","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212605-dusu13w","updated":"20241016212605"},"Children":[{"ID":"20241016212606-smt28i8","Type":"NodeParagraph","Properties":{"id":"20241016212606-smt28i8","updated":"20241016212606"},"Children":[{"Type":"NodeText","Data":"关注和取关接口"}]}]},{"ID":"20241016212607-h2l4wb1","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212607-h2l4wb1","updated":"20241016212607"},"Children":[{"ID":"20241016212608-ttdfzic","Type":"NodeParagraph","Properties":{"id":"20241016212608-ttdfzic","updated":"20241016212608"},"Children":[{"Type":"NodeText","Data":"判断是否关注的接口"}]}]}]},{"ID":"20241016212609-wwiyxxg","Type":"NodeParagraph","Properties":{"id":"20241016212609-wwiyxxg","updated":"20241016212609"},"Children":[{"Type":"NodeText","Data":"关注是User之间的关系，是博主与粉丝的关系，数据库中有一张tb_follow表来标示："}]},{"ID":"20241016212610-zvs4nxy","Type":"NodeParagraph","Properties":{"id":"20241016212610-zvs4nxy","updated":"20241016212610"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653806253817","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653806253817-20241016213637-b3dnhfr.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212611-ef3oqsx","Type":"NodeParagraph","Properties":{"id":"20241016212611-ef3oqsx","updated":"20241016212611"},"Children":[{"Type":"NodeText","Data":"注意: 这里需要把主键修改为自增长，简化开发。"}]},{"ID":"20241016212612-b2ks390","Type":"NodeParagraph","Properties":{"id":"20241016212612-b2ks390","updated":"20241016212612"},"Children":[{"Type":"NodeText","Data":"FollowController"}]},{"ID":"20241016212613-2xc53ju","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212613-2xc53ju","updated":"20241016212613"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//关注\n@PutMapping(\"/{id}/{isFollow}\")\npublic Result follow(@PathVariable(\"id\") Long followUserId, @PathVariable(\"isFollow\") Boolean isFollow) {\n    return followService.follow(followUserId, isFollow);\n}\n//取消关注\n@GetMapping(\"/or/not/{id}\")\npublic Result isFollow(@PathVariable(\"id\") Long followUserId) {\n      return followService.isFollow(followUserId);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212614-c1lai0v","Type":"NodeParagraph","Properties":{"id":"20241016212614-c1lai0v","updated":"20241016212614"},"Children":[{"Type":"NodeText","Data":"FollowService"}]},{"ID":"20241016212615-n13u1pv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212615-n13u1pv","updated":"20241016212615"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"取消关注service\n@Override\npublic Result isFollow(Long followUserId) {\n        // 1.获取登录用户\n        Long userId = UserHolder.getUser().getId();\n        // 2.查询是否关注 select count(*) from tb_follow where user_id = ? and follow_user_id = ?\n        Integer count = query().eq(\"user_id\", userId).eq(\"follow_user_id\", followUserId).count();\n        // 3.判断\n        return Result.ok(count \u003e 0);\n    }\n\n 关注service\n @Override\n    public Result follow(Long followUserId, Boolean isFollow) {\n        // 1.获取登录用户\n        Long userId = UserHolder.getUser().getId();\n        String key = \"follows:\" + userId;\n        // 1.判断到底是关注还是取关\n        if (isFollow) {\n            // 2.关注，新增数据\n            Follow follow = new Follow();\n            follow.setUserId(userId);\n            follow.setFollowUserId(followUserId);\n            boolean isSuccess = save(follow);\n\n        } else {\n            // 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?\n            remove(new QueryWrapper\u003cFollow\u003e()\n                    .eq(\"user_id\", userId).eq(\"follow_user_id\", followUserId));\n\n        }\n        return Result.ok();\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212616-rua8rab","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212616-rua8rab","updated":"20241016212616"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"9.2 好友关注-共同关注🚩"}]},{"ID":"20241016212617-mr2n3xp","Type":"NodeParagraph","Properties":{"id":"20241016212617-mr2n3xp","updated":"20241016212617"},"Children":[{"Type":"NodeText","Data":"想要去看共同关注的好友，需要首先进入到这个页面，这个页面会发起两个请求"}]},{"ID":"20241016212618-msu4dou","Type":"NodeParagraph","Properties":{"id":"20241016212618-msu4dou","updated":"20241016212618"},"Children":[{"Type":"NodeText","Data":"1、去查询用户的详情"}]},{"ID":"20241016212619-zzpgzq0","Type":"NodeParagraph","Properties":{"id":"20241016212619-zzpgzq0","updated":"20241016212619"},"Children":[{"Type":"NodeText","Data":"2、去查询用户的笔记"}]},{"ID":"20241016212620-wz514ri","Type":"NodeParagraph","Properties":{"id":"20241016212620-wz514ri","updated":"20241016212620"},"Children":[{"Type":"NodeText","Data":"以上两个功能和共同关注没有什么关系，大家可以自行将笔记中的代码拷贝到idea中就可以实现这两个功能了，我们的重点在于共同关注功能。"}]},{"ID":"20241016212621-01lvf3x","Type":"NodeParagraph","Properties":{"id":"20241016212621-01lvf3x","updated":"20241016212621"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653806706296","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653806706296-20241016213637-pm7etk4.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212622-tydm9w9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212622-tydm9w9","updated":"20241016212622"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// UserController 根据id查询用户\n@GetMapping(\"/{id}\")\npublic Result queryUserById(@PathVariable(\"id\") Long userId){\n\t// 查询详情\n\tUser user = userService.getById(userId);\n\tif (user == null) {\n\t\treturn Result.ok();\n\t}\n\tUserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);\n\t// 返回\n\treturn Result.ok(userDTO);\n}\n\n// BlogController  根据id查询博主的探店笔记\n@GetMapping(\"/of/user\")\npublic Result queryBlogByUserId(\n\t\t@RequestParam(value = \"current\", defaultValue = \"1\") Integer current,\n\t\t@RequestParam(\"id\") Long id) {\n\t// 根据用户查询\n\tPage\u003cBlog\u003e page = blogService.query()\n\t\t\t.eq(\"user_id\", id).page(new Page\u003c\u003e(current, SystemConstants.MAX_PAGE_SIZE));\n\t// 获取当前页数据\n\tList\u003cBlog\u003e records = page.getRecords();\n\treturn Result.ok(records);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212623-jlznymh","Type":"NodeParagraph","Properties":{"id":"20241016212623-jlznymh","updated":"20241016212623"},"Children":[{"Type":"NodeText","Data":"接下来我们来看看共同关注如何实现："}]},{"ID":"20241016212624-k18jmlp","Type":"NodeParagraph","Properties":{"id":"20241016212624-k18jmlp","updated":"20241016212624"},"Children":[{"Type":"NodeText","Data":"需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同关注呢。"}]},{"ID":"20241016212625-3i5av2p","Type":"NodeParagraph","Properties":{"id":"20241016212625-3i5av2p","updated":"20241016212625"},"Children":[{"Type":"NodeText","Data":"当然是使用我们之前学习过的set集合咯，在set集合中，有交集并集补集的api，我们可以把两人的关注的人分别放入到一个set集合中，然后再通过api去查看这两个set集合中的交集数据。"}]},{"ID":"20241016212626-sslvi90","Type":"NodeParagraph","Properties":{"id":"20241016212626-sslvi90","updated":"20241016212626"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653806973212","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653806973212-20241016213637-h0l6kgm.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212627-vfeapvz","Type":"NodeParagraph","Properties":{"id":"20241016212627-vfeapvz","updated":"20241016212627"},"Children":[{"Type":"NodeText","Data":"我们先来改造当前的关注列表"}]},{"ID":"20241016212628-hws1hhh","Type":"NodeParagraph","Properties":{"id":"20241016212628-hws1hhh","updated":"20241016212628"},"Children":[{"Type":"NodeText","Data":"改造原因是因为我们需要在用户关注了某位用户后，需要将数据放入到set集合中，方便后续进行共同关注，同时当取消关注时，也需要从set集合中进行删除"}]},{"ID":"20241016212629-3jh4pwj","Type":"NodeParagraph","Properties":{"id":"20241016212629-3jh4pwj","updated":"20241016212629"},"Children":[{"Type":"NodeText","Data":"FollowServiceImpl"}]},{"ID":"20241016212630-c20fla6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212630-c20fla6","updated":"20241016212630"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result follow(Long followUserId, Boolean isFollow) {\n    // 1.获取登录用户\n    Long userId = UserHolder.getUser().getId();\n    String key = \"follows:\" + userId;\n    // 1.判断到底是关注还是取关\n    if (isFollow) {\n        // 2.关注，新增数据\n        Follow follow = new Follow();\n        follow.setUserId(userId);\n        follow.setFollowUserId(followUserId);\n        boolean isSuccess = save(follow);\n        if (isSuccess) {\n            // 把关注用户的id，放入redis的set集合 sadd userId followerUserId\n            stringRedisTemplate.opsForSet().add(key, followUserId.toString());\n        }\n    } else {\n        // 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?\n        boolean isSuccess = remove(new QueryWrapper\u003cFollow\u003e()\n                .eq(\"user_id\", userId).eq(\"follow_user_id\", followUserId));\n        if (isSuccess) {\n            // 把关注用户的id从Redis集合中移除\n            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());\n        }\n    }\n    return Result.ok();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212631-r2a47qm","Type":"NodeParagraph","Properties":{"id":"20241016212631-r2a47qm","updated":"20241016212631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体的关注代码："}]},{"ID":"20241016212632-6naou5n","Type":"NodeParagraph","Properties":{"id":"20241016212632-6naou5n","updated":"20241016212632"},"Children":[{"Type":"NodeText","Data":"FollowServiceImpl"}]},{"ID":"20241016212633-jv8navj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212633-jv8navj","updated":"20241016212633"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"/**\n * 共同关注的接口，用Redis的set实现\n * @param id 访问主页用户的id\n * @return 结果\n */\n@Override\npublic Result followCommons(Long id) {\n    // 1.获取当前用户\n    Long userId = UserHolder.getUser().getId();\n    String key = \"follows:\" + userId;\n    // 2.求交集\n    String key2 = \"follows:\" + id;\n    Set\u003cString\u003e intersect = stringRedisTemplate.opsForSet().intersect(key, key2); // Redis中两个set集合求交集\n    if (intersect == null || intersect.isEmpty()) {\n        // 无交集\n        return Result.ok(Collections.emptyList());\n    }\n    // 3.解析id集合\n    List\u003cLong\u003e ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());\n    // 4.查询用户\n    List\u003cUserDTO\u003e users = userService.listByIds(ids)\n        .stream()\n        .map(user -\u003e BeanUtil.copyProperties(user, UserDTO.class))\n        .collect(Collectors.toList());\n    return Result.ok(users);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212634-ji8t0ue","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212634-ji8t0ue","updated":"20241016212634"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"9.3 好友关注-Feed流实现方案"}]},{"ID":"20241016212635-drx7931","Type":"NodeParagraph","Properties":{"id":"20241016212635-drx7931","updated":"20241016212635"},"Children":[{"Type":"NodeText","Data":"当我们关注了用户后，这个用户发了动态，那么我们应该把这些数据推送给用户，这个需求，其实我们又把他叫做Feed流，关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。"}]},{"ID":"20241016212636-vle9bi4","Type":"NodeParagraph","Properties":{"id":"20241016212636-vle9bi4","updated":"20241016212636"},"Children":[{"Type":"NodeText","Data":"对于传统的模式的内容解锁：我们是需要用户去通过搜索引擎或者是其他的方式去解锁想要看的内容"}]},{"ID":"20241016212637-c0vj6us","Type":"NodeParagraph","Properties":{"id":"20241016212637-c0vj6us","updated":"20241016212637"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653808641260","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653808641260-20241016213637-xd844v1.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212638-2xcpio5","Type":"NodeParagraph","Properties":{"id":"20241016212638-2xcpio5","updated":"20241016212638"},"Children":[{"Type":"NodeText","Data":"对于新型的Feed流的的效果：不需要我们用户再去推送信息，而是系统分析用户到底想要什么，然后直接把内容推送给用户，从而使用户能够更加的节约时间，不用主动去寻找。"}]},{"ID":"20241016212639-sftwghc","Type":"NodeParagraph","Properties":{"id":"20241016212639-sftwghc","updated":"20241016212639"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653808993693","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653808993693-20241016213637-64c4v0o.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212640-2b2htp5","Type":"NodeParagraph","Properties":{"id":"20241016212640-2b2htp5","updated":"20241016212640"},"Children":[{"Type":"NodeText","Data":"Feed流的实现有两种模式："}]},{"ID":"20241016212641-casraij","Type":"NodeParagraph","Properties":{"id":"20241016212641-casraij","updated":"20241016212641"},"Children":[{"Type":"NodeText","Data":"Feed流产品有两种常见模式："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈"}]},{"ID":"20241016212642-vh9106s","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212642-vh9106s","updated":"20241016212642"},"Children":[{"ID":"20241016212643-mj7gmyx","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212643-mj7gmyx","updated":"20241016212643"},"Children":[{"ID":"20241016212644-tarfnd8","Type":"NodeParagraph","Properties":{"id":"20241016212644-tarfnd8","updated":"20241016212644"},"Children":[{"Type":"NodeText","Data":"优点：信息全面，不会有缺失。并且实现也相对简单"}]}]},{"ID":"20241016212645-tronmzp","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212645-tronmzp","updated":"20241016212645"},"Children":[{"ID":"20241016212646-glkm9m6","Type":"NodeParagraph","Properties":{"id":"20241016212646-glkm9m6","updated":"20241016212646"},"Children":[{"Type":"NodeText","Data":"缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低"}]}]}]},{"ID":"20241016212647-m5hmj4n","Type":"NodeParagraph","Properties":{"id":"20241016212647-m5hmj4n","updated":"20241016212647"},"Children":[{"Type":"NodeText","Data":"智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户"}]},{"ID":"20241016212648-lljy9j6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212648-lljy9j6","updated":"20241016212648"},"Children":[{"ID":"20241016212649-efw1577","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212649-efw1577","updated":"20241016212649"},"Children":[{"ID":"20241016212650-r7vjlnn","Type":"NodeParagraph","Properties":{"id":"20241016212650-r7vjlnn","updated":"20241016212650"},"Children":[{"Type":"NodeText","Data":"优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷"}]}]},{"ID":"20241016212651-eoit4ji","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212651-eoit4ji","updated":"20241016212651"},"Children":[{"ID":"20241016212652-otcvwxo","Type":"NodeParagraph","Properties":{"id":"20241016212652-otcvwxo","updated":"20241016212652"},"Children":[{"Type":"NodeText","Data":"缺点：如果算法不精准，可能起到反作用"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种："}]}]}]},{"ID":"20241016212653-tjof8xv","Type":"NodeParagraph","Properties":{"id":"20241016212653-tjof8xv","updated":"20241016212653"},"Children":[{"Type":"NodeText","Data":"我们本次针对好友的操作，采用的就是Timeline的方式，只需要拿到我们关注用户的信息，然后按照时间排序即可"}]},{"ID":"20241016212654-0i7y6l7","Type":"NodeParagraph","Properties":{"id":"20241016212654-0i7y6l7","updated":"20241016212654"},"Children":[{"Type":"NodeText","Data":"，因此采用Timeline的模式。该模式的实现方案有三种："}]},{"ID":"20241016212655-v8umj84","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212655-v8umj84","updated":"20241016212655"},"Children":[{"ID":"20241016212656-xk50n8x","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212656-xk50n8x","updated":"20241016212656"},"Children":[{"ID":"20241016212657-gcca4mn","Type":"NodeParagraph","Properties":{"id":"20241016212657-gcca4mn","updated":"20241016212657"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拉模式"}]}]},{"ID":"20241016212658-6007nz4","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212658-6007nz4","updated":"20241016212658"},"Children":[{"ID":"20241016212659-kfgmjnm","Type":"NodeParagraph","Properties":{"id":"20241016212659-kfgmjnm","updated":"20241016212659"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"推模式"}]}]},{"ID":"20241016212660-dfhfl6a","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212660-dfhfl6a","updated":"20241016212660"},"Children":[{"ID":"20241016212661-fxhxezz","Type":"NodeParagraph","Properties":{"id":"20241016212661-fxhxezz","updated":"20241016212661"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"推拉结合"}]}]}]},{"ID":"20241016212662-46kx55d","Type":"NodeParagraph","Properties":{"id":"20241016212662-46kx55d","updated":"20241016212662"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"拉模式"},{"Type":"NodeText","Data":"：也叫做读扩散"}]},{"ID":"20241016212663-2gsvmcc","Type":"NodeParagraph","Properties":{"id":"20241016212663-2gsvmcc","updated":"20241016212663"},"Children":[{"Type":"NodeText","Data":"该模式的核心含义就是：当张三和李四和王五发了消息后，都会保存在自己的邮箱中，假设赵六要读取信息，那么他会从读取他自己的收件箱，此时系统会从他关注的人群中，把他关注人的信息全部都进行拉取，然后在进行排序"}]},{"ID":"20241016212664-ikwpwrs","Type":"NodeParagraph","Properties":{"id":"20241016212664-ikwpwrs","updated":"20241016212664"},"Children":[{"Type":"NodeText","Data":"优点：比较节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清楚。"}]},{"ID":"20241016212665-9s4xefy","Type":"NodeParagraph","Properties":{"id":"20241016212665-9s4xefy","updated":"20241016212665"},"Children":[{"Type":"NodeText","Data":"缺点："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"比较延迟"},{"Type":"NodeText","Data":"，当用户读取数据时才去关注的人里边去读取数据，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。"}]},{"ID":"20241016212666-7p4bpcr","Type":"NodeParagraph","Properties":{"id":"20241016212666-7p4bpcr","updated":"20241016212666"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653809450816","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653809450816-20241016213637-ix8za0k.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212667-gtmd01z","Type":"NodeParagraph","Properties":{"id":"20241016212667-gtmd01z","updated":"20241016212667"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"推模式"},{"Type":"NodeText","Data":"：也叫做写扩散。"}]},{"ID":"20241016212668-dak277t","Type":"NodeParagraph","Properties":{"id":"20241016212668-dak277t","updated":"20241016212668"},"Children":[{"Type":"NodeText","Data":"推模式是没有写邮箱的，当张三写了一个内容，此时会主动的把张三写的内容发送到他的粉丝收件箱中去，假设此时李四再来读取，就不用再去临时拉取了"}]},{"ID":"20241016212669-fqus1cq","Type":"NodeParagraph","Properties":{"id":"20241016212669-fqus1cq","updated":"20241016212669"},"Children":[{"Type":"NodeText","Data":"优点：时效快，不用临时拉取"}]},{"ID":"20241016212670-tcyi41s","Type":"NodeParagraph","Properties":{"id":"20241016212670-tcyi41s","updated":"20241016212670"},"Children":[{"Type":"NodeText","Data":"缺点："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"内存压力大"},{"Type":"NodeText","Data":"，假设一个大V写信息，很多人关注他， 就会写很多分数据到粉丝那边去"}]},{"ID":"20241016212671-hza37hb","Type":"NodeParagraph","Properties":{"id":"20241016212671-hza37hb","updated":"20241016212671"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653809875208","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653809875208-20241016213637-vppupi2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212672-6d70g3v","Type":"NodeParagraph","Properties":{"id":"20241016212672-6d70g3v","updated":"20241016212672"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"推拉结合模式"},{"Type":"NodeText","Data":"：也叫做读写混合，兼具推和拉两种模式的优点。"}]},{"ID":"20241016212673-284uk9n","Type":"NodeParagraph","Properties":{"id":"20241016212673-284uk9n","updated":"20241016212673"},"Children":[{"Type":"NodeText","Data":"推拉模式是一个折中的方案，站在发件人这一段，如果是个普通的人，那么我们采用写扩散的方式，直接把数据写入到他的粉丝中去，因为普通的人他的粉丝关注量比较小，所以这样做没有压力，如果是大V，那么他是直接将数据先写入到一份到发件箱里边去，然后再直接写一份到活跃粉丝收件箱里边去，现在站在收件人这端来看，如果是活跃粉丝，那么大V和普通的人发的都会直接写入到自己收件箱里边来，而如果是普通的粉丝，由于他们上线不是很频繁，所以等他们上线时，再从发件箱里边去拉信息。"}]},{"ID":"20241016212674-oejkcvy","Type":"NodeParagraph","Properties":{"id":"20241016212674-oejkcvy","updated":"20241016212674"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653812346852","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653812346852-20241016213637-ljpv1ej.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212675-xbi09uj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212675-xbi09uj","updated":"20241016212675"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"9.4 好友关注-推送到粉丝收件箱🚩"}]},{"ID":"20241016212676-1ch9drl","Type":"NodeParagraph","Properties":{"id":"20241016212676-1ch9drl","updated":"20241016212676"},"Children":[{"Type":"NodeText","Data":"需求："}]},{"ID":"20241016212677-p7wur2j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212677-p7wur2j","updated":"20241016212677"},"Children":[{"ID":"20241016212678-cic5rba","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212678-cic5rba","updated":"20241016212678"},"Children":[{"ID":"20241016212679-j3jhju9","Type":"NodeParagraph","Properties":{"id":"20241016212679-j3jhju9","updated":"20241016212679"},"Children":[{"Type":"NodeText","Data":"修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱"}]}]},{"ID":"20241016212680-eewg7so","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212680-eewg7so","updated":"20241016212680"},"Children":[{"ID":"20241016212681-fum7ysq","Type":"NodeParagraph","Properties":{"id":"20241016212681-fum7ysq","updated":"20241016212681"},"Children":[{"Type":"NodeText","Data":"收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现"}]}]},{"ID":"20241016212682-o0r48ul","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212682-o0r48ul","updated":"20241016212682"},"Children":[{"ID":"20241016212683-wruflzd","Type":"NodeParagraph","Properties":{"id":"20241016212683-wruflzd","updated":"20241016212683"},"Children":[{"Type":"NodeText","Data":"查询收件箱数据时，可以实现分页查询"}]}]}]},{"ID":"20241016212684-tn3zcki","Type":"NodeParagraph","Properties":{"id":"20241016212684-tn3zcki","updated":"20241016212684"},"Children":[{"Type":"NodeText","Data":"Feed流中的数据会不断更新，所以数据的角标也在变化，因此不能采用传统的分页模式。"}]},{"ID":"20241016212685-m3r1yq5","Type":"NodeParagraph","Properties":{"id":"20241016212685-m3r1yq5","updated":"20241016212685"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"传统了分页在feed流是不适用的"},{"Type":"NodeText","Data":"，因为我们的数据会随时发生变化"}]},{"ID":"20241016212686-nij19h2","Type":"NodeParagraph","Properties":{"id":"20241016212686-nij19h2","updated":"20241016212686"},"Children":[{"Type":"NodeText","Data":"假设在t1 时刻，我们去读取第一页，此时page = 1 ，size = 5 ，那么我们拿到的就是10"},{"Type":"NodeTextMark","TextMarkType":"sub","TextMarkTextContent":"6 这几条记录，假设现在t2时候又发布了一条记录，此时t3 时刻，我们来读取第二页，读取第二页传入的参数是page=2 ，size=5 ，那么此时读取到的第二页实际上是从6 开始，然后是6"},{"Type":"NodeText","Data":"2 ，那么我们就读取到了重复的数据，所以feed流的分页，不能采用原始方案来做。"}]},{"ID":"20241016212687-6ptsi98","Type":"NodeParagraph","Properties":{"id":"20241016212687-6ptsi98","updated":"20241016212687"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653813047671","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653813047671-20241016213637-voglonb.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212688-qtubytd","Type":"NodeParagraph","Properties":{"id":"20241016212688-qtubytd","updated":"20241016212688"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"Feed流的滚动分页"}]},{"ID":"20241016212689-ej6o904","Type":"NodeParagraph","Properties":{"id":"20241016212689-ej6o904","updated":"20241016212689"},"Children":[{"Type":"NodeText","Data":"我们需要记录每次操作的最后一条，然后从这个位置开始去读取数据"}]},{"ID":"20241016212690-cs11001","Type":"NodeParagraph","Properties":{"id":"20241016212690-cs11001","updated":"20241016212690"},"Children":[{"Type":"NodeText","Data":"举个例子：我们从t1时刻开始，拿第一页数据，拿到了10~6，然后记录下当前最后一次拿取的记录，就是6，t2时刻发布了新的记录，此时这个11放到最顶上，但是不会影响我们之前记录的6，此时t3时刻来拿第二页，第二页这个时候拿数据，还是从6后一点的5去拿，就拿到了5-1的记录。我们这个地方可以采用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"sortedSet"},{"Type":"NodeText","Data":"来做，可以进行范围查询，并且还可以记录当前获取数据时间戳最小值，就可以实现滚动分页了"}]},{"ID":"20241016212691-53xik18","Type":"NodeParagraph","Properties":{"id":"20241016212691-53xik18","updated":"20241016212691"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653813462834","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653813462834-20241016213637-9pl4epn.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212692-sjv9vgo","Type":"NodeParagraph","Properties":{"id":"20241016212692-sjv9vgo","updated":"20241016212692"},"Children":[{"Type":"NodeText","Data":"核心的意思：就是我们在保存完探店笔记后，获得到当前笔记的粉丝，然后把数据推送到粉丝的redis中去。"}]},{"ID":"20241016212693-kamnl9f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212693-kamnl9f","updated":"20241016212693"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result saveBlog(Blog blog) {\n    // 1.获取登录用户\n    UserDTO user = UserHolder.getUser();\n    blog.setUserId(user.getId());\n    // 2.保存探店笔记\n    boolean isSuccess = save(blog);\n    if(!isSuccess){\n        return Result.fail(\"新增笔记失败!\");\n    }\n    // 3.查询笔记作者的所有粉丝 select * from tb_follow where follow_user_id = ?\n    List\u003cFollow\u003e follows = followService.query().eq(\"follow_user_id\", user.getId()).list();\n    // 4.推送笔记id给所有粉丝\n    for (Follow follow : follows) {\n        // 4.1.获取粉丝id\n        Long userId = follow.getUserId();\n        // 4.2.推送\n        String key = FEED_KEY + userId;\n        stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis());\n    }\n    // 5.返回id\n    return Result.ok(blog.getId());\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212694-m2hnq73","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212694-m2hnq73","updated":"20241016212694"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"9.5好友关注-实现分页查询收邮箱"}]},{"ID":"20241016212695-06bp5vk","Type":"NodeParagraph","Properties":{"id":"20241016212695-06bp5vk","updated":"20241016212695"},"Children":[{"Type":"NodeText","Data":"需求：在个人主页的“关注”卡片中，查询并展示推送的Blog信息："}]},{"ID":"20241016212696-p0ferc8","Type":"NodeParagraph","Properties":{"id":"20241016212696-p0ferc8","updated":"20241016212696"},"Children":[{"Type":"NodeText","Data":"具体操作如下："}]},{"ID":"20241016212697-4bduc4a","Type":"NodeParagraph","Properties":{"id":"20241016212697-4bduc4a","updated":"20241016212697"},"Children":[{"Type":"NodeText","Data":"1、每次查询完成后，我们要分析出查询出数据的最小时间戳，这个值会作为下一次查询的条件"}]},{"ID":"20241016212698-d9ck74v","Type":"NodeParagraph","Properties":{"id":"20241016212698-d9ck74v","updated":"20241016212698"},"Children":[{"Type":"NodeText","Data":"2、我们需要找到与上一次查询相同的查询个数作为偏移量，下次查询时，跳过这些查询过的数据，拿到我们需要的数据"}]},{"ID":"20241016212699-oxaerfx","Type":"NodeParagraph","Properties":{"id":"20241016212699-oxaerfx","updated":"20241016212699"},"Children":[{"Type":"NodeText","Data":"综上：我们的请求参数中就需要携带 lastId：上一次查询的最小时间戳 和偏移量这两个参数。"}]},{"ID":"20241016212700-xsanf26","Type":"NodeParagraph","Properties":{"id":"20241016212700-xsanf26","updated":"20241016212700"},"Children":[{"Type":"NodeText","Data":"这两个参数第一次会由前端来指定，以后的查询就根据后台结果作为条件，再次传递到后台。"}]},{"ID":"20241016212701-wm836jk","Type":"NodeParagraph","Properties":{"id":"20241016212701-wm836jk","updated":"20241016212701"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653819821591","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653819821591-20241016213637-ub41iqq.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212702-cgzqn9x","Type":"NodeParagraph","Properties":{"id":"20241016212702-cgzqn9x","updated":"20241016212702"},"Children":[{"Type":"NodeText","Data":"一、定义出来具体的返回值实体类"}]},{"ID":"20241016212703-zjupy49","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212703-zjupy49","updated":"20241016212703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Data\npublic class ScrollResult {\n    private List\u003c?\u003e list;\n    private Long minTime;\n    private Integer offset;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212704-i5elt7x","Type":"NodeParagraph","Properties":{"id":"20241016212704-i5elt7x","updated":"20241016212704"},"Children":[{"Type":"NodeText","Data":"BlogController"}]},{"ID":"20241016212705-rzoq9hh","Type":"NodeParagraph","Properties":{"id":"20241016212705-rzoq9hh","updated":"20241016212705"},"Children":[{"Type":"NodeText","Data":"注意：RequestParam 表示接受url地址栏传参的注解，当方法上参数的名称和url地址栏不相同时，可以通过RequestParam 来进行指定"}]},{"ID":"20241016212706-w0rurn5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212706-w0rurn5","updated":"20241016212706"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(\"/of/follow\")\npublic Result queryBlogOfFollow(\n    @RequestParam(\"lastId\") Long max, @RequestParam(value = \"offset\", defaultValue = \"0\") Integer offset){\n    return blogService.queryBlogOfFollow(max, offset);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212707-oif0gdk","Type":"NodeParagraph","Properties":{"id":"20241016212707-oif0gdk","updated":"20241016212707"},"Children":[{"Type":"NodeText","Data":"BlogServiceImpl"}]},{"ID":"20241016212708-qrf24ce","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212708-qrf24ce","updated":"20241016212708"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result queryBlogOfFollow(Long max, Integer offset) {\n    // 1.获取当前用户\n    Long userId = UserHolder.getUser().getId();\n    // 2.查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count\n    String key = FEED_KEY + userId;\n    Set\u003cZSetOperations.TypedTuple\u003cString\u003e\u003e typedTuples = stringRedisTemplate.opsForZSet()\n        .reverseRangeByScoreWithScores(key, 0, max, offset, 2);\n    // 3.非空判断\n    if (typedTuples == null || typedTuples.isEmpty()) {\n        return Result.ok();\n    }\n    // 4.解析数据：blogId、minTime（时间戳）、offset\n    List\u003cLong\u003e ids = new ArrayList\u003c\u003e(typedTuples.size());\n    long minTime = 0; // 2\n    int os = 1; // 2\n    for (ZSetOperations.TypedTuple\u003cString\u003e tuple : typedTuples) { // 5 4 4 2 2\n        // 4.1.获取id\n        ids.add(Long.valueOf(tuple.getValue()));\n        // 4.2.获取分数(时间戳）\n        long time = tuple.getScore().longValue();\n        if(time == minTime){\n            os++;\n        }else{\n            minTime = time;\n            os = 1;\n        }\n    }\n\tos = minTime == max ? os : os + offset;\n    // 5.根据id查询blog\n    String idStr = StrUtil.join(\",\", ids);\n    List\u003cBlog\u003e blogs = query().in(\"id\", ids).last(\"ORDER BY FIELD(id,\" + idStr + \")\").list();\n\n    for (Blog blog : blogs) {\n        // 5.1.查询blog有关的用户\n        queryBlogUser(blog);\n        // 5.2.查询blog是否被点赞\n        isBlogLiked(blog);\n    }\n\n    // 6.封装并返回\n    ScrollResult r = new ScrollResult();\n    r.setList(blogs);\n    r.setOffset(os);\n    r.setMinTime(minTime);\n\n    return Result.ok(r);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212709-dpx4jak","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212709-dpx4jak","updated":"20241016212709"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"10、附近商户"}]},{"ID":"20241016212710-6sevv7i","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212710-6sevv7i","updated":"20241016212710"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"10.1、附近商户-GEO数据结构的基本用法"}]},{"ID":"20241016212711-ln0cwc3","Type":"NodeParagraph","Properties":{"id":"20241016212711-ln0cwc3","updated":"20241016212711"},"Children":[{"Type":"NodeText","Data":"GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有："}]},{"ID":"20241016212712-y863zsm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212712-y863zsm","updated":"20241016212712"},"Children":[{"ID":"20241016212713-z08j2w3","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212713-z08j2w3","updated":"20241016212713"},"Children":[{"ID":"20241016212714-2sylzi6","Type":"NodeParagraph","Properties":{"id":"20241016212714-2sylzi6","updated":"20241016212714"},"Children":[{"Type":"NodeText","Data":"GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）"}]}]},{"ID":"20241016212715-k45hkku","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212715-k45hkku","updated":"20241016212715"},"Children":[{"ID":"20241016212716-w1swhlc","Type":"NodeParagraph","Properties":{"id":"20241016212716-w1swhlc","updated":"20241016212716"},"Children":[{"Type":"NodeText","Data":"GEODIST：计算指定的两个点之间的距离并返回"}]}]},{"ID":"20241016212717-34omnti","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212717-34omnti","updated":"20241016212717"},"Children":[{"ID":"20241016212718-jygywq2","Type":"NodeParagraph","Properties":{"id":"20241016212718-jygywq2","updated":"20241016212718"},"Children":[{"Type":"NodeText","Data":"GEOHASH：将指定member的坐标转为hash字符串形式并返回"}]}]},{"ID":"20241016212719-eshs1ia","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212719-eshs1ia","updated":"20241016212719"},"Children":[{"ID":"20241016212720-eo2so1z","Type":"NodeParagraph","Properties":{"id":"20241016212720-eo2so1z","updated":"20241016212720"},"Children":[{"Type":"NodeText","Data":"GEOPOS：返回指定member的坐标"}]}]},{"ID":"20241016212721-m0i5sdi","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212721-m0i5sdi","updated":"20241016212721"},"Children":[{"ID":"20241016212722-0paod1p","Type":"NodeParagraph","Properties":{"id":"20241016212722-0paod1p","updated":"20241016212722"},"Children":[{"Type":"NodeText","Data":"GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃"}]}]},{"ID":"20241016212723-y25nmno","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212723-y25nmno","updated":"20241016212723"},"Children":[{"ID":"20241016212724-8somxjt","Type":"NodeParagraph","Properties":{"id":"20241016212724-8somxjt","updated":"20241016212724"},"Children":[{"Type":"NodeText","Data":"GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能"}]}]},{"ID":"20241016212725-px8glz7","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212725-px8glz7","updated":"20241016212725"},"Children":[{"ID":"20241016212726-pbg002p","Type":"NodeParagraph","Properties":{"id":"20241016212726-pbg002p","updated":"20241016212726"},"Children":[{"Type":"NodeText","Data":"GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能"}]}]}]},{"ID":"20241016212727-y1u6awd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212727-y1u6awd","updated":"20241016212727"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"10.2、 附近商户-导入店铺数据到GEO"}]},{"ID":"20241016212728-x1mdy1c","Type":"NodeParagraph","Properties":{"id":"20241016212728-x1mdy1c","updated":"20241016212728"},"Children":[{"Type":"NodeText","Data":"具体场景说明："}]},{"ID":"20241016212729-r0sdidr","Type":"NodeParagraph","Properties":{"id":"20241016212729-r0sdidr","updated":"20241016212729"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653822036941","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653822036941-20241016213637-6jdn8i9.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212730-29q7n09","Type":"NodeParagraph","Properties":{"id":"20241016212730-29q7n09","updated":"20241016212730"},"Children":[{"Type":"NodeText","Data":"当我们点击美食之后，会出现一系列的商家，商家中可以按照多种排序方式，我们此时关注的是距离，这个地方就需要使用到我们的GEO，向后台传入当前app收集的地址(我们此处是写死的) ，以当前坐标作为圆心，同时绑定相同的店家类型type，以及分页信息，把这几个条件传入后台，后台查询出对应的数据再返回。"}]},{"ID":"20241016212731-aoos90m","Type":"NodeParagraph","Properties":{"id":"20241016212731-aoos90m","updated":"20241016212731"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653822021827","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653822021827-20241016213637-ktyuq6u.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212732-foesgvr","Type":"NodeParagraph","Properties":{"id":"20241016212732-foesgvr","updated":"20241016212732"},"Children":[{"Type":"NodeText","Data":"我们要做的事情是：将数据库表中的数据导入到redis中去，redis中的GEO，GEO在redis中就一个menber和一个经纬度，我们把x和y轴传入到redis做的经纬度位置去，但我们不能把所有的数据都放入到menber中去，毕竟作为redis是一个内存级数据库，如果存海量数据，redis还是力不从心，所以我们在这个地方存储他的id即可。"}]},{"ID":"20241016212733-wvwgnkz","Type":"NodeParagraph","Properties":{"id":"20241016212733-wvwgnkz","updated":"20241016212733"},"Children":[{"Type":"NodeText","Data":"但是这个时候还有一个问题，就是在redis中并没有存储type，所以我们无法根据type来对数据进行筛选，所以我们可以按照商户类型做分组，类型相同的商户作为同一组，以typeId为key存入同一个GEO集合中即可"}]},{"ID":"20241016212734-ozljz7b","Type":"NodeParagraph","Properties":{"id":"20241016212734-ozljz7b","updated":"20241016212734"},"Children":[{"Type":"NodeText","Data":"代码"}]},{"ID":"20241016212735-e5fo4wu","Type":"NodeParagraph","Properties":{"id":"20241016212735-e5fo4wu","updated":"20241016212735"},"Children":[{"Type":"NodeText","Data":"HmDianPingApplicationTests"}]},{"ID":"20241016212736-63pra1n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212736-63pra1n","updated":"20241016212736"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Test\nvoid loadShopData() {\n    // 1.查询店铺信息\n    List\u003cShop\u003e list = shopService.list();\n    // 2.把店铺分组，按照typeId分组，typeId一致的放到一个集合\n    Map\u003cLong, List\u003cShop\u003e\u003e map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId));\n    // 3.分批完成写入Redis\n    for (Map.Entry\u003cLong, List\u003cShop\u003e\u003e entry : map.entrySet()) {\n        // 3.1.获取类型id\n        Long typeId = entry.getKey();\n        String key = SHOP_GEO_KEY + typeId;\n        // 3.2.获取同类型的店铺的集合\n        List\u003cShop\u003e value = entry.getValue();\n        List\u003cRedisGeoCommands.GeoLocation\u003cString\u003e\u003e locations = new ArrayList\u003c\u003e(value.size());\n        // 3.3.写入redis GEOADD key 经度 纬度 member\n        for (Shop shop : value) {\n            // stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());\n            locations.add(new RedisGeoCommands.GeoLocation\u003c\u003e(\n                    shop.getId().toString(),\n                    new Point(shop.getX(), shop.getY())\n            ));\n        }\n        stringRedisTemplate.opsForGeo().add(key, locations);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212737-fyod18p","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212737-fyod18p","updated":"20241016212737"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"10.3 附近商户-实现附近商户功能"}]},{"ID":"20241016212738-wx44zug","Type":"NodeParagraph","Properties":{"id":"20241016212738-wx44zug","updated":"20241016212738"},"Children":[{"Type":"NodeText","Data":"SpringDataRedis的2.3.9版本并不支持Redis 6.2提供的GEOSEARCH命令，因此我们需要提示其版本，修改自己的POM"}]},{"ID":"20241016212739-zuxat1f","Type":"NodeParagraph","Properties":{"id":"20241016212739-zuxat1f","updated":"20241016212739"},"Children":[{"Type":"NodeText","Data":"第一步：导入pom"}]},{"ID":"20241016212740-as7q8pt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"eG1s","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212740-as7q8pt","updated":"20241016212740"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"eG1s","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003cdependency\u003e\n    \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\n    \u003cartifactId\u003espring-boot-starter-data-redis\u003c/artifactId\u003e\n    \u003cexclusions\u003e\n        \u003cexclusion\u003e\n            \u003cartifactId\u003espring-data-redis\u003c/artifactId\u003e\n            \u003cgroupId\u003eorg.springframework.data\u003c/groupId\u003e\n        \u003c/exclusion\u003e\n        \u003cexclusion\u003e\n            \u003cartifactId\u003elettuce-core\u003c/artifactId\u003e\n            \u003cgroupId\u003eio.lettuce\u003c/groupId\u003e\n        \u003c/exclusion\u003e\n    \u003c/exclusions\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n    \u003cgroupId\u003eorg.springframework.data\u003c/groupId\u003e\n    \u003cartifactId\u003espring-data-redis\u003c/artifactId\u003e\n    \u003cversion\u003e2.6.2\u003c/version\u003e\n\u003c/dependency\u003e\n\u003cdependency\u003e\n    \u003cgroupId\u003eio.lettuce\u003c/groupId\u003e\n    \u003cartifactId\u003elettuce-core\u003c/artifactId\u003e\n    \u003cversion\u003e6.1.6.RELEASE\u003c/version\u003e\n\u003c/dependency\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212741-a5wi1ac","Type":"NodeParagraph","Properties":{"id":"20241016212741-a5wi1ac","updated":"20241016212741"},"Children":[{"Type":"NodeText","Data":"第二步："}]},{"ID":"20241016212742-kbj3980","Type":"NodeParagraph","Properties":{"id":"20241016212742-kbj3980","updated":"20241016212742"},"Children":[{"Type":"NodeText","Data":"ShopController"}]},{"ID":"20241016212743-uv7jxe0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212743-uv7jxe0","updated":"20241016212743"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(\"/of/type\")\npublic Result queryShopByType(\n        @RequestParam(\"typeId\") Integer typeId,\n        @RequestParam(value = \"current\", defaultValue = \"1\") Integer current,\n        @RequestParam(value = \"x\", required = false) Double x,\n        @RequestParam(value = \"y\", required = false) Double y\n) {\n   return shopService.queryShopByType(typeId, current, x, y);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212744-90jj3en","Type":"NodeParagraph","Properties":{"id":"20241016212744-90jj3en","updated":"20241016212744"},"Children":[{"Type":"NodeText","Data":"ShopServiceImpl"}]},{"ID":"20241016212745-md50myq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212745-md50myq","updated":"20241016212745"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\n    public Result queryShopByType(Integer typeId, Integer current, Double x, Double y) {\n        // 1.判断是否需要根据坐标查询\n        if (x == null || y == null) {\n            // 不需要坐标查询，按数据库查询\n            Page\u003cShop\u003e page = query()\n                    .eq(\"type_id\", typeId)\n                    .page(new Page\u003c\u003e(current, SystemConstants.DEFAULT_PAGE_SIZE));\n            // 返回数据\n            return Result.ok(page.getRecords());\n        }\n\n        // 2.计算分页参数\n        int from = (current - 1) * SystemConstants.DEFAULT_PAGE_SIZE;\n        int end = current * SystemConstants.DEFAULT_PAGE_SIZE;\n\n        // 3.查询redis、按照距离排序、分页。结果：shopId、distance\n        String key = SHOP_GEO_KEY + typeId;\n        GeoResults\u003cRedisGeoCommands.GeoLocation\u003cString\u003e\u003e results = stringRedisTemplate.opsForGeo() // GEOSEARCH key BYLONLAT x y BYRADIUS 10 WITHDISTANCE\n                .search(\n                        key,\n                        GeoReference.fromCoordinate(x, y),\n                        new Distance(5000),\n                        RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)\n                );\n        // 4.解析出id\n        if (results == null) {\n            return Result.ok(Collections.emptyList());\n        }\n        List\u003cGeoResult\u003cRedisGeoCommands.GeoLocation\u003cString\u003e\u003e\u003e list = results.getContent();\n        if (list.size() \u003c= from) {\n            // 没有下一页了，结束\n            return Result.ok(Collections.emptyList());\n        }\n        // 4.1.截取 from ~ end的部分\n        List\u003cLong\u003e ids = new ArrayList\u003c\u003e(list.size());\n        Map\u003cString, Distance\u003e distanceMap = new HashMap\u003c\u003e(list.size());\n        list.stream().skip(from).forEach(result -\u003e {\n            // 4.2.获取店铺id\n            String shopIdStr = result.getContent().getName();\n            ids.add(Long.valueOf(shopIdStr));\n            // 4.3.获取距离\n            Distance distance = result.getDistance();\n            distanceMap.put(shopIdStr, distance);\n        });\n        // 5.根据id查询Shop\n        String idStr = StrUtil.join(\",\", ids);\n        List\u003cShop\u003e shops = query().in(\"id\", ids).last(\"ORDER BY FIELD(id,\" + idStr + \")\").list();\n        for (Shop shop : shops) {\n            shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());\n        }\n        // 6.返回\n        return Result.ok(shops);\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212746-aa5t9xp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212746-aa5t9xp","updated":"20241016212746"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"11、用户签到"}]},{"ID":"20241016212747-yx7z5xi","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016212747-yx7z5xi","updated":"20241016212747"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"11.1、用户签到-BitMap功能演示"}]},{"ID":"20241016212748-ksi9plg","Type":"NodeParagraph","Properties":{"id":"20241016212748-ksi9plg","updated":"20241016212748"},"Children":[{"Type":"NodeText","Data":"我们针对签到功能完全可以通过mysql来完成，比如说以下这张表"}]},{"ID":"20241016212749-xfary04","Type":"NodeParagraph","Properties":{"id":"20241016212749-xfary04","updated":"20241016212749"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653823145495","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653823145495-20241016213637-1r0nvpc.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212750-3ocuelt","Type":"NodeParagraph","Properties":{"id":"20241016212750-3ocuelt","updated":"20241016212750"},"Children":[{"Type":"NodeText","Data":"用户一次签到，就是一条记录，假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条"}]},{"ID":"20241016212751-1n9kh84","Type":"NodeParagraph","Properties":{"id":"20241016212751-1n9kh84","updated":"20241016212751"},"Children":[{"Type":"NodeText","Data":"每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22 字节的内存，一个月则最多需要600多字节"}]},{"ID":"20241016212752-a3c46ai","Type":"NodeParagraph","Properties":{"id":"20241016212752-a3c46ai","updated":"20241016212752"},"Children":[{"Type":"NodeText","Data":"我们如何能够简化一点呢？其实可以考虑小时候一个挺常见的方案，就是小时候，咱们准备一张小小的卡片，你只要签到就打上一个勾，我最后判断你是否签到，其实只需要到小卡片上看一看就知道了"}]},{"ID":"20241016212753-dau4wpq","Type":"NodeParagraph","Properties":{"id":"20241016212753-dau4wpq","updated":"20241016212753"},"Children":[{"Type":"NodeText","Data":"我们可以采用类似这样的方案来实现我们的签到需求。"}]},{"ID":"20241016212754-c8v8q4v","Type":"NodeParagraph","Properties":{"id":"20241016212754-c8v8q4v","updated":"20241016212754"},"Children":[{"Type":"NodeText","Data":"我们按月来统计用户签到信息，签到记录为1，未签到则记录为0."}]},{"ID":"20241016212755-naqa0q8","Type":"NodeParagraph","Properties":{"id":"20241016212755-naqa0q8","updated":"20241016212755"},"Children":[{"Type":"NodeText","Data":"把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。这样我们就用极小的空间，来实现了大量数据的表示"}]},{"ID":"20241016212756-33vo3ck","Type":"NodeParagraph","Properties":{"id":"20241016212756-33vo3ck","updated":"20241016212756"},"Children":[{"Type":"NodeText","Data":"Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。"}]},{"ID":"20241016212757-86r5udr","Type":"NodeParagraph","Properties":{"id":"20241016212757-86r5udr","updated":"20241016212757"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653824498278","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653824498278-20241016213637-okyflj8.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212758-v1u0ift","Type":"NodeParagraph","Properties":{"id":"20241016212758-v1u0ift","updated":"20241016212758"},"Children":[{"Type":"NodeText","Data":"BitMap的操作命令有："}]},{"ID":"20241016212759-rf91pux","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212759-rf91pux","updated":"20241016212759"},"Children":[{"ID":"20241016212760-w0s46sn","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212760-w0s46sn","updated":"20241016212760"},"Children":[{"ID":"20241016212761-pzca1o6","Type":"NodeParagraph","Properties":{"id":"20241016212761-pzca1o6","updated":"20241016212761"},"Children":[{"Type":"NodeText","Data":"SETBIT：向指定位置（offset）存入一个0或1"}]}]},{"ID":"20241016212762-7tl8wfr","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212762-7tl8wfr","updated":"20241016212762"},"Children":[{"ID":"20241016212763-vsrj8eq","Type":"NodeParagraph","Properties":{"id":"20241016212763-vsrj8eq","updated":"20241016212763"},"Children":[{"Type":"NodeText","Data":"GETBIT ：获取指定位置（offset）的bit值"}]}]},{"ID":"20241016212764-bx5oaiw","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212764-bx5oaiw","updated":"20241016212764"},"Children":[{"ID":"20241016212765-8mx20rj","Type":"NodeParagraph","Properties":{"id":"20241016212765-8mx20rj","updated":"20241016212765"},"Children":[{"Type":"NodeText","Data":"BITCOUNT ：统计BitMap中值为1的bit位的数量"}]}]},{"ID":"20241016212766-op4rpgh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212766-op4rpgh","updated":"20241016212766"},"Children":[{"ID":"20241016212767-zn0bt6c","Type":"NodeParagraph","Properties":{"id":"20241016212767-zn0bt6c","updated":"20241016212767"},"Children":[{"Type":"NodeText","Data":"BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值"}]}]},{"ID":"20241016212768-kdxwe7x","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212768-kdxwe7x","updated":"20241016212768"},"Children":[{"ID":"20241016212769-0ko8fnr","Type":"NodeParagraph","Properties":{"id":"20241016212769-0ko8fnr","updated":"20241016212769"},"Children":[{"Type":"NodeText","Data":"BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回"}]}]},{"ID":"20241016212770-uaghd0f","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212770-uaghd0f","updated":"20241016212770"},"Children":[{"ID":"20241016212771-9th3on0","Type":"NodeParagraph","Properties":{"id":"20241016212771-9th3on0","updated":"20241016212771"},"Children":[{"Type":"NodeText","Data":"BITOP ：将多个BitMap的结果做位运算（与 、或、异或）"}]}]},{"ID":"20241016212772-u21wix8","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212772-u21wix8","updated":"20241016212772"},"Children":[{"ID":"20241016212773-xr06rjq","Type":"NodeParagraph","Properties":{"id":"20241016212773-xr06rjq","updated":"20241016212773"},"Children":[{"Type":"NodeText","Data":"BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置"}]}]}]},{"ID":"20241016212774-eo3n2te","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016212774-eo3n2te","updated":"20241016212774"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"11.2 、用户签到-实现签到功能"}]},{"ID":"20241016212775-r5trd5d","Type":"NodeParagraph","Properties":{"id":"20241016212775-r5trd5d","updated":"20241016212775"},"Children":[{"Type":"NodeText","Data":"需求：实现签到接口，将当前用户当天签到信息保存到Redis中"}]},{"ID":"20241016212776-bd33vro","Type":"NodeParagraph","Properties":{"id":"20241016212776-bd33vro","updated":"20241016212776"},"Children":[{"Type":"NodeText","Data":"思路：我们可以把年和月作为bitMap的key，然后保存到一个bitMap中，每次签到就到对应的位上把数字从0变成1，只要对应是1，就表明说明这一天已经签到了，反之则没有签到。"}]},{"ID":"20241016212777-35au7p9","Type":"NodeParagraph","Properties":{"id":"20241016212777-35au7p9","updated":"20241016212777"},"Children":[{"Type":"NodeText","Data":"我们通过接口文档发现，此接口并没有传递任何的参数，没有参数怎么确实是哪一天签到呢？这个很容易，可以通过后台代码直接获取即可，然后到对应的地址上去修改bitMap。"}]},{"ID":"20241016212778-3jo2skp","Type":"NodeParagraph","Properties":{"id":"20241016212778-3jo2skp","updated":"20241016212778"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653833970361","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653833970361-20241016213637-0bhr9sb.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212779-b7sx3gt","Type":"NodeParagraph","Properties":{"id":"20241016212779-b7sx3gt","updated":"20241016212779"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"代码"}]},{"ID":"20241016212780-mynx7n4","Type":"NodeParagraph","Properties":{"id":"20241016212780-mynx7n4","updated":"20241016212780"},"Children":[{"Type":"NodeText","Data":"UserController"}]},{"ID":"20241016212781-750hjzw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212781-750hjzw","updated":"20241016212781"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":" @PostMapping(\"/sign\")\n public Result sign(){\n    return userService.sign();\n }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212782-vb3ln9r","Type":"NodeParagraph","Properties":{"id":"20241016212782-vb3ln9r","updated":"20241016212782"},"Children":[{"Type":"NodeText","Data":"UserServiceImpl"}]},{"ID":"20241016212783-f5g1ipo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212783-f5g1ipo","updated":"20241016212783"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result sign() {\n    // 1.获取当前登录用户\n    Long userId = UserHolder.getUser().getId();\n    // 2.获取日期\n    LocalDateTime now = LocalDateTime.now();\n    // 3.拼接key\n    String keySuffix = now.format(DateTimeFormatter.ofPattern(\":yyyyMM\"));\n    String key = USER_SIGN_KEY + userId + keySuffix;\n    // 4.获取今天是本月的第几天\n    int dayOfMonth = now.getDayOfMonth();\n    // 5.写入Redis SETBIT key offset 1\n    stringRedisTemplate.opsForValue().setBit(key, dayOfMonth - 1, true);\n    return Result.ok();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212784-5x7a2hq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016212784-5x7a2hq","updated":"20241016212784"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"11.3 用户签到-签到统计"}]},{"ID":"20241016212785-dliourt","Type":"NodeParagraph","Properties":{"id":"20241016212785-dliourt","updated":"20241016212785"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"问题1："},{"Type":"NodeText","Data":"什么叫做连续签到天数？"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数。"}]},{"ID":"20241016212786-eho4skh","Type":"NodeParagraph","Properties":{"id":"20241016212786-eho4skh","updated":"20241016212786"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653834455899","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653834455899-20241016213637-l73uaz6.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212787-16nil7t","Type":"NodeParagraph","Properties":{"id":"20241016212787-16nil7t","updated":"20241016212787"},"Children":[{"Type":"NodeText","Data":"Java逻辑代码：获得当前这个月的最后一次签到数据，定义一个计数器，然后不停的向前统计，直到获得第一个非0的数字即可，每得到一个非0的数字计数器+1，直到遍历完所有的数据，就可以获得当前月的签到总天数了"}]},{"ID":"20241016212788-c8mgoib","Type":"NodeParagraph","Properties":{"id":"20241016212788-c8mgoib","updated":"20241016212788"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"问题2："},{"Type":"NodeText","Data":"如何得到本月到今天为止的所有签到数据？"}]},{"ID":"20241016212789-t5qtiq2","Type":"NodeParagraph","Properties":{"id":"20241016212789-t5qtiq2","updated":"20241016212789"},"Children":[{"Type":"NodeText","Data":"BITFIELD key GET u[dayOfMonth] 0"}]},{"ID":"20241016212790-ljxfxgg","Type":"NodeParagraph","Properties":{"id":"20241016212790-ljxfxgg","updated":"20241016212790"},"Children":[{"Type":"NodeText","Data":"假设今天是10号，那么我们就可以从当前月的第一天开始，获得到当前这一天的位数，是10号，那么就是10位，去拿这段时间的数据，就能拿到所有的数据了，那么这10天里边签到了多少次呢？统计有多少个1即可。"}]},{"ID":"20241016212791-eec2u7o","Type":"NodeParagraph","Properties":{"id":"20241016212791-eec2u7o","updated":"20241016212791"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"问题3：如何从后向前遍历每个bit位？"}]},{"ID":"20241016212792-s6tb4rw","Type":"NodeParagraph","Properties":{"id":"20241016212792-s6tb4rw","updated":"20241016212792"},"Children":[{"Type":"NodeText","Data":"注意：bitMap返回的数据是10进制，哪假如说返回一个数字8，那么我哪儿知道到底哪些是0，哪些是1呢？我们只需要让得到的10进制数字和1做与运算就可以了，因为1只有遇见1 才是1，其他数字都是0 ，我们把签到结果和1进行与操作，每与一次，就把签到结果向右移动一位，依次内推，我们就能完成逐个遍历的效果了。"}]},{"ID":"20241016212793-t8smlzk","Type":"NodeParagraph","Properties":{"id":"20241016212793-t8smlzk","updated":"20241016212793"},"Children":[{"Type":"NodeText","Data":"需求：实现下面接口，统计当前用户截止当前时间在本月的连续签到天数"}]},{"ID":"20241016212794-91curnq","Type":"NodeParagraph","Properties":{"id":"20241016212794-91curnq","updated":"20241016212794"},"Children":[{"Type":"NodeText","Data":"有用户有时间我们就可以组织出对应的key，此时就能找到这个用户截止这天的所有签到记录，再根据这套算法，就能统计出来他连续签到的次数了"}]},{"ID":"20241016212795-9vq6off","Type":"NodeParagraph","Properties":{"id":"20241016212795-9vq6off","updated":"20241016212795"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653835784444","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653835784444-20241016213637-w8unogm.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212796-ch1mlqq","Type":"NodeParagraph","Properties":{"id":"20241016212796-ch1mlqq","updated":"20241016212796"},"Children":[{"Type":"NodeText","Data":"代码"}]},{"ID":"20241016212797-0ngeq6m","Type":"NodeParagraph","Properties":{"id":"20241016212797-0ngeq6m","updated":"20241016212797"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"UserController"}]},{"ID":"20241016212798-iybkiyw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212798-iybkiyw","updated":"20241016212798"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@GetMapping(\"/sign/count\")\npublic Result signCount(){\n    return userService.signCount();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212799-suh2zit","Type":"NodeParagraph","Properties":{"id":"20241016212799-suh2zit","updated":"20241016212799"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"UserServiceImpl"}]},{"ID":"20241016212800-o8kdbgp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241016212800-o8kdbgp","updated":"20241016212800"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic Result signCount() {\n    // 1.获取当前登录用户\n    Long userId = UserHolder.getUser().getId();\n    // 2.获取日期\n    LocalDateTime now = LocalDateTime.now();\n    // 3.拼接key\n    String keySuffix = now.format(DateTimeFormatter.ofPattern(\":yyyyMM\"));\n    String key = USER_SIGN_KEY + userId + keySuffix;\n    // 4.获取今天是本月的第几天\n    int dayOfMonth = now.getDayOfMonth();\n    // 5.获取本月截止今天为止的所有的签到记录，返回的是一个十进制的数字 BITFIELD sign:5:202203 GET u14 0\n    List\u003cLong\u003e result = stringRedisTemplate.opsForValue().bitField(\n            key,\n            BitFieldSubCommands.create()\n                    .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(0)\n    );\n    if (result == null || result.isEmpty()) {\n        // 没有任何签到结果\n        return Result.ok(0);\n    }\n    Long num = result.get(0);\n    if (num == null || num == 0) {\n        return Result.ok(0);\n    }\n    // 6.循环遍历\n    int count = 0;\n    while (true) {\n        // 6.1.让这个数字与1做与运算，得到数字的最后一个bit位  // 判断这个bit位是否为0\n        if ((num \u0026 1) == 0) {\n            // 如果为0，说明未签到，结束\n            break;\n        }else {\n            // 如果不为0，说明已签到，计数器+1\n            count++;\n        }\n        // 把数字右移一位，抛弃最后一个bit位，继续下一个bit位\n        num \u003e\u003e\u003e= 1;\n    }\n    return Result.ok(count);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241016212801-bkrg951","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016212801-bkrg951","updated":"20241016212801"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"11.4 额外加餐-关于使用bitmap来解决缓存穿透的方案"}]},{"ID":"20241016212802-6z2a9hy","Type":"NodeParagraph","Properties":{"id":"20241016212802-6z2a9hy","updated":"20241016212802"},"Children":[{"Type":"NodeText","Data":"回顾"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存穿透"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016212803-aksfdrr","Type":"NodeParagraph","Properties":{"id":"20241016212803-aksfdrr","updated":"20241016212803"},"Children":[{"Type":"NodeText","Data":"发起了一个数据库不存在的，redis里边也不存在的数据，通常你可以把他看成一个攻击"}]},{"ID":"20241016212804-3yqlph8","Type":"NodeParagraph","Properties":{"id":"20241016212804-3yqlph8","updated":"20241016212804"},"Children":[{"Type":"NodeText","Data":"解决方案："}]},{"ID":"20241016212805-vd6oikg","Type":"NodeList","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212805-vd6oikg","updated":"20241016212805"},"Children":[{"ID":"20241016212806-n6rktrr","Type":"NodeListItem","Data":"*","ListData":{"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212806-n6rktrr","updated":"20241016212806"},"Children":[{"ID":"20241016212807-scr34jo","Type":"NodeParagraph","Properties":{"id":"20241016212807-scr34jo","updated":"20241016212807"},"Children":[{"Type":"NodeText","Data":"判断id\u003c0"}]}]},{"ID":"20241016212808-8f7coum","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212808-8f7coum","updated":"20241016212808"},"Children":[{"ID":"20241016212809-ao08sp8","Type":"NodeParagraph","Properties":{"id":"20241016212809-ao08sp8","updated":"20241016212809"},"Children":[{"Type":"NodeText","Data":"如果数据库是空，那么就可以直接往redis里边把这个空数据缓存起来"}]}]}]},{"ID":"20241016212810-k6awjli","Type":"NodeParagraph","Properties":{"id":"20241016212810-k6awjli","updated":"20241016212810"},"Children":[{"Type":"NodeText","Data":"第一种解决方案：遇到的问题是如果用户访问的是id不存在的数据，则此时就无法生效"}]},{"ID":"20241016212811-8v5lidb","Type":"NodeParagraph","Properties":{"id":"20241016212811-8v5lidb","updated":"20241016212811"},"Children":[{"Type":"NodeText","Data":"第二种解决方案：遇到的问题是：如果是不同的id那就可以防止下次过来直击数据"}]},{"ID":"20241016212812-cdbc5f7","Type":"NodeParagraph","Properties":{"id":"20241016212812-cdbc5f7","updated":"20241016212812"},"Children":[{"Type":"NodeText","Data":"所以我们如何解决呢？"}]},{"ID":"20241016212813-lfawyhl","Type":"NodeParagraph","Properties":{"id":"20241016212813-lfawyhl","updated":"20241016212813"},"Children":[{"Type":"NodeText","Data":"我们可以将数据库的数据，所对应的id写入到一个list集合中，当用户过来访问的时候，我们直接去判断list中是否包含当前的要查询的数据，如果说用户要查询的id数据并不在list集合中，则直接返回，如果list中包含对应查询的id数据，则说明不是一次缓存穿透数据，则直接放行。"}]},{"ID":"20241016212814-shuews4","Type":"NodeParagraph","Properties":{"id":"20241016212814-shuews4","updated":"20241016212814"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653836416586","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653836416586-20241016213637-b16vq0p.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212815-4gsby8e","Type":"NodeParagraph","Properties":{"id":"20241016212815-4gsby8e","updated":"20241016212815"},"Children":[{"Type":"NodeText","Data":"现在的问题是这个主键其实并没有那么短，而是很长的一个 主键"}]},{"ID":"20241016212816-2pjeoxp","Type":"NodeParagraph","Properties":{"id":"20241016212816-2pjeoxp","updated":"20241016212816"},"Children":[{"Type":"NodeText","Data":"哪怕你单独去提取这个主键，但是在11年左右，淘宝的商品总量就已经超过10亿个"}]},{"ID":"20241016212817-zw1t8kk","Type":"NodeParagraph","Properties":{"id":"20241016212817-zw1t8kk","updated":"20241016212817"},"Children":[{"Type":"NodeText","Data":"所以如果采用以上方案，这个list也会很大，所以我们可以使用bitmap来减少list的存储空间"}]},{"ID":"20241016212818-qp84fln","Type":"NodeParagraph","Properties":{"id":"20241016212818-qp84fln","updated":"20241016212818"},"Children":[{"Type":"NodeText","Data":"我们可以把list数据抽象成一个非常大的bitmap，我们不再使用list，而是将db中的id数据利用哈希思想，比如："}]},{"ID":"20241016212819-rhui4q6","Type":"NodeParagraph","Properties":{"id":"20241016212819-rhui4q6","updated":"20241016212819"},"Children":[{"Type":"NodeText","Data":"id % bitmap.size  = 算出当前这个id对应应该落在bitmap的哪个索引上，然后将这个值从0变成1，然后当用户来查询数据时，此时已经没有了list，让用户用他查询的id去用相同的哈希算法， 算出来当前这个id应当落在bitmap的哪一位，然后判断这一位是0，还是1，如果是0则表明这一位上的数据一定不存在，  采用这种方式来处理，需要重点考虑一个事情，就是误差率，所谓的误差率就是指当发生哈希冲突的时候，产生的误差。"}]},{"ID":"20241016212820-ubdrpdl","Type":"NodeParagraph","Properties":{"id":"20241016212820-ubdrpdl","updated":"20241016212820"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653836578970","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653836578970-20241016213637-f22hw39.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212821-718ypt2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016212821-718ypt2","updated":"20241016212821"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"12、UV统计"}]},{"ID":"20241016212822-1zao2mi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212822-1zao2mi","updated":"20241016212822"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"12.1 、UV统计-HyperLogLog"}]},{"ID":"20241016212823-kv71w3e","Type":"NodeParagraph","Properties":{"id":"20241016212823-kv71w3e","updated":"20241016212823"},"Children":[{"Type":"NodeText","Data":"首先我们搞懂两个概念："}]},{"ID":"20241016212824-859nqtw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212824-859nqtw","updated":"20241016212824"},"Children":[{"ID":"20241016212825-pbe4fqh","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212825-pbe4fqh","updated":"20241016212825"},"Children":[{"ID":"20241016212826-onn97nr","Type":"NodeParagraph","Properties":{"id":"20241016212826-onn97nr","updated":"20241016212826"},"Children":[{"Type":"NodeText","Data":"UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。"}]}]},{"ID":"20241016212827-9plc7im","Type":"NodeListItem","Data":"*","ListData":{"Tight":true,"BulletChar":42,"Padding":2,"Marker":"Kg==","Num":-1},"Properties":{"id":"20241016212827-9plc7im","updated":"20241016212827"},"Children":[{"ID":"20241016212828-vdiakgj","Type":"NodeParagraph","Properties":{"id":"20241016212828-vdiakgj","updated":"20241016212828"},"Children":[{"Type":"NodeText","Data":"PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。"}]}]}]},{"ID":"20241016212829-asddn02","Type":"NodeParagraph","Properties":{"id":"20241016212829-asddn02","updated":"20241016212829"},"Children":[{"Type":"NodeText","Data":"通常来说UV会比PV大很多，所以衡量同一个网站的访问量，我们需要综合考虑很多因素，所以我们只是单纯的把这两个值作为一个参考值"}]},{"ID":"20241016212830-c4zm07v","Type":"NodeParagraph","Properties":{"id":"20241016212830-c4zm07v","updated":"20241016212830"},"Children":[{"Type":"NodeText","Data":"UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖，那怎么处理呢？"}]},{"ID":"20241016212831-hf3gxjz","Type":"NodeParagraph","Properties":{"id":"20241016212831-hf3gxjz","updated":"20241016212831"},"Children":[{"Type":"NodeText","Data":"Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考：https://juejin.cn/post/6844903785744056333#heading-0"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Redis中的HLL是基于string结构实现的，单个HLL的内存"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"永远小于16kb"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存占用低"},{"Type":"NodeText","Data":"的令人发指！作为代价，其测量结果是概率性的，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有小于0.81％的误差"},{"Type":"NodeText","Data":"。不过对于UV统计来说，这完全可以忽略。"}]},{"ID":"20241016212832-pzlq2fk","Type":"NodeParagraph","Properties":{"id":"20241016212832-pzlq2fk","updated":"20241016212832"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653837988985","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653837988985-20241016213637-kqfl9m2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212833-kkbhmbd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016212833-kkbhmbd","updated":"20241017155813"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"12.2 UV统计-测试百万数据的统计"}]},{"ID":"20241016212834-mk1uwqe","Type":"NodeParagraph","Properties":{"id":"20241016212834-mk1uwqe","updated":"20241016212834"},"Children":[{"Type":"NodeText","Data":"测试思路：我们直接利用单元测试，向HyperLogLog中添加100万条数据，看看内存占用和统计效果如何"}]},{"ID":"20241016212835-0xwx8dw","Type":"NodeParagraph","Properties":{"id":"20241016212835-0xwx8dw","updated":"20241016212835"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"1653838053608","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/1653838053608-20241016213637-hh5t0ek.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016212836-gkkk1f1","Type":"NodeParagraph","Properties":{"id":"20241016212836-gkkk1f1","updated":"20241016212836"},"Children":[{"Type":"NodeText","Data":"经过测试：我们会发生他的误差是在允许范围内，并且内存占用极小"}]},{"ID":"20241017155813-vlx17ma","Type":"NodeParagraph","Properties":{"id":"20241017155813-vlx17ma","updated":"20241017155813"}}]}