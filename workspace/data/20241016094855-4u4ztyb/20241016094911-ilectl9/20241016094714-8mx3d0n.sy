{"ID":"20241016094714-8mx3d0n","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241016094714-8mx3d0n","tags":"Redis/缓存雪崩,Redis/缓存击穿,Redis/缓存穿透","title":"缓存雪崩、击穿、穿透","title-img":"background-image:url(\u0026quot;assets/image-20240915174918932-20241016095018-ixpl9zi.png\u0026quot;)","type":"doc","updated":"20241016100931"},"Children":[{"ID":"20241016094715-dsmd7be","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016094715-dsmd7be","updated":"20241016094715"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"缓存穿透、击穿、雪崩"}]},{"ID":"20241016094716-ydf1ipv","Type":"NodeBlockquote","Properties":{"id":"20241016094716-ydf1ipv","updated":"20241016094716"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20241016094717-r0pxyry","Type":"NodeParagraph","Properties":{"id":"20241016094717-r0pxyry","updated":"20241016094717"},"Children":[{"Type":"NodeText","Data":"什么是分布式缓存系统中的缓存穿透、缓存击穿、缓存雪崩？"}]}]},{"ID":"20241016094718-0vyir7k","Type":"NodeParagraph","Properties":{"id":"20241016094718-0vyir7k","updated":"20241016094718"},"Children":[{"Type":"NodeText","Data":"在分布式缓存系统中，缓存穿透、缓存击穿和缓存雪崩是三种常见的缓存问题，都会对系统性能和稳定性造成影响。下面是它们的定义和应对方法："}]},{"ID":"20241016094719-68bns3u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094719-68bns3u","updated":"20241016094719"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存穿透（Cache Penetration）"}]},{"ID":"20241016094720-t09mda6","Type":"NodeParagraph","Properties":{"id":"20241016094720-t09mda6","updated":"20241016094720"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094721-oh4ukga","Type":"NodeParagraph","Properties":{"id":"20241016094721-oh4ukga","updated":"20241016094721"},"Children":[{"Type":"NodeText","Data":"缓存穿透是指"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"请求的数据在缓存中不存在，且在数据库中也不存在"},{"Type":"NodeText","Data":"。每次这样的请求都会绕过缓存，直接请求数据库，导致缓存失效，进而给"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"数据库带来大量无效查询"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241016094722-ln3xmjw","Type":"NodeParagraph","Properties":{"id":"20241016094722-ln3xmjw","updated":"20241016094722"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原因"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094723-6jyav84","Type":"NodeParagraph","Properties":{"id":"20241016094723-6jyav84","updated":"20241016094723"},"Children":[{"Type":"NodeText","Data":"一般由非法请求或恶意攻击引发，例如请求某些数据库中不存在的ID或键。"}]},{"ID":"20241016094724-3dviwde","Type":"NodeParagraph","Properties":{"id":"20241016094724-3dviwde","updated":"20241016094724"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决方案"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094725-iseefno","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094725-iseefno","updated":"20241016094725"},"Children":[{"ID":"20241016094726-o3nytvt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094726-o3nytvt","updated":"20241016094726"},"Children":[{"ID":"20241016094727-j56fnl9","Type":"NodeParagraph","Properties":{"id":"20241016094727-j56fnl9","updated":"20241016094727"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"布隆过滤器（Bloom Filter）"},{"Type":"NodeText","Data":"：在缓存层之前增加布隆过滤器，用于快速判断请求的数据是否在数据库中存在，如果不存在则直接返回，避免请求进入数据库。"}]}]},{"ID":"20241016094728-o9aydmk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094728-o9aydmk","updated":"20241016094728"},"Children":[{"ID":"20241016094729-amrez2f","Type":"NodeParagraph","Properties":{"id":"20241016094729-amrez2f","updated":"20241016094729"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存空值"},{"Type":"NodeText","Data":"：当某个请求在数据库中不存在时，可以将结果（如空值或标识符）也缓存起来，下次相同的请求时直接返回缓存的空值，而不是再次请求数据库。"}]}]}]},{"ID":"20241016094730-sx0hfg6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094730-sx0hfg6","updated":"20241016094730"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存击穿（Cache Breakdown）"}]},{"ID":"20241016094731-4lj36oi","Type":"NodeParagraph","Properties":{"id":"20241016094731-4lj36oi","updated":"20241016094731"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094732-r6jwsux","Type":"NodeParagraph","Properties":{"id":"20241016094732-r6jwsux","updated":"20241016094732"},"Children":[{"Type":"NodeText","Data":"缓存击穿是指一个热点数据（通常是某个非常热门的缓存数据）在某一时刻失效，大量请求同时到达，而该数据在数据库中是存在的，这会导致所有请求在缓存失效后同时去请求数据库，给数据库带来巨大的压力。"}]},{"ID":"20241016094733-ovvuuqt","Type":"NodeParagraph","Properties":{"id":"20241016094733-ovvuuqt","updated":"20241016094733"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原因"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094734-orzqkj1","Type":"NodeParagraph","Properties":{"id":"20241016094734-orzqkj1","updated":"20241016094734"},"Children":[{"Type":"NodeText","Data":"通常由于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"热点缓存过期"},{"Type":"NodeText","Data":"导致的短时间"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"大量请求直达数据库"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241016094735-rg47k3t","Type":"NodeParagraph","Properties":{"id":"20241016094735-rg47k3t","updated":"20241016094735"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决方案"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094736-ly5ver5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094736-ly5ver5","updated":"20241016094736"},"Children":[{"ID":"20241016094737-4ec2yi3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094737-4ec2yi3","updated":"20241016094737"},"Children":[{"ID":"20241016094738-8oewitj","Type":"NodeParagraph","Properties":{"id":"20241016094738-8oewitj","updated":"20241016094738"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"设置热点数据永不过期"},{"Type":"NodeText","Data":"：对那些非常热门的数据，可以考虑让它们在缓存中永不过期，或者主动更新缓存而不是依赖超时策略。"}]}]},{"ID":"20241016094739-ncpkliq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094739-ncpkliq","updated":"20241016094739"},"Children":[{"ID":"20241016094740-ysxeuh7","Type":"NodeParagraph","Properties":{"id":"20241016094740-ysxeuh7","updated":"20241016094740"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥锁（Mutex Lock）"},{"Type":"NodeText","Data":"：在缓存失效的情况下，使用分布式锁机制，防止多个线程同时去请求数据库。只有获取到锁的线程能够查询数据库并更新缓存，其它线程等待缓存更新完毕再读取缓存。"}]}]}]},{"ID":"20241016094741-4re8tsj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094741-4re8tsj","updated":"20241016094741"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存雪崩（Cache Avalanche）"}]},{"ID":"20241016094742-rnkk1dh","Type":"NodeParagraph","Properties":{"id":"20241016094742-rnkk1dh","updated":"20241016094742"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"定义"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094743-hlnbi9i","Type":"NodeParagraph","Properties":{"id":"20241016094743-hlnbi9i","updated":"20241016094743"},"Children":[{"Type":"NodeText","Data":"缓存雪崩是指大量缓存数据在同一时间过期，导致"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"缓存系统承载的流量骤然降低"},{"Type":"NodeText","Data":"，大量请求直接进入数据库，导致数据库压力剧增，甚至可能引发系统崩溃。"}]},{"ID":"20241016094744-z4mgar2","Type":"NodeParagraph","Properties":{"id":"20241016094744-z4mgar2","updated":"20241016094744"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"原因"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094745-uritzli","Type":"NodeParagraph","Properties":{"id":"20241016094745-uritzli","updated":"20241016094745"},"Children":[{"Type":"NodeText","Data":"一般由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"大量缓存设置了相同的过期时间"},{"Type":"NodeText","Data":"，或者因为系统故障导致缓存服务整体失效。"}]},{"ID":"20241016094746-p0uze5k","Type":"NodeParagraph","Properties":{"id":"20241016094746-p0uze5k","updated":"20241016094746"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决方案"},{"Type":"NodeText","Data":"："}]},{"ID":"20241016094747-3u8sbl8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094747-3u8sbl8","updated":"20241016094747"},"Children":[{"ID":"20241016094748-qqm2fks","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094748-qqm2fks","updated":"20241016094748"},"Children":[{"ID":"20241016094749-r419uey","Type":"NodeParagraph","Properties":{"id":"20241016094749-r419uey","updated":"20241016094749"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存过期时间随机化"},{"Type":"NodeText","Data":"：设置缓存数据的过期时间时，增加一定的随机值，避免大量缓存同时失效。"}]}]},{"ID":"20241016094750-4q3lzlp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094750-4q3lzlp","updated":"20241016094750"},"Children":[{"ID":"20241016094751-gbq5gxf","Type":"NodeParagraph","Properties":{"id":"20241016094751-gbq5gxf","updated":"20241016094751"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"二级缓存（Backup Cache）"},{"Type":"NodeText","Data":"：在一级缓存失效时，可以引入二级缓存，以缓解直接对数据库的压力。"}]}]},{"ID":"20241016094752-dxyvrqb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094752-dxyvrqb","updated":"20241016094752"},"Children":[{"ID":"20241016094753-wmjy52t","Type":"NodeParagraph","Properties":{"id":"20241016094753-wmjy52t","updated":"20241016094753"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"限流与降级策略"},{"Type":"NodeText","Data":"：在缓存雪崩时对请求进行限流，保证系统不至于崩溃，同时对于非核心服务可以进行降级处理，减少系统的压力。"}]}]}]},{"ID":"20241016094754-q2g0aw7","Type":"NodeParagraph","Properties":{"id":"20241016094754-q2g0aw7","updated":"20241016094754"},"Children":[{"Type":"NodeText","Data":"这些问题如果不加以处理，都会严重影响系统性能和可用性。通过合理设计缓存机制，结合缓存穿透、缓存击穿和缓存雪崩的解决方案，可以有效提升分布式缓存系统的稳定性和高效性。"}]},{"ID":"20241016094755-fffndpu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016094755-fffndpu","updated":"20241016100931"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结图"}]},{"ID":"20241016094756-wv0lygi","Type":"NodeParagraph","Properties":{"id":"20241016094756-wv0lygi","updated":"20241016100931"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20240915174918932"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240915174918932-20241016095018-ixpl9zi.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241016094757-3i28mhv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016094757-3i28mhv","updated":"20241016094757"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"知乎补充"}]},{"ID":"20241016094758-9iiaxbu","Type":"NodeBlockquote","Properties":{"id":"20241016094758-9iiaxbu","updated":"20241016094758"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20241016094759-5xuv0jo","Type":"NodeParagraph","Properties":{"id":"20241016094759-5xuv0jo","updated":"20241016094759"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/346651831","TextMarkTextContent":"什么是缓存雪崩、缓存击穿、缓存穿透？ - 知乎 (zhihu.com)"}]}]},{"ID":"20241016094760-v6pocl8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094760-v6pocl8","updated":"20241016094760"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"前言"}]},{"ID":"20241016094761-2tmwqcp","Type":"NodeParagraph","Properties":{"id":"20241016094761-2tmwqcp","updated":"20241016094761"},"Children":[{"Type":"NodeText","Data":"Redis作为目前使用最广泛的缓存，相信大家都不陌生。但是使用缓存并没有这么简单，还要考虑缓存雪崩，缓存击穿，缓存穿透的问题，什么是缓存雪崩，击穿，穿透呢，出现这些问题又怎么解决呢，接下来学习一下吧。"}]},{"ID":"20241016094762-p27q85w","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094762-p27q85w","updated":"20241016094762"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存雪崩"}]},{"ID":"20241016094763-1qjk7w4","Type":"NodeParagraph","Properties":{"id":"20241016094763-1qjk7w4","updated":"20241016094763"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是缓存雪崩？"}]},{"ID":"20241016094764-s0djyw6","Type":"NodeParagraph","Properties":{"id":"20241016094764-s0djyw6","updated":"20241016094764"},"Children":[{"Type":"NodeText","Data":"当某一个时刻出现大规模的缓存失效的情况，那么就会导致大量的请求直接打在数据库上面，导致数据库压力巨大，如果在高并发的情况下，可能瞬间就会导致数据库宕机。这时候如果运维马上又重启数据库，马上又会有新的流量把数据库打死。这就是缓存雪崩。"}]},{"ID":"20241016094765-sps1f4q","Type":"NodeParagraph","Properties":{"id":"20241016094765-sps1f4q","updated":"20241016094765"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/v2-1bbdadd362da2a83b77041fe1e567236_1440w-20241016095018-ea04icj.webp","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016094766-pbgvg1p","Type":"NodeParagraph","Properties":{"id":"20241016094766-pbgvg1p","updated":"20241016094766"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分析："}]},{"ID":"20241016094767-tygdpw3","Type":"NodeParagraph","Properties":{"id":"20241016094767-tygdpw3","updated":"20241016094767"},"Children":[{"Type":"NodeText","Data":"造成缓存雪崩的关键在于在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"同一时间大规模的key失效"},{"Type":"NodeText","Data":"。为什么会出现这个问题呢，有几种可能，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"第一种可能是Redis宕机"},{"Type":"NodeText","Data":"，第二种可能是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"采用了相同的过期时间"},{"Type":"NodeText","Data":"。搞清楚原因之后，那么有什么解决方案呢？"}]},{"ID":"20241016094768-k5vpd3v","Type":"NodeParagraph","Properties":{"id":"20241016094768-k5vpd3v","updated":"20241016094768"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决方案："}]},{"ID":"20241016094769-j4di4nk","Type":"NodeParagraph","Properties":{"id":"20241016094769-j4di4nk","updated":"20241016094769"},"Children":[{"Type":"NodeText","Data":"1、在原有的失效时间上加上一个随机值，比如1-5分钟随机。这样就避免了因为采用相同的过期时间导致的缓存雪崩。"}]},{"ID":"20241016094770-jkvzefo","Type":"NodeParagraph","Properties":{"id":"20241016094770-jkvzefo","updated":"20241016094770"},"Children":[{"Type":"NodeText","Data":"如果真的发生了缓存雪崩，有没有什么兜底的措施？"}]},{"ID":"20241016094771-jd0cxya","Type":"NodeParagraph","Properties":{"id":"20241016094771-jd0cxya","updated":"20241016094771"},"Children":[{"Type":"NodeText","Data":"2、使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"熔断机制"},{"Type":"NodeText","Data":"。当流量到达一定的阈值时，就直接返回“系统拥挤”之类的提示，防止过多的请求打在数据库上。至少能保证一部分用户是可以正常使用，其他用户多刷新几次也能得到结果。"}]},{"ID":"20241016094772-kkzlui4","Type":"NodeParagraph","Properties":{"id":"20241016094772-kkzlui4","updated":"20241016094772"},"Children":[{"Type":"NodeText","Data":"3、提高数据库的容灾能力，可以使用分库分表，读写分离的策略。"}]},{"ID":"20241016094773-f7i4rl7","Type":"NodeParagraph","Properties":{"id":"20241016094773-f7i4rl7","updated":"20241016094773"},"Children":[{"Type":"NodeText","Data":"4、为了防止Redis宕机导致缓存雪崩的问题，可以搭建Redis集群，提高Redis的容灾性。"}]},{"ID":"20241016094774-gozw7d1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094774-gozw7d1","updated":"20241016094774"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存击穿"}]},{"ID":"20241016094775-kxs4nc9","Type":"NodeParagraph","Properties":{"id":"20241016094775-kxs4nc9","updated":"20241016094775"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是缓存击穿？"}]},{"ID":"20241016094776-su5njxu","Type":"NodeParagraph","Properties":{"id":"20241016094776-su5njxu","updated":"20241016094776"},"Children":[{"Type":"NodeText","Data":"其实跟缓存雪崩有点类似，缓存雪崩是大规模的key失效，而缓存击穿是一个热点的Key，有大并发集中对其进行访问，突然间这个Key失效了，导致大并发全部打在数据库上，导致数据库压力剧增。这种现象就叫做缓存击穿。"}]},{"ID":"20241016094777-77z2psx","Type":"NodeParagraph","Properties":{"id":"20241016094777-77z2psx","updated":"20241016094777"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分析："}]},{"ID":"20241016094778-puupejr","Type":"NodeParagraph","Properties":{"id":"20241016094778-puupejr","updated":"20241016094778"},"Children":[{"Type":"NodeText","Data":"关键在于某个热点的key失效了，导致大并发集中打在数据库上。所以要从两个方面解决，第一是否可以考虑"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"热点key不设置过期时间"},{"Type":"NodeText","Data":"，第二是否可以考虑"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkTextContent":"降低打在数据库上的请求数量"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241016094779-nlvbgay","Type":"NodeParagraph","Properties":{"id":"20241016094779-nlvbgay","updated":"20241016094779"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决方案："}]},{"ID":"20241016094780-nwu421h","Type":"NodeParagraph","Properties":{"id":"20241016094780-nwu421h","updated":"20241016094780"},"Children":[{"Type":"NodeText","Data":"1、上面说过了，如果业务允许的话，对于热点的key可以设置永不过期的key。"}]},{"ID":"20241016094781-djpc6ml","Type":"NodeParagraph","Properties":{"id":"20241016094781-djpc6ml","updated":"20241016094781"},"Children":[{"Type":"NodeText","Data":"2、使用互斥锁。如果缓存失效的情况，只有拿到锁才可以查询数据库，降低了在同一时刻打在数据库上的请求，防止数据库打死。当然这样会导致系统的性能变差。"}]},{"ID":"20241016094782-cwqo0dn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094782-cwqo0dn","updated":"20241016094782"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存穿透"}]},{"ID":"20241016094783-s8hta5v","Type":"NodeParagraph","Properties":{"id":"20241016094783-s8hta5v","updated":"20241016094783"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是缓存穿透？"}]},{"ID":"20241016094784-burkui3","Type":"NodeParagraph","Properties":{"id":"20241016094784-burkui3","updated":"20241016094784"},"Children":[{"Type":"NodeText","Data":"我们使用Redis大部分情况都是通过Key查询对应的值，假如发送的请求传进来的key是不存在Redis中的，那么就查不到缓存，查不到缓存就会去数据库查询。假如有大量这样的请求，这些请求像“穿透”了缓存一样直接打在数据库上，这种现象就叫做缓存穿透。"}]},{"ID":"20241016094785-f0409ln","Type":"NodeParagraph","Properties":{"id":"20241016094785-f0409ln","updated":"20241016094785"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"分析："}]},{"ID":"20241016094786-fvovkwi","Type":"NodeParagraph","Properties":{"id":"20241016094786-fvovkwi","updated":"20241016094786"},"Children":[{"Type":"NodeText","Data":"关键在于在Redis查不到key值，这和缓存击穿有根本的区别，区别在于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存穿透的情况是传进来的key在Redis中是不存在的"},{"Type":"NodeText","Data":"。假如有黑客传进大量的不存在的key，那么大量的请求打在数据库上是很致命的问题，所以在日常开发中要对参数做好校验，一些非法的参数，不可能存在的key就直接返回错误提示，要对调用方保持这种“不信任”的心态。"}]},{"ID":"20241016094787-fysjl36","Type":"NodeParagraph","Properties":{"id":"20241016094787-fysjl36","updated":"20241016094787"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/v2-ba08c0076931750ec07a0a3411ec3cb9_1440w-20241016095018-05y47fk.webp","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016094788-faeywn0","Type":"NodeParagraph","Properties":{"id":"20241016094788-faeywn0","updated":"20241016094788"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决方案："}]},{"ID":"20241016094789-r88gigj","Type":"NodeParagraph","Properties":{"id":"20241016094789-r88gigj","updated":"20241016094789"},"Children":[{"Type":"NodeText","Data":"1、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"把无效的Key存进Redis中"},{"Type":"NodeText","Data":"。如果Redis查不到数据，数据库也查不到，我们把这个Key值保存进Redis，设置value=\"null\"，当下次再通过这个Key查询时就不需要再查询数据库。这种处理方式肯定是有问题的，假如传进来的这个不存在的Key值每次都是随机的，那存进Redis也没有意义。"}]},{"ID":"20241016094790-0j4b7cy","Type":"NodeParagraph","Properties":{"id":"20241016094790-0j4b7cy","updated":"20241016094790"},"Children":[{"Type":"NodeText","Data":"2、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用布隆过滤器"},{"Type":"NodeText","Data":"。布隆过滤器的作用是某个 key 不存在，那么就一定不存在，它说某个 key 存在，那么很大可能是存在(存在一定的误判率)。于是我们可以在缓存之前再加一层布隆过滤器，在查询的时候先去"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhida.zhihu.com/search?q=布隆过滤器\u0026zhida_source=entity\u0026is_preview=1","TextMarkTextContent":"布隆过滤器"},{"Type":"NodeText","Data":"查询 key 是否存在，如果不存在就直接返回。"}]},{"ID":"20241016094791-ltpf26j","Type":"NodeParagraph","Properties":{"id":"20241016094791-ltpf26j","updated":"20241016094791"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/v2-a498a2262f8f9c2d493f0209cdccd03f_1440w-20241016095018-205ntn2.webp","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241016094792-1gjn5i1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094792-1gjn5i1","updated":"20241016094792"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"熔断机制😄"}]},{"ID":"20241016094793-3ntkljp","Type":"NodeParagraph","Properties":{"id":"20241016094793-3ntkljp","updated":"20241016094793"},"Children":[{"Type":"NodeText","Data":"这三个问题在使用Redis的时候是肯定会遇到的，而且是非常致命性的问题，所以在日常开发中一定要注意，每次使用Redis时，都要对其保持严谨的态度。还有一个需要注意的是要做好熔断，一旦出现缓存雪崩，击穿，穿透这种情况，至少还有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://zhida.zhihu.com/search?q=熔断机制\u0026zhida_source=entity\u0026is_preview=1","TextMarkTextContent":"熔断机制"},{"Type":"NodeText","Data":"保护数据库不会被打死。"}]},{"ID":"20241016094794-7r8puhw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241016094794-7r8puhw","updated":"20241016094794"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"布隆过滤器"}]},{"ID":"20241016094795-dylmh62","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094795-dylmh62","updated":"20241016094795"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"概念"}]},{"ID":"20241016094796-1dygsqy","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094796-1dygsqy","updated":"20241016094796"},"Children":[{"ID":"20241016094797-pax05wb","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094797-pax05wb","updated":"20241016094797"},"Children":[{"ID":"20241016094798-wr3xapk","Type":"NodeParagraph","Properties":{"id":"20241016094798-wr3xapk","updated":"20241016094798"},"Children":[{"Type":"NodeText","Data":"布隆过滤器（Bloom Filter）是一种用于判断某个元素是否属于一个集合的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"空间高效"},{"Type":"NodeText","Data":"的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"概率型数据结构"},{"Type":"NodeText","Data":"。它由布隆（Burton Howard Bloom）在1970年提出，常用于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快速查找"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存有限"},{"Type":"NodeText","Data":"的场景中，比如数据库缓存系统、网络过滤、垃圾邮件检测等。"}]},{"ID":"20241016094799-0g2t3uf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094799-0g2t3uf","updated":"20241016094799"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"主要特点："}]},{"ID":"20241016094800-d7lqjqi","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094800-d7lqjqi","updated":"20241016094800"},"Children":[{"ID":"20241016094801-cvqhm9v","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094801-cvqhm9v","updated":"20241016094801"},"Children":[{"ID":"20241016094802-ttx1c1n","Type":"NodeParagraph","Properties":{"id":"20241016094802-ttx1c1n","updated":"20241016094802"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"空间效率高"},{"Type":"NodeText","Data":"：布隆过滤器利用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"一组哈希函数"},{"Type":"NodeText","Data":"对元素进行散列存储，因此相比于传统的集合或哈希表，它占用的空间要少得多。"}]}]},{"ID":"20241016094803-xs1e0ed","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241016094803-xs1e0ed","updated":"20241016094803"},"Children":[{"ID":"20241016094804-8shzjvs","Type":"NodeParagraph","Properties":{"id":"20241016094804-8shzjvs","updated":"20241016094804"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"允许假阳性"},{"Type":"NodeText","Data":"：布隆过滤器能"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"准确判断一个元素不在集合中，但在判断某个元素是否在集合中时，可能会有一定几率产生假阳性结果"},{"Type":"NodeText","Data":"（即：元素不在集合中，但布隆过滤器认为在集合中）。不会产生假阴性（即不会误判为元素不在集合中）。"}]}]},{"ID":"20241016094805-uzxsqy4","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241016094805-uzxsqy4","updated":"20241016094805"},"Children":[{"ID":"20241016094806-arf79w9","Type":"NodeParagraph","Properties":{"id":"20241016094806-arf79w9","updated":"20241016094806"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不可删除元素"},{"Type":"NodeText","Data":"：布隆过滤器一旦插入元素后，就"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"无法删除元素"},{"Type":"NodeText","Data":"，因为删除可能会导致误删其他元素。"}]}]},{"ID":"20241016094807-jyz6ahi","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20241016094807-jyz6ahi","updated":"20241016094807"},"Children":[{"ID":"20241016094808-t5n45zd","Type":"NodeParagraph","Properties":{"id":"20241016094808-t5n45zd","updated":"20241016094808"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"时间效率高"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"插入和查询"},{"Type":"NodeText","Data":"的时间复杂度都是常数级别的 O(1)，因为只需进行一系列的哈希操作。"}]}]}]},{"ID":"20241016094809-c7no0cx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094809-c7no0cx","updated":"20241016094809"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"工作原理："}]},{"ID":"20241016094810-od2q8rd","Type":"NodeParagraph","Properties":{"id":"20241016094810-od2q8rd","updated":"20241016094810"},"Children":[{"Type":"NodeText","Data":"布隆过滤器本质上是一个长度为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"m"},{"Type":"NodeText","Data":" 的位数组，所有位初始化为 0。它还需要使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 个独立的哈希函数，每个函数的输出范围都是 0 到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"m-1"},{"Type":"NodeText","Data":" 之间。"}]},{"ID":"20241016094811-6tloy72","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094811-6tloy72","updated":"20241016094811"},"Children":[{"ID":"20241016094812-0b4i6zg","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094812-0b4i6zg","updated":"20241016094812"},"Children":[{"ID":"20241016094813-acih6mw","Type":"NodeParagraph","Properties":{"id":"20241016094813-acih6mw","updated":"20241016094813"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"插入操作"},{"Type":"NodeText","Data":"：当插入一个元素时，布隆过滤器会对这个元素使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 个哈希函数，计算出 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 个位置，然后把这些位置上的位都置为 1。"}]}]},{"ID":"20241016094814-hjlv36o","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094814-hjlv36o","updated":"20241016094814"},"Children":[{"ID":"20241016094815-ty8zaxn","Type":"NodeParagraph","Properties":{"id":"20241016094815-ty8zaxn","updated":"20241016094815"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"查询操作"},{"Type":"NodeText","Data":"：要查询某个元素是否存在，布隆过滤器同样使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 个哈希函数计算出该元素对应的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 个位置。如果这些位置上的位"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"全部为 1"},{"Type":"NodeText","Data":"，那么该元素可能在集合中（有假阳性可能）；如果"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"至少有一个位置上的位为 0"},{"Type":"NodeText","Data":"，那么该元素一定不在集合中。"}]}]}]},{"ID":"20241016094816-pr5bvb0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094816-pr5bvb0","updated":"20241016094816"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"优缺点："}]},{"ID":"20241016094817-f1gbau2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016094817-f1gbau2","updated":"20241016094817"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"优点："}]},{"ID":"20241016094818-we8p47a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094818-we8p47a","updated":"20241016094818"},"Children":[{"ID":"20241016094819-dic45vi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094819-dic45vi","updated":"20241016094819"},"Children":[{"ID":"20241016094820-y4a861j","Type":"NodeParagraph","Properties":{"id":"20241016094820-y4a861j","updated":"20241016094820"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"节省空间"},{"Type":"NodeText","Data":"：布隆过滤器比普通的哈希表或集合要节省很多空间，特别是在需要处理大量数据时。"}]}]},{"ID":"20241016094821-hc1xsa9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094821-hc1xsa9","updated":"20241016094821"},"Children":[{"ID":"20241016094822-nlrnuhz","Type":"NodeParagraph","Properties":{"id":"20241016094822-nlrnuhz","updated":"20241016094822"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"快速查询"},{"Type":"NodeText","Data":"：由于只需要进行几次哈希计算，因此插入和查询操作的速度非常快。"}]}]}]},{"ID":"20241016094823-mvc1qso","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241016094823-mvc1qso","updated":"20241016094823"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点："}]},{"ID":"20241016094824-xtt9ijh","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094824-xtt9ijh","updated":"20241016094824"},"Children":[{"ID":"20241016094825-kycvaak","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094825-kycvaak","updated":"20241016094825"},"Children":[{"ID":"20241016094826-b948285","Type":"NodeParagraph","Properties":{"id":"20241016094826-b948285","updated":"20241016094826"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有假阳性率"},{"Type":"NodeText","Data":"：它无法确定一个元素是否真正存在，只能判断“可能存在”。"}]}]},{"ID":"20241016094827-3vym9yx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094827-3vym9yx","updated":"20241016094827"},"Children":[{"ID":"20241016094828-w78fsxx","Type":"NodeParagraph","Properties":{"id":"20241016094828-w78fsxx","updated":"20241016094828"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"无法删除元素"},{"Type":"NodeText","Data":"：标准的布隆过滤器不支持删除操作，因为删除可能会影响其他元素的查询。"}]}]}]},{"ID":"20241016094829-btvueja","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094829-btvueja","updated":"20241016094829"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用场景："}]},{"ID":"20241016094830-fbevact","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094830-fbevact","updated":"20241016094830"},"Children":[{"ID":"20241016094831-umzldjz","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094831-umzldjz","updated":"20241016094831"},"Children":[{"ID":"20241016094832-cmyvuew","Type":"NodeParagraph","Properties":{"id":"20241016094832-cmyvuew","updated":"20241016094832"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存系统"},{"Type":"NodeText","Data":"：布隆过滤器常用于缓存系统中，快速判断某个数据是否已经被缓存。如果布隆过滤器判断一个数据不在缓存中，那么可以直接查询数据库并缓存该数据。"}]}]},{"ID":"20241016094833-rgt1lrg","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241016094833-rgt1lrg","updated":"20241016094833"},"Children":[{"ID":"20241016094834-cx2yvmi","Type":"NodeParagraph","Properties":{"id":"20241016094834-cx2yvmi","updated":"20241016094834"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"网络过滤器"},{"Type":"NodeText","Data":"：可以用来快速过滤掉不需要处理的数据包，例如在路由器中用于垃圾流量过滤。"}]}]},{"ID":"20241016094835-ul3qqn8","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241016094835-ul3qqn8","updated":"20241016094835"},"Children":[{"ID":"20241016094836-wail9q8","Type":"NodeParagraph","Properties":{"id":"20241016094836-wail9q8","updated":"20241016094836"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数据库和存储系统"},{"Type":"NodeText","Data":"：例如在HBase或Cassandra等分布式数据库中，布隆过滤器用于减少磁盘IO操作，判断某个数据是否在某个存储块中。"}]}]},{"ID":"20241016094837-5j885c1","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20241016094837-5j885c1","updated":"20241016094837"},"Children":[{"ID":"20241016094838-gb9x8di","Type":"NodeParagraph","Properties":{"id":"20241016094838-gb9x8di","updated":"20241016094838"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"垃圾邮件检测"},{"Type":"NodeText","Data":"：在反垃圾邮件系统中，布隆过滤器可以用来快速检测邮件地址或域名是否在黑名单中。"}]}]}]},{"ID":"20241016094839-1826kca","Type":"NodeParagraph","Properties":{"id":"20241016094839-1826kca","updated":"20241016094839"},"Children":[{"Type":"NodeText","Data":"总的来说，布隆过滤器是一种非常实用的概率数据结构，在需要进行高效集合判断但又受限于存储空间时表现尤为出色。"}]}]}]},{"ID":"20241016094840-m0mp55n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094840-m0mp55n","updated":"20241016094840"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"哈希冲突"}]},{"ID":"20241016094841-00doa6s","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094841-00doa6s","updated":"20241016094841"},"Children":[{"ID":"20241016094842-jl5ukhf","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094842-jl5ukhf","updated":"20241016094842"},"Children":[{"ID":"20241016094843-e3l5851","Type":"NodeParagraph","Properties":{"id":"20241016094843-e3l5851","updated":"20241016094843"},"Children":[{"Type":"NodeText","Data":"这是因为布隆过滤器的设计存在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"哈希冲突"},{"Type":"NodeText","Data":"的可能性。虽然布隆过滤器使用了多个哈希函数将元素映射到多个位置上，但由于位数组的长度有限，不同的元素可能被哈希到同一个位置。具体来说，当我们使用多个哈希函数对不同的元素进行哈希映射时，可能会出现多个元素的哈希结果覆盖同一个或多个相同的位置。"}]},{"ID":"20241016094844-2eagsxd","Type":"NodeParagraph","Properties":{"id":"20241016094844-2eagsxd","updated":"20241016094844"},"Children":[{"Type":"NodeText","Data":"因此，当你查询某个元素时，如果布隆过滤器的所有相应位都为 1，不能完全保证这个元素确实存在于集合中。原因是这些位"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"可能不仅仅是由该元素的哈希函数设置为 1 的"},{"Type":"NodeText","Data":"，也可能是其他不同元素通过哈希函数设置成 1 的。这就是所谓的“假阳性”。"}]},{"ID":"20241016094845-i82parx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094845-i82parx","updated":"20241016094845"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进一步解释："}]},{"ID":"20241016094846-kjpvo3f","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094846-kjpvo3f","updated":"20241016094846"},"Children":[{"ID":"20241016094847-8jqwj7w","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094847-8jqwj7w","updated":"20241016094847"},"Children":[{"ID":"20241016094848-pa36wr6","Type":"NodeParagraph","Properties":{"id":"20241016094848-pa36wr6","updated":"20241016094848"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"哈希冲突"},{"Type":"NodeText","Data":"：即使你查询的元素从未被插入过，也有可能查询出的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 个位置上都已经被其他元素置为 1。布隆过滤器只记录位的状态，而不记录到底是哪些元素导致了这些位变成了 1。"}]}]},{"ID":"20241016094849-lu1maz9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094849-lu1maz9","updated":"20241016094849"},"Children":[{"ID":"20241016094850-vjjr9ps","Type":"NodeParagraph","Properties":{"id":"20241016094850-vjjr9ps","updated":"20241016094850"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"假阳性率"},{"Type":"NodeText","Data":"："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a strong","TextMarkTextContent":"假阳性率是随着插入元素的数量增加而增加的"},{"Type":"NodeText","Data":"，因为布隆过滤器的位数组有固定的长度，插入更多的元素时，更多的位会被设置为 1，从而增加了不同元素哈希到相同位置的概率。这意味着，即使一个元素不在集合中，它的哈希位置也可能因为其他元素已经填充而全为 1，导致判断错误。"}]}]}]},{"ID":"20241016094851-k194iyc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094851-k194iyc","updated":"20241016094851"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结："}]},{"ID":"20241016094852-9k4c2ie","Type":"NodeParagraph","Properties":{"id":"20241016094852-9k4c2ie","updated":"20241016094852"},"Children":[{"Type":"NodeText","Data":"当布隆过滤器查询到一个元素时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 个位置全部为 1 只能说明该元素"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"可能存在"},{"Type":"NodeText","Data":"于集合中，不能绝对确定，因为这些位有可能是由其他元素置为 1 的。这就是为什么布隆过滤器具有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"假阳性率"},{"Type":"NodeText","Data":"的原因。"}]}]}]},{"ID":"20241016094853-3kr3yqs","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094853-3kr3yqs","updated":"20241016095342"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"k"},{"Type":"NodeText","Data":" 值取多少合适"}]},{"ID":"20241016094854-gin237y","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094854-gin237y","updated":"20241016095334"},"Children":[{"ID":"20241016094855-a785wku","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094855-a785wku","updated":"20241016095334"},"Children":[{"ID":"20241016094856-zqap13s","Type":"NodeParagraph","Properties":{"id":"20241016094856-zqap13s","updated":"20241016094856"},"Children":[{"Type":"NodeText","Data":"布隆过滤器中哈希函数的数量 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 对过滤器的性能（特别是假阳性率）有很大的影响。选择一个合适的 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 值需要根据具体的应用场景和需求来决定。通常，"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 的选择是使得假阳性率最小化的那个值。"}]},{"ID":"20241016094857-xkcbyhd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094857-xkcbyhd","updated":"20241016094857"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"计算哈希函数数量 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":"的公式："}]},{"ID":"20241016094858-j00t56t","Type":"NodeParagraph","Properties":{"id":"20241016094858-j00t56t","updated":"20241016094858"},"Children":[{"Type":"NodeText","Data":"假设："}]},{"ID":"20241016094859-4fbx0ng","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094859-4fbx0ng","updated":"20241016094859"},"Children":[{"ID":"20241016094860-67yo6xn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094860-67yo6xn","updated":"20241016094860"},"Children":[{"ID":"20241016094861-c75q1r3","Type":"NodeParagraph","Properties":{"id":"20241016094861-c75q1r3","updated":"20241016094861"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"n"},{"Type":"NodeText","Data":" 是插入布隆过滤器的元素数量。"}]}]},{"ID":"20241016094862-46pk5bo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094862-46pk5bo","updated":"20241016094862"},"Children":[{"ID":"20241016094863-s63wixv","Type":"NodeParagraph","Properties":{"id":"20241016094863-s63wixv","updated":"20241016094863"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"m"},{"Type":"NodeText","Data":" 是布隆过滤器位数组的长度。"}]}]}]},{"ID":"20241016094864-p77edpl","Type":"NodeParagraph","Properties":{"id":"20241016094864-p77edpl","updated":"20241016094864"},"Children":[{"Type":"NodeText","Data":"最优的"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":"值可以通过以下公式计算："}]},{"ID":"20241016094865-b5oxzmw","Type":"NodeMathBlock","Properties":{"id":"20241016094865-b5oxzmw","updated":"20241016094865"},"Children":[{"Type":"NodeMathBlockOpenMarker","Properties":{"id":""}},{"Type":"NodeMathBlockContent","Data":"k = \\frac{m}{n} \\ln 2","Properties":{"id":""}},{"Type":"NodeMathBlockCloseMarker","Properties":{"id":""}}]},{"ID":"20241016094866-5wknerk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094866-5wknerk","updated":"20241016094866"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"公式推导："}]},{"ID":"20241016094867-gigmfh6","Type":"NodeParagraph","Properties":{"id":"20241016094867-gigmfh6","updated":"20241016094867"},"Children":[{"Type":"NodeText","Data":"这个公式的推导是基于使假阳性率达到最小的哈希函数个数的。"}]},{"ID":"20241016094868-7c8m62c","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094868-7c8m62c","updated":"20241016094868"},"Children":[{"ID":"20241016094869-vp4y3v7","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094869-vp4y3v7","updated":"20241016094869"},"Children":[{"ID":"20241016094870-1m0gykj","Type":"NodeParagraph","Properties":{"id":"20241016094870-1m0gykj","updated":"20241016094870"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"假阳性率 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"p"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":")"},{"Type":"NodeText","Data":"：假阳性率与位数组的长度 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"m"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 以及哈希函数个数 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 有以下关系："}]}]}]},{"ID":"20241016094871-9wj43jm","Type":"NodeMathBlock","Properties":{"id":"20241016094871-9wj43jm","updated":"20241016094871"},"Children":[{"Type":"NodeMathBlockOpenMarker","Properties":{"id":""}},{"Type":"NodeMathBlockContent","Data":"p \\approx \\left(1 - \\left(1 - \\frac{1}{m}\\right)^{kn}\\right)^k","Properties":{"id":""}},{"Type":"NodeMathBlockCloseMarker","Properties":{"id":""}}]},{"ID":"20241016094872-l7scywi","Type":"NodeParagraph","Properties":{"id":"20241016094872-l7scywi","updated":"20241016094872"},"Children":[{"Type":"NodeText","Data":"随着 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"m"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":"、"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"n"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 的变化，可以推导出最优的 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 使得假阳性率最小。"}]},{"ID":"20241016094873-6itl387","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094873-6itl387","updated":"20241016094873"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"实际应用中的选择："}]},{"ID":"20241016094874-safkntp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094874-safkntp","updated":"20241016094874"},"Children":[{"ID":"20241016094875-0ely076","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094875-0ely076","updated":"20241016094875"},"Children":[{"ID":"20241016094876-jqhvv3q","Type":"NodeParagraph","Properties":{"id":"20241016094876-jqhvv3q","updated":"20241016094876"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"空间与时间的权衡"},{"Type":"NodeText","Data":"：更多的哈希函数 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 会增加查询和插入时的计算量，但可以减少假阳性率。需要在准确度和性能之间找到一个平衡。"}]}]},{"ID":"20241016094877-atmzx41","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241016094877-atmzx41","updated":"20241016094877"},"Children":[{"ID":"20241016094878-hdaj9kg","Type":"NodeParagraph","Properties":{"id":"20241016094878-hdaj9kg","updated":"20241016094878"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"常见值"},{"Type":"NodeText","Data":"：在实际应用中，依据统计和经验，常常选择 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 值在 5 至 10 之间。例如，很多布隆过滤器应用选择6或7个哈希函数作为默认值。"}]}]},{"ID":"20241016094879-buhedzg","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241016094879-buhedzg","updated":"20241016094879"},"Children":[{"ID":"20241016094880-za5d53q","Type":"NodeParagraph","Properties":{"id":"20241016094880-za5d53q","updated":"20241016094880"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体需求"},{"Type":"NodeText","Data":"：如果准确性要求非常高，可以选择更大的参数。相反，如果对假阳性容忍度较高，则可以适当减少 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 的数量，以提高性能。"}]}]}]},{"ID":"20241016094881-ihqi7lj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094881-ihqi7lj","updated":"20241016095334"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"示例："}]},{"ID":"20241016094882-pwt20dk","Type":"NodeParagraph","Properties":{"id":"20241016094882-pwt20dk","updated":"20241016094882"},"Children":[{"Type":"NodeText","Data":"假设你有以下需求："}]},{"ID":"20241016094883-rk9cwtd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094883-rk9cwtd","updated":"20241016094883"},"Children":[{"ID":"20241016094884-mzdbctu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094884-mzdbctu","updated":"20241016094884"},"Children":[{"ID":"20241016094885-u65beul","Type":"NodeParagraph","Properties":{"id":"20241016094885-u65beul","updated":"20241016094885"},"Children":[{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"n = 1,000,000"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":"（你计划插入的元素数量）"}]}]},{"ID":"20241016094886-1izgpb9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241016094886-1izgpb9","updated":"20241016094886"},"Children":[{"ID":"20241016094887-gqtnkar","Type":"NodeParagraph","Properties":{"id":"20241016094887-gqtnkar","updated":"20241016094887"},"Children":[{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"m = 10,000,000"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":"（布隆过滤器的位数组长度）"}]}]}]},{"ID":"20241016094888-2hd2wj9","Type":"NodeParagraph","Properties":{"id":"20241016094888-2hd2wj9","updated":"20241016094888"},"Children":[{"Type":"NodeText","Data":"根据公式："}]},{"ID":"20241016094889-zamimdq","Type":"NodeMathBlock","Properties":{"id":"20241016094889-zamimdq","updated":"20241016095321"},"Children":[{"Type":"NodeMathBlockOpenMarker"},{"Type":"NodeMathBlockContent","Data":"k = \\frac{m}{n} \\ln 2 = \\frac{10,000,000}{1,000,000} \\ln 2 \\approx 6.93"},{"Type":"NodeMathBlockCloseMarker"}]},{"ID":"20241016094890-c60p1wa","Type":"NodeParagraph","Properties":{"id":"20241016094890-c60p1wa","updated":"20241016095334"},"Children":[{"Type":"NodeText","Data":"因此，你可以选择 "},{"Type":"NodeTextMark","TextMarkType":"inline-math","TextMarkInlineMathContent":"k = 7"},{"Type":"NodeText","Data":" 的哈希函数个数。"}]},{"ID":"20241016094891-w9tdki3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241016094891-w9tdki3","updated":"20241016094891"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"最佳实践："}]},{"ID":"20241016094892-ri8rt6a","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094892-ri8rt6a","updated":"20241016094892"},"Children":[{"ID":"20241016094893-lf343xm","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241016094893-lf343xm","updated":"20241016094893"},"Children":[{"ID":"20241016094894-fkot54q","Type":"NodeParagraph","Properties":{"id":"20241016094894-fkot54q","updated":"20241016094894"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"动态调整"},{"Type":"NodeText","Data":"：在一些动态场景中，比如元素数量可能大幅变化的情况，可以动态调整布隆过滤器的大小和哈希函数数量来保持性能。"}]}]},{"ID":"20241016094895-c15v46q","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241016094895-c15v46q","updated":"20241016094895"},"Children":[{"ID":"20241016094896-ryit2vh","Type":"NodeParagraph","Properties":{"id":"20241016094896-ryit2vh","updated":"20241016094896"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"模拟和测试"},{"Type":"NodeText","Data":"：在部署前，可以模拟和测试不同 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 值对假阳性率和性能的影响，从而选择最佳的参数。"}]}]}]},{"ID":"20241016094897-bherpis","Type":"NodeParagraph","Properties":{"id":"20241016094897-bherpis","updated":"20241016094897"},"Children":[{"Type":"NodeText","Data":"总之，选择正确的 "},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"(","Properties":{"id":""}}]},{"Type":"NodeText","Data":"k"},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":")","Properties":{"id":""}}]},{"Type":"NodeText","Data":" 值需要结合具体的使用场景和要求进行调整和测试，以达到最佳的性能和准确性。"}]}]}]},{"ID":"20241016095342-cna4pky","Type":"NodeParagraph","Properties":{"id":"20241016095342-cna4pky","updated":"20241016095342"}}]}