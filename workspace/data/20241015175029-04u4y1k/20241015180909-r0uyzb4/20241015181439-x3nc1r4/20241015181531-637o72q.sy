{"ID":"20241015181531-637o72q","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241015181531-637o72q","title":"foreach循环","type":"doc","updated":"20241015182252"},"Children":[{"ID":"20241015181614-goo8xaj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241015181614-goo8xaj","updated":"20241015182339"},"Children":[{"Type":"NodeText","Data":"在forEach循环中使用方法"}]},{"ID":"20241015181614-ftef8th","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015181614-ftef8th","updated":"20241015182339"},"Children":[{"Type":"NodeText","Data":"使用lambda"}]},{"ID":"20241015181614-uouveog","Type":"NodeParagraph","Properties":{"id":"20241015181614-uouveog","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"你能讲讲Java中的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"forEach"},{"Type":"NodeText","Data":"​循环吗？例如我有一个容器"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"List\u0026lt;Blog\u0026gt; records"},{"Type":"NodeText","Data":"​，你能讲讲"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"records.forEach"},{"Type":"NodeText","Data":"​的用法吗？"}]},{"ID":"20241015181614-o299t63","Type":"NodeList","ListData":{},"Properties":{"id":"20241015181614-o299t63","updated":"20241015182339"},"Children":[{"ID":"20241015181614-b15ymms","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241015181614-b15ymms","updated":"20241015182339"},"Children":[{"ID":"20241015181614-z1iuw3x","Type":"NodeParagraph","Properties":{"id":"20241015181614-z1iuw3x","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"当然可以！在Java中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"forEach"},{"Type":"NodeText","Data":"​方法是从Java 8开始引入的，属于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"java.lang.Iterable"},{"Type":"NodeText","Data":"​接口的一部分。它提供了一种简洁的方式来遍历集合中的所有元素。\n假设你有一个容器"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"List\u0026lt;Blog\u0026gt; records"},{"Type":"NodeText","Data":"​，你可以使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"forEach"},{"Type":"NodeText","Data":"​方法来遍历这个列表，并对每个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Blog"},{"Type":"NodeText","Data":"​对象执行某些操作。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"forEach"},{"Type":"NodeText","Data":"​方法需要一个实现了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":"​接口的lambda表达式作为参数。\n以下是一个简单的例子："}]},{"ID":"20241015181614-86sf7wc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241015181614-86sf7wc","updated":"20241015182339"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import java.util.List;\nimport java.util.ArrayList;\n\nclass Blog {\n    private String title;\n    private String content;\n\n    public Blog(String title, String content) {\n        this.title = title;\n        this.content = content;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List\u003cBlog\u003e records = new ArrayList\u003c\u003e();\n        records.add(new Blog(\"Java Basics\", \"Content about Java Basics\"));\n        records.add(new Blog(\"Advanced Java\", \"Content about Advanced Java\"));\n\n        // 使用 forEach 方法遍历博客列表\n        records.forEach(blog -\u003e {\n            System.out.println(\"Title: \" + blog.getTitle());\n            System.out.println(\"Content: \" + blog.getContent());\n        });\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241015181614-iy6lbti","Type":"NodeParagraph","Properties":{"id":"20241015181614-iy6lbti","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"在上述代码中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"records.forEach"},{"Type":"NodeText","Data":"​方法会对列表中每一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Blog"},{"Type":"NodeText","Data":"​对象执行lambda表达式中的操作。具体来说，这个lambda表达式做了以下事情："}]},{"ID":"20241015181614-6yyaw8r","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241015181614-6yyaw8r","updated":"20241015181614"},"Children":[{"ID":"20241015181614-hwy26r7","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241015181614-hwy26r7","updated":"20241015181614"},"Children":[{"ID":"20241015181614-93ix14n","Type":"NodeParagraph","Properties":{"id":"20241015181614-93ix14n","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"遍历"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"records"},{"Type":"NodeText","Data":"​中的每一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Blog"},{"Type":"NodeText","Data":"​对象。"}]}]},{"ID":"20241015181614-3xzc40f","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241015181614-3xzc40f","updated":"20241015181614"},"Children":[{"ID":"20241015181614-0o8iv7g","Type":"NodeParagraph","Properties":{"id":"20241015181614-0o8iv7g","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"对于每一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Blog"},{"Type":"NodeText","Data":"​对象，调用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getTitle()"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getContent()"},{"Type":"NodeText","Data":"​方法。"}]}]},{"ID":"20241015181614-gyuuijl","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241015181614-gyuuijl","updated":"20241015181614"},"Children":[{"ID":"20241015181614-v2edd9h","Type":"NodeParagraph","Properties":{"id":"20241015181614-v2edd9h","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"将标题和内容打印到控制台。"}]}]}]},{"ID":"20241015181614-wdtexfc","Type":"NodeParagraph","Properties":{"id":"20241015181614-wdtexfc","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"这种用法简化了传统的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"for"},{"Type":"NodeText","Data":"​循环，使代码更为简洁和易读。此外，由于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"forEach"},{"Type":"NodeText","Data":"​接受lambda表达式，因此它可以很容易地结合Java 8流（Stream）API使用，进一步增强代码的灵活性和可读性。\n如果你需要对列表中的元素进行复杂操作，也可以将lambda表达式替换为方法引用或定义为单独的方法。"}]}]}]},{"ID":"20241015181631-xl57aqv","Type":"NodeParagraph","Properties":{"id":"20241015181631-xl57aqv","updated":"20241015181631"}},{"ID":"20241015181614-pq49vw7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015181614-pq49vw7","updated":"20241015182252"},"Children":[{"Type":"NodeText","Data":"使用普通方法"}]},{"ID":"20241015181614-36n0236","Type":"NodeParagraph","Properties":{"id":"20241015181614-36n0236","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"那么如何将将lambda表达式替换为方法引用或定义为单独的方法呢？你能演示一下吗？"}]},{"ID":"20241015181614-y3jfwod","Type":"NodeList","ListData":{},"Properties":{"id":"20241015181614-y3jfwod","updated":"20241015182252"},"Children":[{"ID":"20241015181614-hzch9fv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241015181614-hzch9fv","updated":"20241015182252"},"Children":[{"ID":"20241015181614-0n46d2j","Type":"NodeParagraph","Properties":{"id":"20241015181614-0n46d2j","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"当然可以！在Java中，方法引用是lambda表达式的简洁形式，能够使代码更加清晰。如果你有一个符合特定签名的方法，可以使用方法引用。\n首先，我们来看如何将lambda表达式替换为方法引用。假设我们还是使用之前的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Blog"},{"Type":"NodeText","Data":"​类和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"List\u0026lt;Blog\u0026gt; records"},{"Type":"NodeText","Data":"​，我们可以这样做："}]},{"ID":"20241015181614-5s8augm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015181614-5s8augm","updated":"20241015182156"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用方法引用"}]},{"ID":"20241015181614-96wgp22","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241015181614-96wgp22","updated":"20241015182324"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"SmF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import java.util.List;\nimport java.util.ArrayList;\n\nclass Blog {\n    private String title;\n    private String content;\n\n    public Blog(String title, String content) {\n        this.title = title;\n        this.content = content;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List\u003cBlog\u003e records = new ArrayList\u003c\u003e();\n        records.add(new Blog(\"Java Basics\", \"Content about Java Basics\"));\n        records.add(new Blog(\"Advanced Java\", \"Content about Advanced Java\"));\n\n        // 使用方法引用\n        records.forEach(Main::printBlog);\n    }\n\n    // 定义一个静态方法供方法引用使用\n    public static void printBlog(Blog blog) {\n        System.out.println(\"Title: \" + blog.getTitle());\n        System.out.println(\"Content: \" + blog.getContent());\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241015181614-ukc6iss","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015181614-ukc6iss","updated":"20241015182252"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"将lambda表达式定义为单独的方法"}]},{"ID":"20241015181614-tlnxvas","Type":"NodeParagraph","Properties":{"id":"20241015181614-tlnxvas","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"对于较复杂的操作，你也可以将逻辑封装到单独的方法中，并使用此方法："}]},{"ID":"20241015181614-4i8eo5z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241015181614-4i8eo5z","updated":"20241015182329"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import java.util.List;\nimport java.util.ArrayList;\n\nclass Blog {\n    private String title;\n    private String content;\n\n    public Blog(String title, String content) {\n        this.title = title;\n        this.content = content;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List\u003cBlog\u003e records = new ArrayList\u003c\u003e();\n        records.add(new Blog(\"Java Basics\", \"Content about Java Basics\"));\n        records.add(new Blog(\"Advanced Java\", \"Content about Advanced Java\"));\n\n        // 使用单独的方法\n        records.forEach(blog -\u003e printBlogDetails(blog));\n        // 在同一个类中的方法还可以用this\n        records.forEach(this::printBlogDetails);\n    }\n\n    // 定义一个方法以打印博客细节\n    private static void printBlogDetails(Blog blog) {\n        System.out.println(\"Title: \" + blog.getTitle());\n        System.out.println(\"Content: \" + blog.getContent());\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241015181614-lvj68tf","Type":"NodeParagraph","Properties":{"id":"20241015181614-lvj68tf","updated":"20241015181614"},"Children":[{"Type":"NodeText","Data":"在这两个例子中，我们分离了打印博客细节的逻辑，使代码更加模块化和易于维护。使用方法引用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Main::printBlog"},{"Type":"NodeText","Data":"​可以使代码更简洁，而直接调用单独定义的方法"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"printBlogDetails"},{"Type":"NodeText","Data":"​在某些情况下也有助于复杂逻辑的处理和调试。"}]}]}]},{"ID":"20241015182331-0ko4pco","Type":"NodeParagraph","Properties":{"id":"20241015182331-0ko4pco","updated":"20241015182331"}}]}