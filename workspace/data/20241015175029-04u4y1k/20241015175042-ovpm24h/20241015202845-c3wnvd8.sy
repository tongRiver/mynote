{"ID":"20241015202845-c3wnvd8","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241015202845-c3wnvd8","title":"初识Springboot依赖注入和控制反转(IoC)","type":"doc","updated":"20241015234215"},"Children":[{"ID":"20241015202846-uv8p6az","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241015202846-uv8p6az","updated":"20241015202846"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"三种依赖注入的方式"}]},{"ID":"20241015202847-l2gvcis","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015202847-l2gvcis","updated":"20241015202847"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注入单个依赖对象"}]},{"ID":"20241015202848-r80zxix","Type":"NodeParagraph","Properties":{"id":"20241015202848-r80zxix","updated":"20241015202848"},"Children":[{"Type":"NodeText","Data":"Spring Boot 中有三种常见的依赖注入方式："}]},{"ID":"20241015202849-btq9u2y","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202849-btq9u2y","updated":"20241015202849"},"Children":[{"ID":"20241015202850-dyh4vpx","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202850-dyh4vpx","updated":"20241015202850"},"Children":[{"ID":"20241015202851-gl53t7e","Type":"NodeParagraph","Properties":{"id":"20241015202851-gl53t7e","updated":"20241015202851"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"构造函数注入（Constructor Injection）"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202852-5pckhlb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202852-5pckhlb","updated":"20241015202852"},"Children":[{"ID":"20241015202853-m3qt8ud","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202853-m3qt8ud","updated":"20241015202853"},"Children":[{"ID":"20241015202854-qutich9","Type":"NodeParagraph","Properties":{"id":"20241015202854-qutich9","updated":"20241015202854"},"Children":[{"Type":"NodeText","Data":"通过类的构造函数注入依赖对象。Spring 框架会自动调用构造函数并传入所需的依赖对象。"}]}]},{"ID":"20241015202855-cxyilyh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202855-cxyilyh","updated":"20241015202855"},"Children":[{"ID":"20241015202856-hscfts8","Type":"NodeParagraph","Properties":{"id":"20241015202856-hscfts8","updated":"20241015202856"},"Children":[{"Type":"NodeText","Data":"优点：注入的依赖对象是不可变的，可以提高代码的可测试性和安全性，适合必须依赖的注入。"}]}]},{"ID":"20241015202857-cs6jha7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202857-cs6jha7","updated":"20241015202857"},"Children":[{"ID":"20241015202858-jj0ekl1","Type":"NodeParagraph","Properties":{"id":"20241015202858-jj0ekl1","updated":"20241015202858"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202859-aiwl9q2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202859-aiwl9q2","updated":"20241015202859"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private final MyRepository myRepository;\n\n    @Autowired\n    public MyService(MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202860-m775iaz","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015202860-m775iaz","updated":"20241015202860"},"Children":[{"ID":"20241015202861-bon8axb","Type":"NodeParagraph","Properties":{"id":"20241015202861-bon8axb","updated":"20241015202861"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Setter 方法注入（Setter Injection）"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202862-m9dfxe2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202862-m9dfxe2","updated":"20241015202862"},"Children":[{"ID":"20241015202863-jjz38hs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202863-jjz38hs","updated":"20241015202863"},"Children":[{"ID":"20241015202864-us5edsn","Type":"NodeParagraph","Properties":{"id":"20241015202864-us5edsn","updated":"20241015202864"},"Children":[{"Type":"NodeText","Data":"通过 setter 方法注入依赖对象。Spring 框架在创建 bean 后会调用这些 setter 方法。"}]}]},{"ID":"20241015202865-j3w0w04","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202865-j3w0w04","updated":"20241015202865"},"Children":[{"ID":"20241015202866-czfow1s","Type":"NodeParagraph","Properties":{"id":"20241015202866-czfow1s","updated":"20241015202866"},"Children":[{"Type":"NodeText","Data":"优点：适合可选的依赖注入，使依赖关系更加灵活。"}]}]},{"ID":"20241015202867-hww05rf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202867-hww05rf","updated":"20241015202867"},"Children":[{"ID":"20241015202868-ooqb7tv","Type":"NodeParagraph","Properties":{"id":"20241015202868-ooqb7tv","updated":"20241015202868"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202869-sljzif4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202869-sljzif4","updated":"20241015202869"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private MyRepository myRepository;\n\n    @Autowired\n    public void setMyRepository(MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202870-uv4t22c","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241015202870-uv4t22c","updated":"20241015202870"},"Children":[{"ID":"20241015202871-s55wmbr","Type":"NodeParagraph","Properties":{"id":"20241015202871-s55wmbr","updated":"20241015202871"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"字段注入（Field Injection）"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202872-c01c9yf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202872-c01c9yf","updated":"20241015202872"},"Children":[{"ID":"20241015202873-f197n0l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202873-f197n0l","updated":"20241015202873"},"Children":[{"ID":"20241015202874-5k8l2uq","Type":"NodeParagraph","Properties":{"id":"20241015202874-5k8l2uq","updated":"20241015202874"},"Children":[{"Type":"NodeText","Data":"直接在类的字段上使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 注解，Spring 框架会自动注入所需的依赖对象。"}]}]},{"ID":"20241015202875-nd2zt53","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202875-nd2zt53","updated":"20241015202875"},"Children":[{"ID":"20241015202876-5rw63e1","Type":"NodeParagraph","Properties":{"id":"20241015202876-5rw63e1","updated":"20241015202876"},"Children":[{"Type":"NodeText","Data":"缺点：依赖关系不明显，影响代码的可测试性和可维护性，一般不推荐使用。"}]}]},{"ID":"20241015202877-613012d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202877-613012d","updated":"20241015202877"},"Children":[{"ID":"20241015202878-3hbjovh","Type":"NodeParagraph","Properties":{"id":"20241015202878-3hbjovh","updated":"20241015202878"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202879-yj08fou","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202879-yj08fou","updated":"20241015202879"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    @Autowired\n    private MyRepository myRepository;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]}]},{"ID":"20241015202880-yh42gnn","Type":"NodeParagraph","Properties":{"id":"20241015202880-yh42gnn","updated":"20241015202880"},"Children":[{"Type":"NodeText","Data":"构造函数注入通常是首选的方式，因为它使得依赖关系更为明确，增强了代码的可测试性和稳健性。"}]},{"ID":"20241015202881-rf7lafq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015202881-rf7lafq","updated":"20241015202881"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"注入多个依赖对象"}]},{"ID":"20241015202882-i7w4e6f","Type":"NodeParagraph","Properties":{"id":"20241015202882-i7w4e6f","updated":"20241015202882"},"Children":[{"Type":"NodeText","Data":"是的，Spring Boot 可以处理类中有多个依赖对象的情况。无论是通过构造函数注入、Setter 方法注入，还是字段注入，Spring 都能够将所有依赖对象正常注入。"}]},{"ID":"20241015202883-0tgfcud","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202883-0tgfcud","updated":"20241015202883"},"Children":[{"ID":"20241015202884-ecg6220","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202884-ecg6220","updated":"20241015202884"},"Children":[{"ID":"20241015202885-hbr498a","Type":"NodeParagraph","Properties":{"id":"20241015202885-hbr498a","updated":"20241015202885"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"构造函数注入"}]},{"ID":"20241015202886-aoxv5ox","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202886-aoxv5ox","updated":"20241015202886"},"Children":[{"ID":"20241015202887-ka45guy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202887-ka45guy","updated":"20241015202887"},"Children":[{"ID":"20241015202888-4kqukz3","Type":"NodeParagraph","Properties":{"id":"20241015202888-4kqukz3","updated":"20241015202888"},"Children":[{"Type":"NodeText","Data":"如果类中有多个依赖对象，你可以在构造函数中声明所有需要的依赖对象，Spring 会自动注入它们。"}]}]},{"ID":"20241015202889-s5mxm5b","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202889-s5mxm5b","updated":"20241015202889"},"Children":[{"ID":"20241015202890-gu10moy","Type":"NodeParagraph","Properties":{"id":"20241015202890-gu10moy","updated":"20241015202890"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202891-inaqs31","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202891-inaqs31","updated":"20241015202891"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private final MyRepository myRepository;\n    private final MyOtherService myOtherService;\n\n    @Autowired\n    public MyService(MyRepository myRepository, MyOtherService myOtherService) {\n        this.myRepository = myRepository;\n        this.myOtherService = myOtherService;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202892-2hq2i1m","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015202892-2hq2i1m","updated":"20241015202892"},"Children":[{"ID":"20241015202893-zfg86q3","Type":"NodeParagraph","Properties":{"id":"20241015202893-zfg86q3","updated":"20241015202893"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Setter 方法注入"}]},{"ID":"20241015202894-hap6b3s","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202894-hap6b3s","updated":"20241015202894"},"Children":[{"ID":"20241015202895-5qhtphq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202895-5qhtphq","updated":"20241015202895"},"Children":[{"ID":"20241015202896-jefn9mg","Type":"NodeParagraph","Properties":{"id":"20241015202896-jefn9mg","updated":"20241015202896"},"Children":[{"Type":"NodeText","Data":"如果使用 Setter 方法注入多个依赖对象，可以为每个依赖对象创建一个相应的 Setter 方法。"}]}]},{"ID":"20241015202897-uhmhcmi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202897-uhmhcmi","updated":"20241015202897"},"Children":[{"ID":"20241015202898-v45ojoc","Type":"NodeParagraph","Properties":{"id":"20241015202898-v45ojoc","updated":"20241015202898"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202899-lmf0f5s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202899-lmf0f5s","updated":"20241015202899"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private MyRepository myRepository;\n    private MyOtherService myOtherService;\n\n    @Autowired\n    public void setMyRepository(MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n\n    @Autowired\n    public void setMyOtherService(MyOtherService myOtherService) {\n        this.myOtherService = myOtherService;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202900-mwonjdk","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241015202900-mwonjdk","updated":"20241015202900"},"Children":[{"ID":"20241015202901-sim7oen","Type":"NodeParagraph","Properties":{"id":"20241015202901-sim7oen","updated":"20241015202901"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"字段注入"}]},{"ID":"20241015202902-zwmdfhy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202902-zwmdfhy","updated":"20241015202902"},"Children":[{"ID":"20241015202903-1tr9xvj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202903-1tr9xvj","updated":"20241015202903"},"Children":[{"ID":"20241015202904-mw1fwb5","Type":"NodeParagraph","Properties":{"id":"20241015202904-mw1fwb5","updated":"20241015202904"},"Children":[{"Type":"NodeText","Data":"如果使用字段注入，可以直接在每个依赖对象上使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 注解，Spring 会自动注入所有的依赖对象。"}]}]},{"ID":"20241015202905-sedwv0s","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202905-sedwv0s","updated":"20241015202905"},"Children":[{"ID":"20241015202906-l493wzb","Type":"NodeParagraph","Properties":{"id":"20241015202906-l493wzb","updated":"20241015202906"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202907-lwo4pt5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202907-lwo4pt5","updated":"20241015202907"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    @Autowired\n    private MyRepository myRepository;\n\n    @Autowired\n    private MyOtherService myOtherService;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]}]},{"ID":"20241015202908-i8fpxyi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015202908-i8fpxyi","updated":"20241015202908"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"处理多个同类型的依赖对象"}]},{"ID":"20241015202909-8w0xikn","Type":"NodeParagraph","Properties":{"id":"20241015202909-8w0xikn","updated":"20241015202909"},"Children":[{"Type":"NodeText","Data":"如果类中有多个相同类型的依赖对象，并且 Spring 无法自动决定注入哪一个，可以使用以下方法之一来处理："}]},{"ID":"20241015202910-a0l45qs","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202910-a0l45qs","updated":"20241015202910"},"Children":[{"ID":"20241015202911-b92c13v","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202911-b92c13v","updated":"20241015202911"},"Children":[{"ID":"20241015202912-f7bz6tr","Type":"NodeParagraph","Properties":{"id":"20241015202912-f7bz6tr","updated":"20241015202912"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 注解"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202913-lmoz4y9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202913-lmoz4y9","updated":"20241015202913"},"Children":[{"ID":"20241015202914-7amcyo5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202914-7amcyo5","updated":"20241015202914"},"Children":[{"ID":"20241015202915-zrq7m9g","Type":"NodeParagraph","Properties":{"id":"20241015202915-zrq7m9g","updated":"20241015202915"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeText","Data":" 指定要注入的具体 Bean。"}]}]},{"ID":"20241015202916-ij7q9tf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202916-ij7q9tf","updated":"20241015202916"},"Children":[{"ID":"20241015202917-5596djb","Type":"NodeParagraph","Properties":{"id":"20241015202917-5596djb","updated":"20241015202917"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202918-w0m3whw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202918-w0m3whw","updated":"20241015202918"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private final MyRepository myRepository;\n\n    @Autowired\n    public MyService(@Qualifier(\"specificRepository\") MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202919-7uqebo7","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015202919-7uqebo7","updated":"20241015202919"},"Children":[{"ID":"20241015202920-teyk1vs","Type":"NodeParagraph","Properties":{"id":"20241015202920-teyk1vs","updated":"20241015202920"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Primary"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 注解"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202921-7t9q4px","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202921-7t9q4px","updated":"20241015202921"},"Children":[{"ID":"20241015202922-1q0mm0t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202922-1q0mm0t","updated":"20241015202922"},"Children":[{"ID":"20241015202923-7t0lkyt","Type":"NodeParagraph","Properties":{"id":"20241015202923-7t0lkyt","updated":"20241015202923"},"Children":[{"Type":"NodeText","Data":"在一个 Bean 上使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Primary"},{"Type":"NodeText","Data":" 注解，指示 Spring 在有多个候选者时优先选择这个 Bean。"}]}]},{"ID":"20241015202924-j9fuytd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202924-j9fuytd","updated":"20241015202924"},"Children":[{"ID":"20241015202925-euq56gl","Type":"NodeParagraph","Properties":{"id":"20241015202925-euq56gl","updated":"20241015202925"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202926-avuqhxo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202926-avuqhxo","updated":"20241015202926"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Repository\n@Primary\npublic class PrimaryRepository implements MyRepository {\n    // Implementation details\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202927-orcb9qk","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241015202927-orcb9qk","updated":"20241015202927"},"Children":[{"ID":"20241015202928-slfxszv","Type":"NodeParagraph","Properties":{"id":"20241015202928-slfxszv","updated":"20241015202928"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Autowired"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" with List/Map"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202929-ya468le","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202929-ya468le","updated":"20241015202929"},"Children":[{"ID":"20241015202930-voj1mem","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202930-voj1mem","updated":"20241015202930"},"Children":[{"ID":"20241015202931-0994g4f","Type":"NodeParagraph","Properties":{"id":"20241015202931-0994g4f","updated":"20241015202931"},"Children":[{"Type":"NodeText","Data":"如果需要注入所有同类型的 Bean，可以使用集合类型，如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Map"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20241015202932-l91slb4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202932-l91slb4","updated":"20241015202932"},"Children":[{"ID":"20241015202933-wp1m1u0","Type":"NodeParagraph","Properties":{"id":"20241015202933-wp1m1u0","updated":"20241015202933"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202934-sbk17f4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202934-sbk17f4","updated":"20241015202934"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private final List\u003cMyRepository\u003e repositories;\n\n    @Autowired\n    public MyService(List\u003cMyRepository\u003e repositories) {\n        this.repositories = repositories;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]}]},{"ID":"20241015202935-q32bdo0","Type":"NodeParagraph","Properties":{"id":"20241015202935-q32bdo0","updated":"20241015202935"},"Children":[{"Type":"NodeText","Data":"这些方法可以确保 Spring Boot 在处理多个依赖对象时，能够正确注入所需的 Bean。"}]},{"ID":"20241015202936-aw690p6","Type":"NodeParagraph","Properties":{"id":"20241015202936-aw690p6","updated":"20241015202936"},"Children":[{"Type":"NodeText","Data":"处理多个同类型的依赖对象是指，当一个类中需要注入的依赖对象在 Spring 容器中有多个相同类型的候选者时，Spring 可能无法自动决定应该注入哪一个。这种情况通常发生在你有多个实现相同接口或继承自同一个类的 Bean，而需要注入其中一个或多个时。"}]},{"ID":"20241015202937-iy7knv4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015202937-iy7knv4","updated":"20241015202937"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"举例说明"}]},{"ID":"20241015202938-gfzxjg8","Type":"NodeParagraph","Properties":{"id":"20241015202938-gfzxjg8","updated":"20241015202938"},"Children":[{"Type":"NodeText","Data":"假设你有一个接口 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":"，并且你在 Spring 容器中定义了两个实现类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepositoryImpl1"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepositoryImpl2"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202939-onvf1qd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202939-onvf1qd","updated":"20241015202939"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public interface MyRepository {\n    void doSomething();\n}\n\n@Repository\npublic class MyRepositoryImpl1 implements MyRepository {\n    @Override\n    public void doSomething() {\n        // Implementation 1\n    }\n}\n\n@Repository\npublic class MyRepositoryImpl2 implements MyRepository {\n    @Override\n    public void doSomething() {\n        // Implementation 2\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015202940-82k8rvn","Type":"NodeParagraph","Properties":{"id":"20241015202940-82k8rvn","updated":"20241015202940"},"Children":[{"Type":"NodeText","Data":"现在你有一个服务类 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":" 需要注入一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":" 类型的依赖："}]},{"ID":"20241015202941-yk4kv0l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202941-yk4kv0l","updated":"20241015202941"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private final MyRepository myRepository;\n\n    @Autowired\n    public MyService(MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015202942-6iix5j2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015202942-6iix5j2","updated":"20241015202942"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"问题"}]},{"ID":"20241015202943-oildato","Type":"NodeParagraph","Properties":{"id":"20241015202943-oildato","updated":"20241015202943"},"Children":[{"Type":"NodeText","Data":"当 Spring Boot 看到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":" 类中的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":" 依赖时，由于在容器中有两个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":" 类型的 Bean ("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepositoryImpl1"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepositoryImpl2"},{"Type":"NodeText","Data":")，它不知道应该注入哪一个。此时会发生一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"NoUniqueBeanDefinitionException"},{"Type":"NodeText","Data":" 异常，表示 Spring 找到了多个候选者，而无法确定要注入哪一个。"}]},{"ID":"20241015202944-531ws92","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015202944-531ws92","updated":"20241015202944"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"解决方法"}]},{"ID":"20241015202945-r8ju4z0","Type":"NodeParagraph","Properties":{"id":"20241015202945-r8ju4z0","updated":"20241015202945"},"Children":[{"Type":"NodeText","Data":"有几种方法可以告诉 Spring Boot 你希望注入哪个具体的实现类："}]},{"ID":"20241015202946-o841yl2","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202946-o841yl2","updated":"20241015202946"},"Children":[{"ID":"20241015202947-w4463gc","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202947-w4463gc","updated":"20241015202947"},"Children":[{"ID":"20241015202948-2agkzw3","Type":"NodeParagraph","Properties":{"id":"20241015202948-2agkzw3","updated":"20241015202948"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 注解"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202949-e599xf1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202949-e599xf1","updated":"20241015202949"},"Children":[{"ID":"20241015202950-g31zk4d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202950-g31zk4d","updated":"20241015202950"},"Children":[{"ID":"20241015202951-qbuhj30","Type":"NodeParagraph","Properties":{"id":"20241015202951-qbuhj30","updated":"20241015202951"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Qualifier"},{"Type":"NodeText","Data":" 注解明确指定要注入的具体 Bean。"}]}]},{"ID":"20241015202952-7tqpf0z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202952-7tqpf0z","updated":"20241015202952"},"Children":[{"ID":"20241015202953-tppjxbr","Type":"NodeParagraph","Properties":{"id":"20241015202953-tppjxbr","updated":"20241015202953"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202954-2hmor3a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202954-2hmor3a","updated":"20241015202954"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private final MyRepository myRepository;\n\n    @Autowired\n    public MyService(@Qualifier(\"myRepositoryImpl1\") MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202955-elkqbs6","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015202955-elkqbs6","updated":"20241015202955"},"Children":[{"ID":"20241015202956-uuhcn4c","Type":"NodeParagraph","Properties":{"id":"20241015202956-uuhcn4c","updated":"20241015202956"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Primary"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 注解"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202957-70ucf0r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202957-70ucf0r","updated":"20241015202957"},"Children":[{"ID":"20241015202958-3h3vt7e","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202958-3h3vt7e","updated":"20241015202958"},"Children":[{"ID":"20241015202959-kxd9nhz","Type":"NodeParagraph","Properties":{"id":"20241015202959-kxd9nhz","updated":"20241015202959"},"Children":[{"Type":"NodeText","Data":"如果你希望在有多个实现类时默认注入其中一个，可以在这个实现类上使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Primary"},{"Type":"NodeText","Data":" 注解。"}]}]},{"ID":"20241015202960-7r3xv17","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202960-7r3xv17","updated":"20241015202960"},"Children":[{"ID":"20241015202961-g1tmjdc","Type":"NodeParagraph","Properties":{"id":"20241015202961-g1tmjdc","updated":"20241015202961"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202962-fijgtab","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202962-fijgtab","updated":"20241015202962"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Repository\n@Primary\npublic class MyRepositoryImpl1 implements MyRepository {\n    @Override\n    public void doSomething() {\n        // Implementation 1\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}]},{"ID":"20241015202963-m59yq55","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241015202963-m59yq55","updated":"20241015202963"},"Children":[{"ID":"20241015202964-7lhxqa9","Type":"NodeParagraph","Properties":{"id":"20241015202964-7lhxqa9","updated":"20241015202964"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注入集合类型（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"List"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"Map"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015202965-bkpcomy","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202965-bkpcomy","updated":"20241015202965"},"Children":[{"ID":"20241015202966-u6iptvr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202966-u6iptvr","updated":"20241015202966"},"Children":[{"ID":"20241015202967-2e2r5xh","Type":"NodeParagraph","Properties":{"id":"20241015202967-2e2r5xh","updated":"20241015202967"},"Children":[{"Type":"NodeText","Data":"如果你希望同时注入所有的实现类，可以使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"List"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Map"},{"Type":"NodeText","Data":" 来接收所有的候选者。"}]}]},{"ID":"20241015202968-w2lco9c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202968-w2lco9c","updated":"20241015202968"},"Children":[{"ID":"20241015202969-yj4xr5m","Type":"NodeParagraph","Properties":{"id":"20241015202969-yj4xr5m","updated":"20241015202969"},"Children":[{"Type":"NodeText","Data":"示例："}]},{"ID":"20241015202970-6fspjoy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202970-6fspjoy","updated":"20241015202970"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n    private final List\u003cMyRepository\u003e repositories;\n\n    @Autowired\n    public MyService(List\u003cMyRepository\u003e repositories) {\n        this.repositories = repositories;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241015202971-7lalbz6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202971-7lalbz6","updated":"20241015202971"},"Children":[{"ID":"20241015202972-dk1lhvf","Type":"NodeParagraph","Properties":{"id":"20241015202972-dk1lhvf","updated":"20241015202972"},"Children":[{"Type":"NodeText","Data":"这种方式可以让你在运行时遍历并使用所有的实现。"}]}]}]}]}]},{"ID":"20241015202973-vwvwap5","Type":"NodeParagraph","Properties":{"id":"20241015202973-vwvwap5","updated":"20241015202973"},"Children":[{"Type":"NodeText","Data":"这些方法确保 Spring Boot 能够正确处理多个同类型的依赖对象并注入你所期望的具体 Bean。"}]},{"ID":"20241015202974-lf9b2jq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241015202974-lf9b2jq","updated":"20241015202974"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Springboot的反射机制"}]},{"ID":"20241015202975-rgwfu8i","Type":"NodeParagraph","Properties":{"id":"20241015202975-rgwfu8i","updated":"20241015202975"},"Children":[{"Type":"NodeText","Data":"我想看的是Springboot如何通过组件扫描和自动注入完成依赖注入流程的，你能演示一下这部分的原理吗？"}]},{"ID":"20241015202976-umkw4ho","Type":"NodeParagraph","Properties":{"id":"20241015202976-umkw4ho","updated":"20241015202976"},"Children":[{"Type":"NodeText","Data":"理解Spring Boot如何通过组件扫描和自动注入完成依赖注入的流程确实有助于更深入地理解Spring的工作机制。接下来，我会演示Spring Boot内部是如何通过组件扫描和自动注入来完成依赖注入的。"}]},{"ID":"20241015202977-omrcopl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015202977-omrcopl","updated":"20241015202977"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. 组件扫描"}]},{"ID":"20241015202978-pku8si0","Type":"NodeParagraph","Properties":{"id":"20241015202978-pku8si0","updated":"20241015202978"},"Children":[{"Type":"NodeText","Data":"Spring Boot通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@SpringBootApplication"},{"Type":"NodeText","Data":"注解"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"启动自动配置和组件扫描"},{"Type":"NodeText","Data":"。这个注解包含了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":"，它告诉Spring在指定的包及其子包中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"扫描标注了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Component"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Service"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Repository"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"@Controller"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"等注解的类"},{"Type":"NodeText","Data":"，并将它们"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注册为Spring容器中的bean"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241015202979-pu8zj0t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202979-pu8zj0t","updated":"20241015202979"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@SpringBootApplication\npublic class DemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015202980-5ihh4n2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202980-5ihh4n2","updated":"20241015202980"},"Children":[{"ID":"20241015202981-mu063vi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202981-mu063vi","updated":"20241015202981"},"Children":[{"ID":"20241015202982-c201q38","Type":"NodeParagraph","Properties":{"id":"20241015202982-c201q38","updated":"20241015202982"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@SpringBootApplication"},{"Type":"NodeText","Data":" 是一个复合注解，包含了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@EnableAutoConfiguration"},{"Type":"NodeText","Data":" 等注解。"}]}]}]},{"ID":"20241015202983-bgh9ftp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015202983-bgh9ftp","updated":"20241015202983"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":"注解的作用"}]},{"ID":"20241015202984-3f27c1u","Type":"NodeParagraph","Properties":{"id":"20241015202984-3f27c1u","updated":"20241015202984"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":" 会扫描"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"DemoApplication"},{"Type":"NodeText","Data":"所在包及其子包中的所有类，查找并注册那些标记了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Service"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Repository"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Controller"},{"Type":"NodeText","Data":"的类。你也可以通过配置"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":"的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"basePackages"},{"Type":"NodeText","Data":"属性来指定其他要扫描的包。"}]},{"ID":"20241015202985-z3tv0cv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202985-z3tv0cv","updated":"20241015202985"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@ComponentScan(basePackages = \"com.example.demo\")\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015202986-1aq2mtf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015202986-1aq2mtf","updated":"20241015202986"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. Bean的创建与注入"}]},{"ID":"20241015202987-ho6n9vs","Type":"NodeParagraph","Properties":{"id":"20241015202987-ho6n9vs","updated":"20241015202987"},"Children":[{"Type":"NodeText","Data":"在Spring扫描过程中，Spring会为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"每一个找到的组件创建一个单例的bean实例"},{"Type":"NodeText","Data":"（除非配置了多例）。这些bean会"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"存储在Spring容器中"},{"Type":"NodeText","Data":"，并且可以在其他组件中被注入使用。"}]},{"ID":"20241015202988-qi3ubl4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015202988-qi3ubl4","updated":"20241015202988"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"注解的作用"}]},{"ID":"20241015202989-8nm7obd","Type":"NodeParagraph","Properties":{"id":"20241015202989-8nm7obd","updated":"20241015202989"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"注解用于告诉Spring，哪个字段、构造函数或方法参数需要依赖注入。Spring会在容器中查找类型匹配的bean，并自动注入到标注了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"的地方。"}]},{"ID":"20241015202990-oaijtvn","Type":"NodeParagraph","Properties":{"id":"20241015202990-oaijtvn","updated":"20241015202990"},"Children":[{"Type":"NodeText","Data":"例如："}]},{"ID":"20241015202991-fyd6ajj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015202991-fyd6ajj","updated":"20241015202991"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n\n    private final MyRepository myRepository;\n\n    @Autowired\n    public MyService(MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n\n    public String processData() {\n        return \"Processed \" + myRepository.fetchData();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015202992-dba9g2m","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202992-dba9g2m","updated":"20241015202992"},"Children":[{"ID":"20241015202993-1roetux","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015202993-1roetux","updated":"20241015202993"},"Children":[{"ID":"20241015202994-twg96hl","Type":"NodeParagraph","Properties":{"id":"20241015202994-twg96hl","updated":"20241015202994"},"Children":[{"Type":"NodeText","Data":"在上面的例子中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":" 标注的构造函数告诉Spring要将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":" 的实例注入到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":" 中。"}]}]}]},{"ID":"20241015202995-zqlgcjf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015202995-zqlgcjf","updated":"20241015202995"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. 依赖注入流程的工作原理"}]},{"ID":"20241015202996-xn3290i","Type":"NodeParagraph","Properties":{"id":"20241015202996-xn3290i","updated":"20241015202996"},"Children":[{"Type":"NodeText","Data":"以下是Spring Boot完成依赖注入的内部工作流程："}]},{"ID":"20241015202997-vserrou","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202997-vserrou","updated":"20241015202997"},"Children":[{"ID":"20241015202998-tfli8mw","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015202998-tfli8mw","updated":"20241015202998"},"Children":[{"ID":"20241015202999-owzgsd0","Type":"NodeParagraph","Properties":{"id":"20241015202999-owzgsd0","updated":"20241015202999"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"组件扫描"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015203000-a63byrd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203000-a63byrd","updated":"20241015203000"},"Children":[{"ID":"20241015203001-7koaof8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203001-7koaof8","updated":"20241015203001"},"Children":[{"ID":"20241015203002-3i1ddde","Type":"NodeParagraph","Properties":{"id":"20241015203002-3i1ddde","updated":"20241015203002"},"Children":[{"Type":"NodeText","Data":"当Spring Boot应用启动时，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@SpringBootApplication"},{"Type":"NodeText","Data":"（内部含有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":"）告诉Spring从主类所在的包开始扫描所有类。"}]}]},{"ID":"20241015203003-lhxxcl4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203003-lhxxcl4","updated":"20241015203003"},"Children":[{"ID":"20241015203004-ah8m6oo","Type":"NodeParagraph","Properties":{"id":"20241015203004-ah8m6oo","updated":"20241015203004"},"Children":[{"Type":"NodeText","Data":"Spring扫描这些类，查找标注了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Service"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Repository"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Controller"},{"Type":"NodeText","Data":"等注解的类，并将它们注册为Spring容器中的bean。"}]}]}]}]},{"ID":"20241015203005-nglxg9c","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015203005-nglxg9c","updated":"20241015203005"},"Children":[{"ID":"20241015203006-jy3mjgm","Type":"NodeParagraph","Properties":{"id":"20241015203006-jy3mjgm","updated":"20241015203006"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Bean的创建"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015203007-0cdem7b","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203007-0cdem7b","updated":"20241015203007"},"Children":[{"ID":"20241015203008-yfytvc2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203008-yfytvc2","updated":"20241015203008"},"Children":[{"ID":"20241015203009-c7kfi2h","Type":"NodeParagraph","Properties":{"id":"20241015203009-c7kfi2h","updated":"20241015203009"},"Children":[{"Type":"NodeText","Data":"对于每一个被扫描到的类，Spring会自动创建一个bean实例。"}]}]},{"ID":"20241015203010-xw09v8l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203010-xw09v8l","updated":"20241015203010"},"Children":[{"ID":"20241015203011-j4pkk0f","Type":"NodeParagraph","Properties":{"id":"20241015203011-j4pkk0f","updated":"20241015203011"},"Children":[{"Type":"NodeText","Data":"这些bean默认是单例的，这意味着Spring容器中每个bean类型只有一个实例。"}]}]}]}]},{"ID":"20241015203012-bs83m56","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241015203012-bs83m56","updated":"20241015203012"},"Children":[{"ID":"20241015203013-5wwzxeo","Type":"NodeParagraph","Properties":{"id":"20241015203013-5wwzxeo","updated":"20241015203013"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"依赖注入"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015203014-uyvv46a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203014-uyvv46a","updated":"20241015203014"},"Children":[{"ID":"20241015203015-0a22qm5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203015-0a22qm5","updated":"20241015203015"},"Children":[{"ID":"20241015203016-yip39q0","Type":"NodeParagraph","Properties":{"id":"20241015203016-yip39q0","updated":"20241015203016"},"Children":[{"Type":"NodeText","Data":"Spring容器检查所有bean的依赖项（通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Inject"},{"Type":"NodeText","Data":"等注解）。"}]}]},{"ID":"20241015203017-zb7dl80","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203017-zb7dl80","updated":"20241015203017"},"Children":[{"ID":"20241015203018-54eapc8","Type":"NodeParagraph","Properties":{"id":"20241015203018-54eapc8","updated":"20241015203018"},"Children":[{"Type":"NodeText","Data":"对于每一个依赖项，Spring会在容器中查找类型匹配的bean实例，并将其注入到需要的地方。"}]}]},{"ID":"20241015203019-d1tzzai","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203019-d1tzzai","updated":"20241015203019"},"Children":[{"ID":"20241015203020-d67rud0","Type":"NodeParagraph","Properties":{"id":"20241015203020-d67rud0","updated":"20241015203020"},"Children":[{"Type":"NodeText","Data":"注入的方式可以是通过构造函数、setter方法或直接注入到字段中。"}]}]}]}]},{"ID":"20241015203021-m9e61j1","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20241015203021-m9e61j1","updated":"20241015203021"},"Children":[{"ID":"20241015203022-4yl4lub","Type":"NodeParagraph","Properties":{"id":"20241015203022-4yl4lub","updated":"20241015203022"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Bean的初始化"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015203023-gv92p9j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203023-gv92p9j","updated":"20241015203023"},"Children":[{"ID":"20241015203024-xt7haz1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203024-xt7haz1","updated":"20241015203024"},"Children":[{"ID":"20241015203025-6yf8k79","Type":"NodeParagraph","Properties":{"id":"20241015203025-6yf8k79","updated":"20241015203025"},"Children":[{"Type":"NodeText","Data":"在依赖注入完成后，Spring会调用bean的初始化方法（如果有的话），例如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@PostConstruct"},{"Type":"NodeText","Data":"标注的方法。"}]}]},{"ID":"20241015203026-jtxktuk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203026-jtxktuk","updated":"20241015203026"},"Children":[{"ID":"20241015203027-gwlvpae","Type":"NodeParagraph","Properties":{"id":"20241015203027-gwlvpae","updated":"20241015203027"},"Children":[{"Type":"NodeText","Data":"然后，bean就可以在应用程序中使用了。"}]}]}]}]}]},{"ID":"20241015203028-3x8d08l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203028-3x8d08l","updated":"20241015234215"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4. 手动验证依赖注入流程"}]},{"ID":"20241015203029-dytsmaw","Type":"NodeParagraph","Properties":{"id":"20241015203029-dytsmaw","updated":"20241015234215"},"Children":[{"Type":"NodeText","Data":"为了更好地理解这一过程，我们可以通过一些日志输出或调试工具查看Spring如何创建bean并完成依赖注入。"}]},{"ID":"20241015203030-qhup4ud","Type":"NodeParagraph","Properties":{"id":"20241015203030-qhup4ud","updated":"20241015203030"},"Children":[{"Type":"NodeText","Data":"例如，我们可以在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":"的构造函数中添加一些日志输出："}]},{"ID":"20241015203031-5e88ok0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203031-5e88ok0","updated":"20241015203031"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Service\npublic class MyService {\n\n    private final MyRepository myRepository;\n\n    @Autowired\n    public MyService(MyRepository myRepository) {\n        this.myRepository = myRepository;\n        System.out.println(\"MyService is created and MyRepository is injected.\");\n    }\n\n    public String processData() {\n        return \"Processed \" + myRepository.fetchData();\n    }\n}\n\n@Repository\npublic class MyRepository {\n\n    public MyRepository() {\n        System.out.println(\"MyRepository is created.\");\n    }\n\n    public String fetchData() {\n        return \"Data from Repository\";\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203032-rsikj9c","Type":"NodeParagraph","Properties":{"id":"20241015203032-rsikj9c","updated":"20241015203032"},"Children":[{"Type":"NodeText","Data":"当Spring Boot启动时，你会看到类似以下的输出："}]},{"ID":"20241015203033-3n41e3f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203033-3n41e3f","updated":"20241015203033"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"MyRepository is created.\nMyService is created and MyRepository is injected.\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203034-amfnvcg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203034-amfnvcg","updated":"20241015203034"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. 总结"}]},{"ID":"20241015203035-jxs5ilu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203035-jxs5ilu","updated":"20241015203035"},"Children":[{"ID":"20241015203036-ur2xzv3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203036-ur2xzv3","updated":"20241015203036"},"Children":[{"ID":"20241015203037-k5bdrjx","Type":"NodeParagraph","Properties":{"id":"20241015203037-k5bdrjx","updated":"20241015203037"},"Children":[{"Type":"NodeText","Data":"Spring Boot通过组件扫描（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":"）自动查找并注册bean。"}]}]},{"ID":"20241015203038-p39qjqj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203038-p39qjqj","updated":"20241015203038"},"Children":[{"ID":"20241015203039-r281ob8","Type":"NodeParagraph","Properties":{"id":"20241015203039-r281ob8","updated":"20241015203039"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"注解用于自动注入依赖，Spring容器会自动找到并注入匹配的bean。"}]}]},{"ID":"20241015203040-mtbsm8w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203040-mtbsm8w","updated":"20241015203040"},"Children":[{"ID":"20241015203041-vxj7ei5","Type":"NodeParagraph","Properties":{"id":"20241015203041-vxj7ei5","updated":"20241015203041"},"Children":[{"Type":"NodeText","Data":"通过这些机制，Spring Boot能够简化开发者的工作，让我们专注于业务逻辑，而不必担心bean的创建和管理。"}]}]}]},{"ID":"20241015203042-cxyw96p","Type":"NodeParagraph","Properties":{"id":"20241015203042-cxyw96p","updated":"20241015203042"},"Children":[{"Type":"NodeText","Data":"希望通过这个演示，你能够更清楚地理解Spring Boot中依赖注入的工作原理和流程。如果还有什么问题，请随时问我！"}]},{"ID":"20241015203043-yz2x9lf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241015203043-yz2x9lf","updated":"20241015203043"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"依赖注入"}]},{"ID":"20241015203044-7yq3eiz","Type":"NodeParagraph","Properties":{"id":"20241015203044-7yq3eiz","updated":"20241015203044"},"Children":[{"Type":"NodeText","Data":"这其中使用了反射和注解的来实现，是吗？你能不能用代码简单演示一下Springboot如何自动实现组件扫描和bean的创建的？"}]},{"ID":"20241015203045-s02kn7p","Type":"NodeParagraph","Properties":{"id":"20241015203045-s02kn7p","updated":"20241015203045"},"Children":[{"Type":"NodeText","Data":"是的，Spring Boot确实使用了反射和注解来实现组件扫描和bean的自动创建。通过反射，Spring可以在运行时扫描类路径，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"查找标记了特定注解的类"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"并创建这些类的实例（即bean）"},{"Type":"NodeText","Data":"。接下来，我将通过一个简单的代码示例演示这一过程。"}]},{"ID":"20241015203046-kcqlc48","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203046-kcqlc48","updated":"20241015203046"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"模拟Spring的组件扫描与Bean创建"}]},{"ID":"20241015203047-r30ksya","Type":"NodeParagraph","Properties":{"id":"20241015203047-r30ksya","updated":"20241015203047"},"Children":[{"Type":"NodeText","Data":"我们可以用一个简化版的代码来模拟Spring Boot如何通过组件扫描和反射来实现bean的自动创建和依赖注入。"}]},{"ID":"20241015203048-wkuyl7p","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015203048-wkuyl7p","updated":"20241015203048"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. 自定义注解"}]},{"ID":"20241015203049-njkqc1h","Type":"NodeParagraph","Properties":{"id":"20241015203049-njkqc1h","updated":"20241015203049"},"Children":[{"Type":"NodeText","Data":"首先，我们定义一些注解来标记组件："}]},{"ID":"20241015203050-y9mfve6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203050-y9mfve6","updated":"20241015203050"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 模拟 @Component 注解\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface Component {\n}\n\n// 模拟 @Autowired 注解\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface Autowired {\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203051-zwpjlnh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015203051-zwpjlnh","updated":"20241015203051"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. 模拟Spring的容器"}]},{"ID":"20241015203052-1ybrle1","Type":"NodeParagraph","Properties":{"id":"20241015203052-1ybrle1","updated":"20241015203052"},"Children":[{"Type":"NodeText","Data":"接下来，我们创建一个简单的容器类，用于扫描类路径中的组件并管理bean的创建和注入："}]},{"ID":"20241015203053-idvx2zu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203053-idvx2zu","updated":"20241015203053"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import java.lang.reflect.Field;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class SimpleSpringContainer {\n\n    // 存储已经创建好的bean\n    private Map\u003cClass\u003c?\u003e, Object\u003e beanMap = new HashMap\u003c\u003e();\n\n    public SimpleSpringContainer(String basePackage) throws Exception {\n        // 扫描包并创建bean\n        scanPackageAndCreateBeans(basePackage);\n        // 处理依赖注入\n        handleAutowiredDependencies();\n    }\n\t\n    /**\n    \tscanPackageAndCreateBeans负责扫描包中的所有类，找到标记了特定注解的类并创建实例。\n    \t这个过程利用了Java反射API的强大功能，使得Spring能够**在运行时动态处理组件的创建**。\n    */\n    private void scanPackageAndCreateBeans(String basePackage) throws Exception {\n        // 使用 Classpath scanner 库扫描包中的类（这里为了简单假设已经扫描得到类名）\n        // 在实际的Spring中，@ComponentScan注解负责包扫描。它会递归地扫描指定包及其子包中的所有类，查找标记了@Component或其派生注解（如@Service、@Repository、@Controller）的类。\n        // 为了简化，我们假设已经扫描到了一些类，如MyService和MyRepository，并将它们添加到一个集合classes中。在实际中，可以使用Java反射或第三方库（如ClassPathScanningCandidateComponentProvider）来实现自动扫描。\n        Set\u003cClass\u003c?\u003e\u003e classes = Set.of(MyService.class, MyRepository.class);\n\n        for (Class\u003c?\u003e clazz : classes) {\n            // 使用clazz.isAnnotationPresent(Component.class)检查每个类是否标记了@Component注解。\n\t\t\t// 如果类被标记为组件，表示它应该被Spring管理。\n            if (clazz.isAnnotationPresent(Component.class)) {\n                // 使用反射创建该类的实例：clazz.getDeclaredConstructor().newInstance()。\n                // getDeclaredConstructor()返回该类的默认构造函数，并通过newInstance()调用该构造函数来创建对象。\n                Object instance = clazz.getDeclaredConstructor().newInstance();\n                // 将创建好的实例存储在一个Map（beanMap）中，模拟Spring的bean容器，key为类类型，value为创建的实例。\n                beanMap.put(clazz, instance);\n                System.out.println(\"Created bean for class: \" + clazz.getSimpleName());\n            }\n        }\n    }\n\n    /**\n    \t这个函数的任务是处理依赖注入，即查找bean中的依赖项，并将它们注入到相应的字段中。\n    \t\n    */\n    private void handleAutowiredDependencies() throws Exception {\n        // 通过遍历beanMap.values()，我们获取到所有已经创建的bean实例。\n        for (Object bean : beanMap.values()) {\n            // 对于每个bean，使用bean.getClass().getDeclaredFields()获取该类的所有字段（包括私有字段）。\n            Field[] fields = bean.getClass().getDeclaredFields();\n            for (Field field : fields) {\n                // 检查注解\n                // 使用field.isAnnotationPresent(Autowired.class)检查字段是否标记了@Autowired注解。如果字段被@Autowired标记，意味着它需要被注入依赖。\n                if (field.isAnnotationPresent(Autowired.class)) {\n                    // 获取依赖\n                    // 通过field.getType()获取字段的类型（即需要注入的依赖类型）。\n                    Class\u003c?\u003e fieldType = field.getType();\n                    // 在beanMap中查找这个类型的bean实例。\n                    Object dependency = beanMap.get(fieldType);\n                    // 注入依赖\n                    // 使用field.setAccessible(true)来确保可以访问（包括私有字段）。\n                    field.setAccessible(true);\n                    // 然后使用field.set(bean, dependency)将找到的依赖实例注入到字段中。\n                    field.set(bean, dependency);\n                    System.out.println(\"Injected \" + fieldType.getSimpleName() + \" into \" + bean.getClass().getSimpleName());\n                }\n            }\n        }\n    }\n\n    public Object getBean(Class\u003c?\u003e clazz) {\n        return beanMap.get(clazz);\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203054-s7epx8x","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203054-s7epx8x","updated":"20241015203054"},"Children":[{"ID":"20241015203055-91k3rfp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203055-91k3rfp","updated":"20241015203055"},"Children":[{"ID":"20241015203056-9e4oxl5","Type":"NodeParagraph","Properties":{"id":"20241015203056-9e4oxl5","updated":"20241015203056"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"scanPackageAndCreateBeans"},{"Type":"NodeText","Data":"：扫描指定包中的类（在实际应用中会用类路径扫描器），找到标记了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"的类并创建它们的实例。"}]}]},{"ID":"20241015203057-ok45dpj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203057-ok45dpj","updated":"20241015203057"},"Children":[{"ID":"20241015203058-dcaobe8","Type":"NodeParagraph","Properties":{"id":"20241015203058-dcaobe8","updated":"20241015203058"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"handleAutowiredDependencies"},{"Type":"NodeText","Data":"：遍历已创建的bean，并使用反射将"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"标记的字段注入相应的依赖。"}]}]}]},{"ID":"20241015203059-lyftfe3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015203059-lyftfe3","updated":"20241015203059"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. 定义组件"}]},{"ID":"20241015203060-owf2wb7","Type":"NodeParagraph","Properties":{"id":"20241015203060-owf2wb7","updated":"20241015203060"},"Children":[{"Type":"NodeText","Data":"定义两个简单的组件类，并使用自定义的注解来标记它们："}]},{"ID":"20241015203061-j0ttiry","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203061-j0ttiry","updated":"20241015203061"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\npublic class MyRepository {\n    public String fetchData() {\n        return \"Data from MyRepository\";\n    }\n}\n\n@Component\npublic class MyService {\n    @Autowired\n    private MyRepository myRepository;\n\n    public void performService() {\n        System.out.println(\"Service is processing: \" + myRepository.fetchData());\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203062-i0tgxuc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015203062-i0tgxuc","updated":"20241015203062"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4. 启动并测试"}]},{"ID":"20241015203063-nf14pet","Type":"NodeParagraph","Properties":{"id":"20241015203063-nf14pet","updated":"20241015203063"},"Children":[{"Type":"NodeText","Data":"现在，我们可以通过简单的代码来模拟Spring Boot启动时的行为："}]},{"ID":"20241015203064-3ga4c3j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203064-3ga4c3j","updated":"20241015203064"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class Main {\n    public static void main(String[] args) throws Exception {\n        // 模拟 Spring Boot 初始化\n        SimpleSpringContainer container = new SimpleSpringContainer(\"com.example\");\n\n        // 获取bean并调用方法\n        MyService myService = (MyService) container.getBean(MyService.class);\n        myService.performService();\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203065-3swtjak","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015203065-3swtjak","updated":"20241015203065"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. 运行结果"}]},{"ID":"20241015203066-f2umol3","Type":"NodeParagraph","Properties":{"id":"20241015203066-f2umol3","updated":"20241015203066"},"Children":[{"Type":"NodeText","Data":"运行上述代码后，控制台会输出："}]},{"ID":"20241015203067-rkir805","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203067-rkir805","updated":"20241015203067"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Created bean for class: MyService\nCreated bean for class: MyRepository\nInjected MyRepository into MyService\nService is processing: Data from MyRepository\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203068-3bndbc4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203068-3bndbc4","updated":"20241015203068"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"解释"}]},{"ID":"20241015203069-x9az2v0","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015203069-x9az2v0","updated":"20241015203069"},"Children":[{"ID":"20241015203070-duu84um","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015203070-duu84um","updated":"20241015203070"},"Children":[{"ID":"20241015203071-z5lb4f5","Type":"NodeParagraph","Properties":{"id":"20241015203071-z5lb4f5","updated":"20241015203071"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"组件扫描"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015203072-n9b30bg","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203072-n9b30bg","updated":"20241015203072"},"Children":[{"ID":"20241015203073-qu7m1ju","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203073-qu7m1ju","updated":"20241015203073"},"Children":[{"ID":"20241015203074-gr8q0hj","Type":"NodeParagraph","Properties":{"id":"20241015203074-gr8q0hj","updated":"20241015203074"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SimpleSpringContainer"},{"Type":"NodeText","Data":"模拟了Spring Boot的组件扫描功能。它查找所有标记了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"的类，并创建它们的实例。"}]}]}]}]},{"ID":"20241015203075-oskptuh","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015203075-oskptuh","updated":"20241015203075"},"Children":[{"ID":"20241015203076-diqeuxe","Type":"NodeParagraph","Properties":{"id":"20241015203076-diqeuxe","updated":"20241015203076"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Bean创建"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015203077-xs8bcwo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203077-xs8bcwo","updated":"20241015203077"},"Children":[{"ID":"20241015203078-ay9qdvq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203078-ay9qdvq","updated":"20241015203078"},"Children":[{"ID":"20241015203079-29xlezt","Type":"NodeParagraph","Properties":{"id":"20241015203079-29xlezt","updated":"20241015203079"},"Children":[{"Type":"NodeText","Data":"使用反射创建这些类的实例，并将它们存储在一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Map"},{"Type":"NodeText","Data":"中，模拟Spring容器中的bean管理。"}]}]}]}]},{"ID":"20241015203080-ah2sihr","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241015203080-ah2sihr","updated":"20241015203080"},"Children":[{"ID":"20241015203081-idu4kc5","Type":"NodeParagraph","Properties":{"id":"20241015203081-idu4kc5","updated":"20241015203081"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"依赖注入"},{"Type":"NodeText","Data":"："}]},{"ID":"20241015203082-9m56ep8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203082-9m56ep8","updated":"20241015203082"},"Children":[{"ID":"20241015203083-hrqu23h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241015203083-hrqu23h","updated":"20241015203083"},"Children":[{"ID":"20241015203084-xijynqu","Type":"NodeParagraph","Properties":{"id":"20241015203084-xijynqu","updated":"20241015203084"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"handleAutowiredDependencies"},{"Type":"NodeText","Data":"方法使用反射查找"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"标记的字段，并将相应的bean注入到这些字段中。"}]}]}]}]}]},{"ID":"20241015203085-v04yezu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203085-v04yezu","updated":"20241015203085"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20241015203086-gpj3zz7","Type":"NodeParagraph","Properties":{"id":"20241015203086-gpj3zz7","updated":"20241015203086"},"Children":[{"Type":"NodeText","Data":"这个简单的示例演示了Spring Boot在启动时如何通过反射和注解完成组件扫描、bean创建以及依赖注入的流程。在真实的Spring Boot中，这个过程更为复杂和优化，但核心思想是相同的：通过反射动态地扫描类路径，找到标记了特定注解的类，并通过反射机制来创建和管理这些类的实例。"}]},{"ID":"20241015203087-51iv45g","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241015203087-51iv45g","updated":"20241015203087"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"控制反转🚩"}]},{"ID":"20241015203088-1jewbu5","Type":"NodeParagraph","Properties":{"id":"20241015203088-1jewbu5","updated":"20241015203088"},"Children":[{"Type":"NodeText","Data":"控制反转（Inversion of Control，IoC）是Spring框架的核心概念之一，依赖注入（Dependency Injection，DI）是实现控制反转的主要手段。为了更好地理解控制反转，我们先回顾一下传统编程中的依赖管理方式，然后再看看Spring中的控制反转是如何工作的。"}]},{"ID":"20241015203089-qdpz05e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203089-qdpz05e","updated":"20241015203089"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"传统编程中的依赖管理"}]},{"ID":"20241015203090-m0rvg35","Type":"NodeParagraph","Properties":{"id":"20241015203090-m0rvg35","updated":"20241015203090"},"Children":[{"Type":"NodeText","Data":"在没有使用IoC的情况下，程序员通常需要手动创建和管理对象及其依赖。例如："}]},{"ID":"20241015203091-zqnmgso","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203091-zqnmgso","updated":"20241015203091"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class MyService {\n    private MyRepository myRepository;\n\n    public MyService() {\n        this.myRepository = new MyRepository(); // 手动创建依赖\n    }\n\n    public void performService() {\n        System.out.println(\"Service is processing: \" + myRepository.fetchData());\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203092-thic4pj","Type":"NodeParagraph","Properties":{"id":"20241015203092-thic4pj","updated":"20241015203092"},"Children":[{"Type":"NodeText","Data":"在这个例子中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":"类负责创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":"的实例。换句话说，=="},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"MyService"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类“控制”着它的依赖（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"MyRepository"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）的创建和生命周期"},{"Type":"NodeText","Data":"==。这意味着"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":"是紧耦合的，代码的可维护性和扩展性较差。"}]},{"ID":"20241015203093-1j4cpfg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203093-1j4cpfg","updated":"20241015203093"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"控制反转（IoC）"}]},{"ID":"20241015203094-s5d1t3v","Type":"NodeParagraph","Properties":{"id":"20241015203094-s5d1t3v","updated":"20241015203094"},"Children":[{"Type":"NodeText","Data":"控制反转的核心思想是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"将对象的创建和管理职责从应用程序代码中“反转”出去"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"由一个外部容器（如Spring IoC容器）来负责"},{"Type":"NodeText","Data":"。这使得对象不再自行创建和管理它们的依赖，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"而是依赖于外部容器来注入这些依赖"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241015203095-yxpr6o3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203095-yxpr6o3","updated":"20241015203095"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"在Spring中实现控制反转"}]},{"ID":"20241015203096-z5dxlt6","Type":"NodeParagraph","Properties":{"id":"20241015203096-z5dxlt6","updated":"20241015203096"},"Children":[{"Type":"NodeText","Data":"在Spring框架中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"IoC容器负责"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong em","TextMarkTextContent":"创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong em","TextMarkTextContent":"配置"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong em","TextMarkTextContent":"管理"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"应用程序中的对象（bean）"},{"Type":"NodeText","Data":"，并自动处理这些对象之间的依赖关系。这意味着对象不再需要自行创建依赖，而是由Spring IoC容器"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"根据配置（通常是注解或XML）自动注入依赖"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241015203097-3sw3m3j","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241015203097-3sw3m3j","updated":"20241015203097"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"通过依赖注入实现控制反转"}]},{"ID":"20241015203098-085zlg1","Type":"NodeParagraph","Properties":{"id":"20241015203098-085zlg1","updated":"20241015203098"},"Children":[{"Type":"NodeText","Data":"控制反转的实现主要通过依赖注入来完成。Spring提供了多种方式来实现依赖注入，最常见的就是通过注解"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"，Spring会自动将需要的依赖注入到类中，从而实现控制反转。"}]},{"ID":"20241015203099-npsyt79","Type":"NodeParagraph","Properties":{"id":"20241015203099-npsyt79","updated":"20241015203099"},"Children":[{"Type":"NodeText","Data":"以下是使用Spring IoC容器实现控制反转的示例："}]},{"ID":"20241015203100-55gxxrm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241015203100-55gxxrm","updated":"20241015203100"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"@Component\npublic class MyService {\n    private final MyRepository myRepository;\n\n    // 依赖注入，MyRepository的控制权转移给了Spring IoC容器\n    @Autowired\n    public MyService(MyRepository myRepository) {\n        this.myRepository = myRepository;\n    }\n\n    public void performService() {\n        System.out.println(\"Service is processing: \" + myRepository.fetchData());\n    }\n}\n\n@Component\npublic class MyRepository {\n    public String fetchData() {\n        return \"Data from MyRepository\";\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241015203101-423dxks","Type":"NodeParagraph","Properties":{"id":"20241015203101-423dxks","updated":"20241015203101"},"Children":[{"Type":"NodeText","Data":"在这个例子中："}]},{"ID":"20241015203102-w7yh03i","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015203102-w7yh03i","updated":"20241015203102"},"Children":[{"ID":"20241015203103-ja91280","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015203103-ja91280","updated":"20241015203103"},"Children":[{"ID":"20241015203104-gb88amf","Type":"NodeParagraph","Properties":{"id":"20241015203104-gb88amf","updated":"20241015203104"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"控制反转"},{"Type":"NodeText","Data":"：***"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":"类不再直接控制"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":"的创建。相反，Spring IoC容器负责创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":"实例并将其注入到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":"中。***这就是控制反转：对象的控制权由自己转移到外部容器。"}]}]},{"ID":"20241015203105-03q4nou","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015203105-03q4nou","updated":"20241015203105"},"Children":[{"ID":"20241015203106-qa88x42","Type":"NodeParagraph","Properties":{"id":"20241015203106-qa88x42","updated":"20241015203106"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"依赖注入"},{"Type":"NodeText","Data":"：依赖注入是实现控制反转的手段。Spring IoC容器通过依赖注入将"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyRepository"},{"Type":"NodeText","Data":"的实例提供给"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"MyService"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20241015203107-197xh54","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203107-197xh54","updated":"20241015203107"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"IoC 容器的工作原理"}]},{"ID":"20241015203108-2l2papo","Type":"NodeParagraph","Properties":{"id":"20241015203108-2l2papo","updated":"20241015203108"},"Children":[{"Type":"NodeText","Data":"Spring的IoC容器在启动时会执行以下步骤："}]},{"ID":"20241015203109-4p69l07","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015203109-4p69l07","updated":"20241015203109"},"Children":[{"ID":"20241015203110-zx0aui5","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241015203110-zx0aui5","updated":"20241015203110"},"Children":[{"ID":"20241015203111-0wbt7nk","Type":"NodeParagraph","Properties":{"id":"20241015203111-0wbt7nk","updated":"20241015203111"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"扫描组件"},{"Type":"NodeText","Data":"：通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@ComponentScan"},{"Type":"NodeText","Data":"扫描指定包中的类，找到所有标记了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"及其派生注解的类。"}]}]},{"ID":"20241015203112-wthk09u","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241015203112-wthk09u","updated":"20241015203112"},"Children":[{"ID":"20241015203113-31rbao6","Type":"NodeParagraph","Properties":{"id":"20241015203113-31rbao6","updated":"20241015203113"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建Bean"},{"Type":"NodeText","Data":"：对于每个标记了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Component"},{"Type":"NodeText","Data":"的类，Spring会创建其实例（Bean）。"}]}]},{"ID":"20241015203114-fufpd3k","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241015203114-fufpd3k","updated":"20241015203114"},"Children":[{"ID":"20241015203115-smgt51j","Type":"NodeParagraph","Properties":{"id":"20241015203115-smgt51j","updated":"20241015203115"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"处理依赖"},{"Type":"NodeText","Data":"：对于每个Bean，Spring会自动处理其依赖关系。即，如果某个字段或构造函数参数被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"@Autowired"},{"Type":"NodeText","Data":"标注，Spring会查找匹配的Bean并将其注入。"}]}]},{"ID":"20241015203116-gb1rftc","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20241015203116-gb1rftc","updated":"20241015203116"},"Children":[{"ID":"20241015203117-au3ahqa","Type":"NodeParagraph","Properties":{"id":"20241015203117-au3ahqa","updated":"20241015203117"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"管理生命周期"},{"Type":"NodeText","Data":"：Spring容器还管理Bean的生命周期，确保Bean在需要时被正确创建、初始化、销毁等。"}]}]}]},{"ID":"20241015203118-h8rv5xb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241015203118-h8rv5xb","updated":"20241015203118"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20241015203119-z7s7kql","Type":"NodeParagraph","Properties":{"id":"20241015203119-z7s7kql","updated":"20241015203119"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"控制反转（IoC）"},{"Type":"NodeText","Data":" 是一种设计原则，它将对象的创建和管理职责从应用程序代码中移到外部容器中，从而实现对象之间的松耦合。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"依赖注入（DI）"},{"Type":"NodeText","Data":" 是实现控制反转的主要方式，通过将对象的依赖从外部注入，消除了对象之间的硬编码依赖关系。"}]},{"ID":"20241015203120-dkfd6cy","Type":"NodeParagraph","Properties":{"id":"20241015203120-dkfd6cy","updated":"20241015203120"},"Children":[{"Type":"NodeText","Data":"在Spring Boot中，控制反转和依赖注入结合使用，使得开发者能够更专注于业务逻辑的实现，而不必关注对象的创建和管理，从而提升了代码的灵活性和可维护性。这也是Spring框架强大之处的核心原因之一。"}]}]}