{"ID":"20241019211149-fin3g07","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241019211149-fin3g07","title":"身份校验和身份获取方案","type":"doc","updated":"20241026225619"},"Children":[{"ID":"20241019212359-jiozsw8","Type":"NodeParagraph","Properties":{"id":"20241019212359-jiozsw8","updated":"20241019212404"},"Children":[{"Type":"NodeText","Data":"HTTP的一次请求"}]},{"ID":"20241019212406-n9wt4lq","Type":"NodeList","ListData":{},"Properties":{"id":"20241019212406-n9wt4lq","updated":"20241019214458"},"Children":[{"ID":"20241019212418-sv5wc6n","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019212418-sv5wc6n","updated":"20241019214458"},"Children":[{"ID":"20241019212418-ji34kvj","Type":"NodeParagraph","Properties":{"id":"20241019212418-ji34kvj","updated":"20241019214011"},"Children":[{"Type":"NodeText","Data":"从某一个Controller接收到客户端请求开始，到service、mapper处理，然后服务端响应结束，一次HTTP请求就结束了。"}]},{"ID":"20241019213906-f2zs0ui","Type":"NodeParagraph","Properties":{"id":"20241019213906-f2zs0ui","updated":"20241019213917"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241019213906-lbizm0r.png"},{"Type":"NodeLinkSpace"},{"Type":"NodeLinkTitle","Data":"一次HTTP请求"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019214442-rzaqkwq","Type":"NodeParagraph","Properties":{"id":"20241019214442-rzaqkwq","updated":"20241019214458"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241019214442-5f7g9y3.png"},{"Type":"NodeLinkSpace"},{"Type":"NodeLinkTitle","Data":"在浏览器中查看一次HTTP请求"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20241019215849-79fgtop","Type":"NodeParagraph","Properties":{"id":"20241019215849-79fgtop","updated":"20241019215849"}},{"ID":"20241019212126-noic4y6","Type":"NodeParagraph","Properties":{"id":"20241019212126-noic4y6","updated":"20241019214521"},"Children":[{"Type":"NodeText","Data":"什么是身份校验"}]},{"ID":"20241019212148-vi6r8e3","Type":"NodeList","ListData":{},"Properties":{"id":"20241019212148-vi6r8e3","updated":"20241019221947"},"Children":[{"ID":"20241019212149-py54578","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019212149-py54578","updated":"20241019212149"},"Children":[{"ID":"20241019212150-b3nu20b","Type":"NodeParagraph","Properties":{"id":"20241019212150-b3nu20b","updated":"20241019212150"},"Children":[{"Type":"NodeText","Data":"首先在用户第一次登录的时候，我们对用户的身份进行校验（从数据库中对比用户名和密码），通过之后，给用户发一个"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"东西"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241019212150-t5oplkb","Type":"NodeParagraph","Properties":{"id":"20241019212150-t5oplkb","updated":"20241019215319"},"Children":[{"Type":"NodeText","Data":"由于HTTP请求是无状态的，下一次请求的时候，服务端又不知道你是谁了，因为用户不可能每次请求都带上用户名密码来数据库校验，所以要用到发的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"东西"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241019212150-7qka2o7","Type":"NodeParagraph","Properties":{"id":"20241019212150-7qka2o7","updated":"20241019215321"},"Children":[{"Type":"NodeText","Data":"用户之后的每次请求都带上这个"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"东西"},{"Type":"NodeText","Data":"，在拦截器里面对这个东西进行解析，确认用户的身份，完成身份校验。"}]}]},{"ID":"20241019215324-uv50o0q","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019215324-uv50o0q","updated":"20241019221947"},"Children":[{"ID":"20241019215324-858dw25","Type":"NodeParagraph","Properties":{"id":"20241019215324-858dw25","updated":"20241019215631"},"Children":[{"Type":"NodeText","Data":"这个"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"东西"}]},{"ID":"20241019215435-yt6cw2r","Type":"NodeList","ListData":{},"Properties":{"id":"20241019215435-yt6cw2r","updated":"20241019221947"},"Children":[{"ID":"20241019215441-p53pivi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019215441-p53pivi","updated":"20241019221947"},"Children":[{"ID":"20241019215441-nt2q7yf","Type":"NodeParagraph","Properties":{"id":"20241019215441-nt2q7yf","updated":"20241019215441"},"Children":[{"Type":"NodeText","Data":"可以是一个token"}]},{"ID":"20241019215445-3lb667b","Type":"NodeList","ListData":{},"Properties":{"id":"20241019215445-3lb667b","updated":"20241019221947"},"Children":[{"ID":"20241019215447-6sd3sr1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019215447-6sd3sr1","updated":"20241019215447"},"Children":[{"ID":"20241019215447-igl46u2","Type":"NodeParagraph","Properties":{"id":"20241019215447-igl46u2","updated":"20241019221401"},"Children":[{"Type":"NodeText","Data":"session方案：把session的id作为token发给用户，下次一个请求到达时，根据携带的session中的id，找到相应的会话，会话中存储了用户信息"}]}]},{"ID":"20241019221403-f7laxsp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019221403-f7laxsp","updated":"20241019221947"},"Children":[{"ID":"20241019221403-ae37ixp","Type":"NodeParagraph","Properties":{"id":"20241019221403-ae37ixp","updated":"20241019221947"},"Children":[{"Type":"NodeText","Data":"Redis存储token方案：用Redis存储一个键值对（key=UUID, value=用户信息 userMap）。登录成功后把UUID作为token响应给客户端，下一次请求到达时，在Redis中拿到用户信息"}]}]}]}]},{"ID":"20241019215449-lf8xtm7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019215449-lf8xtm7","updated":"20241019220047"},"Children":[{"ID":"20241019215449-ltpzoe6","Type":"NodeParagraph","Properties":{"id":"20241019215449-ltpzoe6","updated":"20241019215501"},"Children":[{"Type":"NodeText","Data":"可以是JWT令牌"}]},{"ID":"20241019215639-b1togma","Type":"NodeList","ListData":{},"Properties":{"id":"20241019215639-b1togma","updated":"20241019220047"},"Children":[{"ID":"20241019215640-j0cjpef","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019215640-j0cjpef","updated":"20241019220047"},"Children":[{"ID":"20241019215640-dmea3vc","Type":"NodeParagraph","Properties":{"id":"20241019215640-dmea3vc","updated":"20241019220047"},"Children":[{"Type":"NodeText","Data":"JWT方案：把用户信息直接放到JWT令牌中，每次请求到达后都可以在带过来的JWT令牌中直接拿到用户信息。令牌解析的工作可以在拦截器中完成。"}]}]}]}]}]}]},{"ID":"20241019215835-5mg9cm1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019215835-5mg9cm1","updated":"20241019220136"},"Children":[{"ID":"20241019215835-rttpfd3","Type":"NodeParagraph","Properties":{"id":"20241019215835-rttpfd3","updated":"20241019220136"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这个东西的目的/身份校验的两个目的"},{"Type":"NodeText","Data":"：通过这个"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"东西"},{"Type":"NodeText","Data":"，可以在每次请求到达服务器后，①知道这个请求是否来自一个合法的用户，②以及是哪一个用户（即根据请求中携带的这个"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"东西"},{"Type":"NodeText","Data":"获得"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text","TextMarkTextContent":"用户信息"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"）"}]}]}]},{"ID":"20241019215850-r0voc43","Type":"NodeParagraph","Properties":{"id":"20241019215850-r0voc43","updated":"20241019215850"}},{"ID":"20241019212153-ed7omlb","Type":"NodeParagraph","Properties":{"id":"20241019212153-ed7omlb","updated":"20241019212200"},"Children":[{"Type":"NodeText","Data":"什么是身份获取"}]},{"ID":"20241019215215-zxlhuve","Type":"NodeList","ListData":{},"Properties":{"id":"20241019215215-zxlhuve","updated":"20241019221216"},"Children":[{"ID":"20241019220058-82ad3ln","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019220058-82ad3ln","updated":"20241019221216"},"Children":[{"ID":"20241019220058-23jm6g9","Type":"NodeParagraph","Properties":{"id":"20241019220058-23jm6g9","updated":"20241019221216"},"Children":[{"Type":"NodeText","Data":"在身份校验中获得"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text","TextMarkTextContent":"用户信息"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"后（例如当前登录用户的用户名，id等信息），在这一次请求中很多地方都会用到，所以我们把它放到一个地方存起来，在这次请求中要用直接拿来用，请求结束（服务器响应后）就删掉这一个用户的信息。"}]}]},{"ID":"20241019215216-4bfiy0a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019215216-4bfiy0a","updated":"20241019220529"},"Children":[{"ID":"20241019215216-23iiwdp","Type":"NodeParagraph","Properties":{"id":"20241019215216-23iiwdp","updated":"20241019220359"},"Children":[{"Type":"NodeText","Data":"纵向来说：在一次请求中，Controller、Service、Mapper中都可能用到用户信息"}]},{"ID":"20241019220400-htjb360","Type":"NodeParagraph","Properties":{"id":"20241019220400-htjb360","updated":"20241019220529"},"Children":[{"Type":"NodeText","Data":"横向来说：不同的Controller中都会用到用户信息"}]}]},{"ID":"20241019220522-p1zuhsg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019220522-p1zuhsg","updated":"20241019220635"},"Children":[{"ID":"20241019220522-2u9s19n","Type":"NodeParagraph","Properties":{"id":"20241019220522-2u9s19n","updated":"20241019220635"},"Children":[{"Type":"NodeText","Data":"如果在每个Controller中解析用户信息，那就太多重复代码了，因此考虑在拦截器中直接解析了，存到ThreadLocal中去，在这次请求中随时拿出来用，服务器响应后在后面删掉ThreadLocal中的信息。"}]}]}]},{"ID":"20241019212201-bfhci39","Type":"NodeParagraph","Properties":{"id":"20241019212201-bfhci39","updated":"20241019212201"}},{"ID":"20241019211149-s9q91kb","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20241019211149-s9q91kb","updated":"20241019224746"},"Children":[{"Type":"NodeText","Data":"1.身份校验"}]},{"ID":"20241019211228-jcjkff3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241019211228-jcjkff3","updated":"20241019224746"},"Children":[{"Type":"NodeText","Data":"1.1 session方案"}]},{"ID":"20241019222417-i1y7nxn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019222417-i1y7nxn","updated":"20241019224108"},"Children":[{"Type":"NodeText","Data":"主要流程"}]},{"ID":"20241019222505-p3jsomd","Type":"NodeList","ListData":{},"Properties":{"id":"20241019222505-p3jsomd","updated":"20241019223316"},"Children":[{"ID":"20241019222505-qveb2c6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019222505-qveb2c6","updated":"20241019222505"},"Children":[{"ID":"20241019222505-u7ukxcw","Type":"NodeParagraph","Properties":{"id":"20241019222505-u7ukxcw","updated":"20241019222505"},"Children":[{"Type":"NodeText","Data":"获取Session"}]},{"ID":"20241019222505-y1rlf80","Type":"NodeParagraph","Properties":{"id":"20241019222505-y1rlf80","updated":"20241019222505"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112105938545"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112105938545-20241015202541-zebeciv.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019222505-vizpvyi","Type":"NodeParagraph","Properties":{"id":"20241019222505-vizpvyi","updated":"20241019222505"},"Children":[{"Type":"NodeText","Data":"如果我们现在要基于 Session 来进行会话跟踪，浏览器在第一次请求服务器的时候，我们就可以直接在服务器当中来获取到会话对象Session。如果是第一次请求Session ，会话对象是不存在的，这个时候服务器会自动的创建一个会话对象Session 。而每一个会话对象Session ，它都有一个ID（示意图中Session后面括号中的1，就表示ID），我们称之为 Session 的ID。"}]}]},{"ID":"20241019222505-au9fn11","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019222505-au9fn11","updated":"20241019223316"},"Children":[{"ID":"20241019222505-ccpjqjn","Type":"NodeParagraph","Properties":{"id":"20241019222505-ccpjqjn","updated":"20241019222505"},"Children":[{"Type":"NodeText","Data":"响应Cookie (JSESSIONID)"}]},{"ID":"20241019222505-d1pzjft","Type":"NodeParagraph","Properties":{"id":"20241019222505-d1pzjft","updated":"20241019222505"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112110441075"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112110441075-20241015202541-jnlrcnj.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019222505-59l41db","Type":"NodeParagraph","Properties":{"id":"20241019222505-59l41db","updated":"20241019223316"},"Children":[{"Type":"NodeText","Data":"接下来，服务器端在给浏览器响应数据的时候，它会将 "},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color12);"},"TextMarkType":"strong text","TextMarkTextContent":"Session 的 ID"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color12);\"}"},{"Type":"NodeText","Data":" 通过 Cookie 响应给浏览器。其实在"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text strong","TextMarkTextContent":"响应头"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"当中增加了一个  "},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text strong","TextMarkTextContent":"Set-Cookie 响应头"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"。这个  Set-Cookie  响应头对应的值是不是cookie？ cookie 的名字是固定的"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color12);"},"TextMarkType":"text","TextMarkTextContent":" "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color12);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color12);"},"TextMarkType":"text strong","TextMarkTextContent":"JSESSIONID"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color12);\"}"},{"Type":"NodeText","Data":" 代表的服务器端会话对象 Session 的 ID。浏览器会自动识别这个响应头，然后"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text strong","TextMarkTextContent":"自动将Cookie存储在浏览器本地"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20241019222505-ochkxyo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019222505-ochkxyo","updated":"20241019223110"},"Children":[{"ID":"20241019222505-ul9t1lv","Type":"NodeParagraph","Properties":{"id":"20241019222505-ul9t1lv","updated":"20241019222505"},"Children":[{"Type":"NodeText","Data":"查找Session"}]},{"ID":"20241019222505-nor8p4g","Type":"NodeParagraph","Properties":{"id":"20241019222505-nor8p4g","updated":"20241019222505"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112101943835"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112101943835-20241015202541-e6gbkhy.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019222505-cubm2g3","Type":"NodeParagraph","Properties":{"id":"20241019222505-cubm2g3","updated":"20241019223110"},"Children":[{"Type":"NodeText","Data":"接下来，在后续的"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text strong","TextMarkTextContent":"每一次请求当中"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"，都会将 Cookie 的数据获取出来，并且携带到服务端。接下来服务器拿到"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color12);"},"TextMarkType":"text strong","TextMarkTextContent":"JSESSIONID"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color12);\"}"},{"Type":"NodeText","Data":"这个 Cookie 的值，也就是  "},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text strong","TextMarkTextContent":"Session 的ID"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"。拿到 ID 之后，就会"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"text strong","TextMarkTextContent":"从众多的 Session 当中来找到当前请求对应的会话对象Session"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"。注意，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color8);"},"TextMarkType":"strong text","TextMarkTextContent":"这是服务器自动进行的"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color8);\"}"},{"Type":"NodeText","Data":"，你直接用session对象"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"session.getAttribute(\u0026quot;loginUser\u0026quot;)"},{"Type":"NodeText","Data":"​就能拿到用户信息了。"}]},{"ID":"20241019222505-ziytetn","Type":"NodeParagraph","Properties":{"id":"20241019222505-ziytetn","updated":"20241019223001"},"Children":[{"Type":"NodeText","Data":"这样我们是不是就可以通过 Session 会话对象在同一次会话的多次请求之间来共享数据了？好，这就是基于 Session 进行会话跟踪的流程。"}]}]}]},{"ID":"20241019224108-3bsslf1","Type":"NodeParagraph","Properties":{"id":"20241019224108-3bsslf1","updated":"20241019224108"}},{"ID":"20241019223340-2xwosjy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019223340-2xwosjy","updated":"20241019224110"},"Children":[{"Type":"NodeText","Data":"快速总结"}]},{"ID":"20241019223340-rs1hjsy","Type":"NodeParagraph","Properties":{"id":"20241019223340-rs1hjsy","updated":"20241019223538"},"Children":[{"Type":"NodeText","Data":"将session的id放到cookie的JSESSIONID字段中带回浏览器，请求的时候服务器自动从这个cookie中拿到session的id，自动找到对应的会话对象session，你直接用session对象就能获取到用户信息了。"}]},{"ID":"20241019224110-gllayf7","Type":"NodeParagraph","Properties":{"id":"20241019224110-gllayf7","updated":"20241019224110"}},{"ID":"20241019222702-omqcivi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019222702-omqcivi","updated":"20241019223556"},"Children":[{"Type":"NodeText","Data":"代码实现"}]},{"ID":"20241019222730-mrf949a","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241019222730-mrf949a","updated":"20241019223556"},"Children":[{"Type":"NodeText","Data":"简单演示"}]},{"ID":"20241019222721-jp0ra25","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241019222721-jp0ra25","updated":"20241019223230"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Slf4j\n@RestController\npublic class SessionController {\n\n    @GetMapping(\"/s1\")\n    public Result session1(HttpSession session){\n        log.info(\"HttpSession-s1: {}\", session.hashCode());\n\n        session.setAttribute(\"loginUser\", \"tom\"); // 往session中存储数据【用户信息】\n        return Result.success();\n    }\n\n    @GetMapping(\"/s2\")\n    public Result session2(HttpServletRequest request){\n        HttpSession session = request.getSession();\n        log.info(\"HttpSession-s2: {}\", session.hashCode());\n\t\t// 不需要你去JSESSIONID中拿，服务器自动帮你拿，你直接用session对象就完事了\n        Object loginUser = session.getAttribute(\"loginUser\"); // 从session中获取数据【用户信息】\n        log.info(\"loginUser: {}\", loginUser);\n        return Result.success(loginUser);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241019222721-v1ud93d","Type":"NodeParagraph","Properties":{"id":"20241019222721-v1ud93d","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"A. 访问 s1 接口，http://localhost:8080/s1"}]},{"ID":"20241019222721-nti9dr2","Type":"NodeParagraph","Properties":{"id":"20241019222721-nti9dr2","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112111004447"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112111004447-20241015202541-wrt5fd8.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019222721-rgmz3xu","Type":"NodeParagraph","Properties":{"id":"20241019222721-rgmz3xu","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"请求完成之后，在响应头中，就会看到有一个Set-Cookie的响应头，里面响应回来了一个Cookie，就是JSESSIONID，这个就是服务端会话对象 Session 的ID。"}]},{"ID":"20241019222721-hapnew0","Type":"NodeParagraph","Properties":{"id":"20241019222721-hapnew0","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"B. 访问 s2 接口，http://localhost:8080/s2"}]},{"ID":"20241019222721-ndkgado","Type":"NodeParagraph","Properties":{"id":"20241019222721-ndkgado","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112111137207"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112111137207-20241015202541-1o2g85i.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019222721-4qf93h2","Type":"NodeParagraph","Properties":{"id":"20241019222721-4qf93h2","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"接下来，在后续的每次请求时，都会将Cookie的值，携带到服务端，那服务端呢，接收到Cookie之后，会自动的根据JSESSIONID的值，找到对应的会话对象Session。"}]},{"ID":"20241019222721-6fzg48c","Type":"NodeParagraph","Properties":{"id":"20241019222721-6fzg48c","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"那经过这两步测试，大家也会看到，在控制台中输出如下日志："}]},{"ID":"20241019222721-qtchpf4","Type":"NodeParagraph","Properties":{"id":"20241019222721-qtchpf4","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112111328117"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112111328117-20241015202541-ut2ddyv.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019222721-lv7w5xe","Type":"NodeParagraph","Properties":{"id":"20241019222721-lv7w5xe","updated":"20241019222721"},"Children":[{"Type":"NodeText","Data":"两次请求，获取到的Session会话对象的hashcode是一样的，就说明是同一个会话对象。而且，第一次请求时，往Session会话对象中存储的值，第二次请求时，也获取到了。 那这样，我们就可以通过Session会话对象，在同一个会话的多次请求之间来进行数据共享了。"}]},{"ID":"20241019223556-goar769","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241019223556-goar769","updated":"20241019224242"},"Children":[{"Type":"NodeText","Data":"真实代码"}]},{"ID":"20241019223606-d42u3w6","Type":"NodeParagraph","Properties":{"id":"20241019223606-d42u3w6","updated":"20241019224049"},"Children":[{"Type":"NodeText","Data":"用户在请求时候，会从cookie中携带者JsessionId到后台，后台通过JsessionId从session中拿到用户信息，如果没有session信息，则进行拦截，如果有session信息，则将用户信息保存到threadLocal中，并且放行"}]},{"ID":"20241019224115-n9iwsfm","Type":"NodeParagraph","Properties":{"id":"20241019224115-n9iwsfm","updated":"20241019224242"},"Children":[{"Type":"NodeText","Data":"因为这个方案很没用，所以真实代码看看上面的方案就行了，具体实现在这里："},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241016211693-c5xksdp","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"1.2 、基于Session实现登录流程"}]},{"ID":"20241019224051-u5n2tvh","Type":"NodeParagraph","Properties":{"id":"20241019224051-u5n2tvh","updated":"20241019224057"}},{"ID":"20241019223637-9isr7ro","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019223637-9isr7ro","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"优缺点分析"}]},{"ID":"20241019223654-rzcpilc","Type":"NodeList","ListData":{},"Properties":{"id":"20241019223654-rzcpilc","updated":"20241019223809"},"Children":[{"ID":"20241019223654-la0xgq3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019223654-la0xgq3","updated":"20241019223654"},"Children":[{"ID":"20241019223654-j9bpufp","Type":"NodeParagraph","Properties":{"id":"20241019223654-j9bpufp","updated":"20241019223654"},"Children":[{"Type":"NodeText","Data":"优点：Session是存储在服务端的，安全"}]}]},{"ID":"20241019223654-kiyocf3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019223654-kiyocf3","updated":"20241019223809"},"Children":[{"ID":"20241019223654-fia4tia","Type":"NodeParagraph","Properties":{"id":"20241019223654-fia4tia","updated":"20241019223654"},"Children":[{"Type":"NodeText","Data":"缺点："}]},{"ID":"20241019223654-5tycwq6","Type":"NodeList","ListData":{},"Properties":{"id":"20241019223654-5tycwq6","updated":"20241019223809"},"Children":[{"ID":"20241019223654-01yjuu7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019223654-01yjuu7","updated":"20241019223654"},"Children":[{"ID":"20241019223654-wdi33oz","Type":"NodeParagraph","Properties":{"id":"20241019223654-wdi33oz","updated":"20241019223706"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color8);"},"TextMarkType":"text","TextMarkTextContent":"服务器集群环境下无法直接使用Session"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color8);\"}"}]}]},{"ID":"20241019223717-bum3m14","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019223717-bum3m14","updated":"20241019223809"},"Children":[{"ID":"20241019223717-tnfaq3o","Type":"NodeParagraph","Properties":{"id":"20241019223717-tnfaq3o","updated":"20241019223738"},"Children":[{"Type":"NodeText","Data":"基于Cookie，Cookie失效就全完蛋"}]},{"ID":"20241019223654-omqn9yv","Type":"NodeList","ListData":{},"Properties":{"id":"20241019223654-omqn9yv","updated":"20241019223809"},"Children":[{"ID":"20241019223742-g74nofh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019223742-g74nofh","updated":"20241019223742"},"Children":[{"ID":"20241019223742-uk8ft0j","Type":"NodeParagraph","Properties":{"id":"20241019223742-uk8ft0j","updated":"20241019223742"},"Children":[{"Type":"NodeText","Data":"移动端APP(Android、IOS)中无法使用Cookie"}]}]},{"ID":"20241019223746-3jqiwjr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019223746-3jqiwjr","updated":"20241019223746"},"Children":[{"ID":"20241019223746-aui6loi","Type":"NodeParagraph","Properties":{"id":"20241019223746-aui6loi","updated":"20241019223746"},"Children":[{"Type":"NodeText","Data":"用户可以自己禁用Cookie"}]}]},{"ID":"20241019223751-9bzxo59","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019223751-9bzxo59","updated":"20241019223809"},"Children":[{"ID":"20241019223751-0faefb3","Type":"NodeParagraph","Properties":{"id":"20241019223751-0faefb3","updated":"20241019223809"},"Children":[{"Type":"NodeText","Data":"Cookie不能跨域，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color8);"},"TextMarkType":"text","TextMarkTextContent":"前后端分离的项目不能用"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color8);\"}"}]}]}]}]}]}]}]},{"ID":"20241019224254-uavw81q","Type":"NodeParagraph","Properties":{"id":"20241019224254-uavw81q","updated":"20241019224254"}},{"ID":"20241019224554-6y3zyof","Type":"NodeList","ListData":{},"Properties":{"id":"20241019224554-6y3zyof","updated":"20241019224609"},"Children":[{"ID":"20241019224555-2jx5n1u","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"fold":"1","id":"20241019224555-2jx5n1u","updated":"20241019224609"},"Children":[{"ID":"20241019224609-b6kkgpa","Type":"NodeParagraph","Properties":{"id":"20241019224609-b6kkgpa","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"服务器集群环境为何无法使用Session？"}]},{"ID":"20241019224609-8e2a1hd","Type":"NodeParagraph","Properties":{"id":"20241019224609-8e2a1hd","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"    "},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241018000643-9yjncl2.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019224609-df31okm","Type":"NodeList","ListData":{},"Properties":{"id":"20241019224609-df31okm","updated":"20241019224609"},"Children":[{"ID":"20241019224609-zjd8bud","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224609-zjd8bud","updated":"20241019224609"},"Children":[{"ID":"20241019224609-bjo410j","Type":"NodeParagraph","Properties":{"id":"20241019224609-bjo410j","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"首先第一点，我们现在所开发的项目，一般都不会只部署在一台服务器上，因为一台服务器会存在一个很大的问题，就是单点故障。所谓单点故障，指的就是一旦这台服务器挂了，整个应用都没法访问了。"}]}]}]},{"ID":"20241019224609-j1u4wq6","Type":"NodeParagraph","Properties":{"id":"20241019224609-j1u4wq6","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"    "},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112112740131"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112112740131-20241015202541-yz0liyr.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019224609-etjov45","Type":"NodeList","ListData":{},"Properties":{"id":"20241019224609-etjov45","updated":"20241019224609"},"Children":[{"ID":"20241019224609-239tmvh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224609-239tmvh","updated":"20241019224609"},"Children":[{"ID":"20241019224609-wcx8lxd","Type":"NodeParagraph","Properties":{"id":"20241019224609-wcx8lxd","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"所以在现在的企业项目开发当中，最终部署的时候都是以集群的形式来进行部署，也就是同一个项目它会部署多份。比如这个项目我们现在就部署了 3 份。"}]}]},{"ID":"20241019224609-f500il4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224609-f500il4","updated":"20241019224609"},"Children":[{"ID":"20241019224609-5jjmz2p","Type":"NodeParagraph","Properties":{"id":"20241019224609-5jjmz2p","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"而用户在访问的时候，到底访问这三台其中的哪一台？其实用户在访问的时候，他会访问一台前置的服务器，我们叫负载均衡服务器，我们在后面项目当中会详细讲解。目前大家先有一个印象负载均衡服务器，它的作用就是将前端发起的请求均匀的分发给后面的这三台服务器。"}]},{"ID":"20241019224609-8tcqn7e","Type":"NodeParagraph","Properties":{"id":"20241019224609-8tcqn7e","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112113558810"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112113558810-20241015202541-vakfwo8.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20241019224609-lv7d4lp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224609-lv7d4lp","updated":"20241019224609"},"Children":[{"ID":"20241019224609-6j52xob","Type":"NodeParagraph","Properties":{"id":"20241019224609-6j52xob","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"此时假如我们通过 session 来进行会话跟踪，可能就会存在这样一个问题。用户打开浏览器要进行登录操作，此时会发起登录请求。登录请求到达负载均衡服务器，将这个请求转给了第一台 Tomcat 服务器。"}]},{"ID":"20241019224609-p6msqa1","Type":"NodeParagraph","Properties":{"id":"20241019224609-p6msqa1","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"Tomcat 服务器接收到请求之后，要获取到会话对象session。获取到会话对象 session 之后，要给浏览器响应数据，最终在给浏览器响应数据的时候，就会携带这么一个 cookie 的名字，就是 JSESSIONID ，下一次再请求的时候，是不是又会将 Cookie 携带到服务端？"}]},{"ID":"20241019224609-e3kekgo","Type":"NodeParagraph","Properties":{"id":"20241019224609-e3kekgo","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"好。此时假如又执行了一次查询操作，要查询部门的数据。这次请求到达负载均衡服务器之后，负载均衡服务器将这次请求转给了第二台 Tomcat 服务器，此时他就要到第二台 Tomcat 服务器当中。根据JSESSIONID 也就是对应的 session 的 ID 值，要找对应的 session 会话对象。"}]},{"ID":"20241019224609-u2rgdhi","Type":"NodeParagraph","Properties":{"id":"20241019224609-u2rgdhi","updated":"20241019224609"},"Children":[{"Type":"NodeText","Data":"我想请问在第二台服务器当中有没有这个ID的会话对象 Session， 是没有的。此时是不是就出现问题了？我同一个浏览器发起了 2 次请求，结果获取到的不是同一个会话对象，这就是Session这种会话跟踪方案它的缺点，在服务器集群环境下无法直接使用Session。"}]}]}]}]}]},{"ID":"20241019224456-q4y34as","Type":"NodeList","ListData":{},"Properties":{"id":"20241019224456-q4y34as","updated":"20241019224502"},"Children":[{"ID":"20241019224501-djpx0yh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224501-djpx0yh","updated":"20241019224502"},"Children":[{"ID":"20241019224502-g5s8xg3","Type":"NodeParagraph","Properties":{"id":"20241019224502-g5s8xg3","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"补充：服务器集群环境为何无法使用Session？"}]},{"ID":"20241019224502-4qz1v54","Type":"NodeParagraph","Properties":{"id":"20241019224502-4qz1v54","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"    "},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20241018000643-9yjncl2.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019224502-091v348","Type":"NodeList","ListData":{},"Properties":{"id":"20241019224502-091v348","updated":"20241019224502"},"Children":[{"ID":"20241019224502-bhthpn2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224502-bhthpn2","updated":"20241019224502"},"Children":[{"ID":"20241019224502-cxl3jk5","Type":"NodeParagraph","Properties":{"id":"20241019224502-cxl3jk5","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"首先第一点，我们现在所开发的项目，一般都不会只部署在一台服务器上，因为一台服务器会存在一个很大的问题，就是单点故障。所谓单点故障，指的就是一旦这台服务器挂了，整个应用都没法访问了。"}]}]}]},{"ID":"20241019224502-fadq74q","Type":"NodeParagraph","Properties":{"id":"20241019224502-fadq74q","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"    "},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112112740131"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112112740131-20241015202541-yz0liyr.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241019224502-1n5ojiq","Type":"NodeList","ListData":{},"Properties":{"id":"20241019224502-1n5ojiq","updated":"20241019224502"},"Children":[{"ID":"20241019224502-hirj38o","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224502-hirj38o","updated":"20241019224502"},"Children":[{"ID":"20241019224502-oy9g0bk","Type":"NodeParagraph","Properties":{"id":"20241019224502-oy9g0bk","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"所以在现在的企业项目开发当中，最终部署的时候都是以集群的形式来进行部署，也就是同一个项目它会部署多份。比如这个项目我们现在就部署了 3 份。"}]}]},{"ID":"20241019224502-5wlx04z","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224502-5wlx04z","updated":"20241019224502"},"Children":[{"ID":"20241019224502-d7au9yn","Type":"NodeParagraph","Properties":{"id":"20241019224502-d7au9yn","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"而用户在访问的时候，到底访问这三台其中的哪一台？其实用户在访问的时候，他会访问一台前置的服务器，我们叫负载均衡服务器，我们在后面项目当中会详细讲解。目前大家先有一个印象负载均衡服务器，它的作用就是将前端发起的请求均匀的分发给后面的这三台服务器。"}]},{"ID":"20241019224502-vjbjqm4","Type":"NodeParagraph","Properties":{"id":"20241019224502-vjbjqm4","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230112113558810"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230112113558810-20241015202541-vakfwo8.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20241019224502-2913bls","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241019224502-2913bls","updated":"20241019224502"},"Children":[{"ID":"20241019224502-qh1s5dx","Type":"NodeParagraph","Properties":{"id":"20241019224502-qh1s5dx","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"此时假如我们通过 session 来进行会话跟踪，可能就会存在这样一个问题。用户打开浏览器要进行登录操作，此时会发起登录请求。登录请求到达负载均衡服务器，将这个请求转给了第一台 Tomcat 服务器。"}]},{"ID":"20241019224502-0i1qqgy","Type":"NodeParagraph","Properties":{"id":"20241019224502-0i1qqgy","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"Tomcat 服务器接收到请求之后，要获取到会话对象session。获取到会话对象 session 之后，要给浏览器响应数据，最终在给浏览器响应数据的时候，就会携带这么一个 cookie 的名字，就是 JSESSIONID ，下一次再请求的时候，是不是又会将 Cookie 携带到服务端？"}]},{"ID":"20241019224502-q6lnocm","Type":"NodeParagraph","Properties":{"id":"20241019224502-q6lnocm","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"好。此时假如又执行了一次查询操作，要查询部门的数据。这次请求到达负载均衡服务器之后，负载均衡服务器将这次请求转给了第二台 Tomcat 服务器，此时他就要到第二台 Tomcat 服务器当中。根据JSESSIONID 也就是对应的 session 的 ID 值，要找对应的 session 会话对象。"}]},{"ID":"20241019224502-hp7hot7","Type":"NodeParagraph","Properties":{"id":"20241019224502-hp7hot7","updated":"20241019224502"},"Children":[{"Type":"NodeText","Data":"我想请问在第二台服务器当中有没有这个ID的会话对象 Session， 是没有的。此时是不是就出现问题了？我同一个浏览器发起了 2 次请求，结果获取到的不是同一个会话对象，这就是Session这种会话跟踪方案它的缺点，在服务器集群环境下无法直接使用Session。"}]}]}]},{"ID":"20241019224550-27lokme","Type":"NodeParagraph","Properties":{"id":"20241019224550-27lokme","updated":"20241019224502"}}]}]},{"ID":"20241019224404-hcnfizw","Type":"NodeBlockquote","Properties":{"id":"20241019224404-hcnfizw","updated":"20241019224406"},"Children":[{"ID":"20241019224406-2xv4uv9","Type":"NodeParagraph","Properties":{"id":"20241019224406-2xv4uv9","updated":"20241019224406"}},{"Type":"NodeBlockquoteMarker","Data":"\u003e"}]},{"ID":"20241019224340-8ltv41f","Type":"NodeParagraph","Properties":{"id":"20241019224340-8ltv41f","updated":"20241019224454"}},{"ID":"20241019223752-xu93iio","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019223752-xu93iio","updated":"20241019224308"},"Children":[{"Type":"NodeText","Data":"应用"}]},{"ID":"20241019223819-rjylx57","Type":"NodeParagraph","Properties":{"id":"20241019223819-rjylx57","updated":"20241019223906"},"Children":[{"Type":"NodeText","Data":"很没用：只能用在单体（非集群）、前后端不分离的项目中"}]},{"ID":"20241019224259-cqqhm7x","Type":"NodeParagraph","Properties":{"id":"20241019224259-cqqhm7x","updated":"20241019224259"}},{"ID":"20241019224308-7wweoxc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241019224308-7wweoxc","updated":"20241019233159"},"Children":[{"Type":"NodeText","Data":"1.2 JWT方案"}]},{"ID":"20241019233145-5ygvww2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019233145-5ygvww2","updated":"20241019233159"},"Children":[{"Type":"NodeText","Data":"主要流程"}]},{"ID":"20241019224641-nf6d1m9","Type":"NodeParagraph","Properties":{"id":"20241019224641-nf6d1m9","updated":"20241019233031"},"Children":[{"Type":"NodeText","Data":"登录时数据库校验完数据库中的用户密码后，服务器响应一个JWT令牌，JWT令牌可以看做是一个加密后的用户信息（用户信息例如用户名、id直接加密后放在令牌中）。"}]},{"ID":"20241019233033-1iiithk","Type":"NodeParagraph","Properties":{"id":"20241019233033-1iiithk","updated":"20241019233115"},"Children":[{"Type":"NodeText","Data":"在前端程序当中接收到令牌之后，就需要将这个令牌存储起来。这个存储可以存储在 cookie 当中，也可以存储在其他的存储空间(比如：localStorage)当中。"}]},{"ID":"20241019233117-qrzaqfw","Type":"NodeParagraph","Properties":{"id":"20241019233117-qrzaqfw","updated":"20241019233131"},"Children":[{"Type":"NodeText","Data":"接下来，在后续的每一次请求当中，都需要将令牌携带到服务端。携带到服务端之后，接下来我们就需要来校验令牌的有效性。如果令牌是有效的，就说明用户已经执行了登录操作，如果令牌是无效的，就说明用户之前并未执行登录操作。"}]},{"ID":"20241019224641-r8x5g86","Type":"NodeParagraph","Properties":{"id":"20241019224641-r8x5g86","updated":"20241019224641"}},{"ID":"20241019233159-25uc1yf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019233159-25uc1yf","updated":"20241019233615"},"Children":[{"Type":"NodeText","Data":"代码实现"}]},{"ID":"20241019233338-zai6k7k","Type":"NodeParagraph","Properties":{"id":"20241019233338-zai6k7k","updated":"20241019233428"},"Children":[{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241015201511-k57wcdu","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"2.3 JWT令牌"}]},{"ID":"20241019233609-8a4h6yn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241019233609-8a4h6yn","updated":"20241019233615"},"Children":[{"Type":"NodeText","Data":"工具类"}]},{"ID":"20241019233616-zvjeimz","Type":"NodeParagraph","Properties":{"id":"20241019233616-zvjeimz","updated":"20241019233616"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"JWT工具类"}]},{"ID":"20241019233639-698xnta","Type":"NodeParagraph","Properties":{"id":"20241019233639-698xnta","updated":"20241019233639"},"Children":[{"Type":"NodeText","Data":"在项目工程下创建com.itheima.utils包，并把提供JWT工具类复制到该包下"}]},{"ID":"20241019233616-hylflfn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241019233616-hylflfn","updated":"20241019233616"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class JwtUtils {\n\n    private static String signKey = \"itheima\";//签名密钥\n    private static Long expire = 43200000L; //有效时间\n\n    /**\n     * 生成JWT令牌\n     * @param claims JWT第二部分负载 payload 中存储的内容\n     * @return\n     */\n    public static String generateJwt(Map\u003cString, Object\u003e claims){\n        String jwt = Jwts.builder()\n                .addClaims(claims)//自定义信息（有效载荷）\n                .signWith(SignatureAlgorithm.HS256, signKey)//签名算法（头部）\n                .setExpiration(new Date(System.currentTimeMillis() + expire))//过期时间\n                .compact();\n        return jwt;\n    }\n\n    /**\n     * 解析JWT令牌\n     * @param jwt JWT令牌\n     * @return JWT第二部分负载 payload 中存储的内容\n     */\n    public static Claims parseJWT(String jwt){\n        Claims claims = Jwts.parser()\n                .setSigningKey(signKey)//指定签名密钥\n                .parseClaimsJws(jwt)//指定令牌Token\n                .getBody();\n        return claims;\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241019233207-dr0iekn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241019233207-dr0iekn","updated":"20241019233544"},"Children":[{"Type":"NodeText","Data":"登录下发JWT"}]},{"ID":"20241019233316-mqqu8lb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241019233316-mqqu8lb","updated":"20241019233544"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@RestController\n@Slf4j\npublic class LoginController {\n    //依赖业务层对象\n    @Autowired\n    private EmpService empService;\n\n    @PostMapping(\"/login\")\n    public Result login(@RequestBody Emp emp) {\n        //调用业务层：登录功能【数据库查询用户】\n        Emp loginEmp = empService.login(emp);\n\n        //判断：登录用户是否存在\n        if(loginEmp !=null ){\n            //自定义信息【用户信息：id，用户名】\n            Map\u003cString , Object\u003e claims = new HashMap\u003c\u003e();\n            claims.put(\"id\", loginEmp.getId());\n            claims.put(\"username\",loginEmp.getUsername());\n            claims.put(\"name\",loginEmp.getName());\n\n            //使用JWT工具类，生成身份令牌\n            String token = JwtUtils.generateJwt(claims); // 【令牌中存放了用户id、用户名】\n            return Result.success(token);\n        }\n        return Result.error(\"用户名或密码错误\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241019233305-o3jeife","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241019233305-o3jeife","updated":"20241019234835"},"Children":[{"Type":"NodeText","Data":"拦截器中校验"}]},{"ID":"20241019233756-t1h5o5h","Type":"NodeParagraph","Properties":{"id":"20241019233756-t1h5o5h","updated":"20241019233756"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"登录校验拦截器"}]},{"ID":"20241019234126-nilyfch","Type":"NodeParagraph","Properties":{"id":"20241019234126-nilyfch","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20241019234508"},"Children":[{"Type":"NodeText","Data":"别抄这个，后面才是完整的，这里只是演示一下登录校验的逻辑，判断用户是否合法，没有管用户是谁（没有获取用户信息），让你知道不用ThreadLocal也是可以的，但是不方便。"}]},{"ID":"20241019233756-l95euk5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241019233756-l95euk5","updated":"20241019234028"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"//自定义拦截器\n@Component //当前拦截器对象由Spring创建和管理\n@Slf4j\npublic class LoginCheckInterceptor implements HandlerInterceptor {\n    //前置方式\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        System.out.println(\"preHandle .... \");\n        //1.获取请求url\n        //2.判断请求url中是否包含login，如果包含，说明是登录操作，放行\n// PS：这两个可以不写，因为在注册自定义拦截器对象时我们允许login直接放行\n\n        //3.获取请求头中的令牌（token）\n        String token = request.getHeader(\"token\"); // 【从请求头中拿到token】\n        log.info(\"从请求头中获取的令牌：{}\",token);\n\n        //4.判断令牌是否存在，如果不存在，返回错误结果（未登录）\n        if(!StringUtils.hasLength(token)){ // 【这里直接是非空判断，拦截器中不关心用户是谁，只关心用户是不是合法，所以只要有令牌就行了】\n            log.info(\"Token不存在\");\n\n            //创建响应结果对象\n            Result responseResult = Result.error(\"NOT_LOGIN\");\n            //把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)\n            String json = JSONObject.toJSONString(responseResult);\n            //设置响应头（告知浏览器：响应的数据类型为json、响应的数据编码表为utf-8）\n            response.setContentType(\"application/json;charset=utf-8\");\n            //响应\n            response.getWriter().write(json);\n\n            return false;//不放行\n        }\n\n        //5.解析token，如果解析失败，返回错误结果（未登录）\n        try {\n            JwtUtils.parseJWT(token);\n        }catch (Exception e){\n            log.info(\"令牌解析失败!\");\n\n            //创建响应结果对象\n            Result responseResult = Result.error(\"NOT_LOGIN\");\n            //把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)\n            String json = JSONObject.toJSONString(responseResult);\n            //设置响应头\n            response.setContentType(\"application/json;charset=utf-8\");\n            //响应\n            response.getWriter().write(json);\n\n            return false;\n        }\n\n        //6.放行\n        return true;\n    }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241019233756-p6kr9bs","Type":"NodeParagraph","Properties":{"id":"20241019233756-p6kr9bs","updated":"20241019233756"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"注册配置拦截器"}]},{"ID":"20241019233756-k2gc1cp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241019233756-k2gc1cp","updated":"20241019234810"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Slf4j\n@Configuration\n@EnableSwagger2\n@EnableKnife4j\npublic class WebMvcConfig extends WebMvcConfigurationSupport {\n    /**\n     * 设置静态资源映射\n     * @param registry\n     */\n    @Override\n    protected void addResourceHandlers(ResourceHandlerRegistry registry) {\n        log.info(\"开始进行静态资源的映射.....\");\n        // 接口文档的地址\n        registry.addResourceHandler(\"doc.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n        registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n\n//        registry.addResourceHandler(\"/backend/**\").addResourceLocations(\"classpath:/backend/\");\n//        registry.addResourceHandler(\"/front/**\").addResourceLocations(\"classpath:/front/\");\n    }\n\n    /**\n     * 扩展MVC框架的消息转换器\n     * @param converters\n     */\n    @Override\n    protected void extendMessageConverters(List\u003cHttpMessageConverter\u003c?\u003e\u003e converters) {\n        // log.info(\"扩展到额消息转换器.....\");\n        //创建消息转换器对象\n        MappingJackson2HttpMessageConverter messageConverter=new MappingJackson2HttpMessageConverter();\n        //设置转换器对象，底层使用jackson对象将java对象转为json\n        messageConverter.setObjectMapper(new JacksonObjectMapper());\n        //将上面的消息转换器对象追加带mvc框架的转换器集合中\n        converters.add(0,messageConverter);//为0是设置优先使用我们定义的此消息转换器\n\n        super.extendMessageConverters(converters);\n    }\n\n\n    @Bean\n    public Docket createRestApi() {\n        // 文档类型\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage(\"com.myGroup.controller\")) // 扫描controller包\n                .paths(PathSelectors.any())\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n                .title(\"垃圾分类志愿者网站\")\n                .version(\"1.0\")\n                .description(\"项目接口文档\")\n                .build();\n    }\n\n    // ================ 拦截器对象 ====================\n    // 可以只拷贝下面的，上面是其他的配置，要用在说吧\n\n\t// 拦截器对象\n    @Autowired\n    private LoginCheckInterceptor loginCheckInterceptor;\n\n    @Override\n    protected void addInterceptors(InterceptorRegistry registry) {\n        // 注册自定义拦截器对象\n        // 后端直接放行的页面在这里定义（这些页面不会检查前端传的token）\n        registry.addInterceptor(loginCheckInterceptor)\n                // .addPathPatterns(\"/**\")\n                .excludePathPatterns(\"/doc.html**\",\"/swagger-resources/**\", \"/webjars/**\", \"/v2/**\", \"/swagger-ui.html/**\")\n//                .excludePathPatterns(\"/webjars/**\")\n                .excludePathPatterns(\"/admin/user/login\") // 管理员登录接口\n                .excludePathPatterns(\"/admin/user/userlogin\") // 用户登录接口\n                .excludePathPatterns(\"/admin/act/page\") // 活动查询接口\n                .excludePathPatterns(\"/admin/act/dtl/**\") // 活动详情\n                .excludePathPatterns(\"/admin/user\"); // 注册接口\n//         .excludePathPatterns(\"/**\"); // 测试用\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241019233142-qzo3gfk","Type":"NodeParagraph","Properties":{"id":"20241019233142-qzo3gfk","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20241019234413"},"Children":[{"Type":"NodeText","Data":"但是还要加上ThreadLocal，直接在拦截器中解析用户信息，存到ThreadLocal中，以便后续在不同Controller中直接使用，不用在各个Controller中分别解析。"}]},{"ID":"20241019234250-im90kvg","Type":"NodeParagraph","Properties":{"id":"20241019234250-im90kvg","updated":"20241019234428"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"登录校验拦截器+解析用户信息"}]},{"ID":"20241019234422-bq8jguj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241019234422-bq8jguj","updated":"20241019234447"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Component\n@Slf4j\npublic class LoginCheckInterceptor implements HandlerInterceptor {\n    /**\n     * 前置方法\n     *\n     * @param request\n     * @param response\n     * @param handler\n     * @return\n     * @throws Exception\n     */\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        //1.获取请求url\n        //2.判断请求url中是否包含login，如果包含，说明是登录操作，放行\n        // PS：这两个可以不写，因为在注册自定义拦截器对象时我们允许login直接放行\n\n        //3.获取请求头中的令牌（token）\n        String token = request.getHeader(\"token\");\n        log.info(\"从请求头中获取的令牌：{}\", token);\n\n        // token 不存在\n        if (!StringUtils.hasLength(token)) {\n            log.info(\"Token不存在\");\n\n            //创建响应结果对象\n            R\u003cString\u003e responseResult = R.error(\"NOT_LOGIN\");\n            //把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)\n            String json = JSONObject.toJSONString(responseResult);\n            //设置响应头（告知浏览器：响应的数据类型为json、响应的数据编码表为utf-8）\n            response.setContentType(\"application/json;charset=utf-8\");\n            //响应\n            response.getWriter().write(json);\n\n            return false;//不放行\n        }\n\n        //5.解析token，如果解析失败，返回错误结果（未登录）\n        try {\n            Map\u003cString, Object\u003e claims = JwtUtils.parseJWT(token);\n\n            log.info(\"从请求头中获取的令牌：{}\", claims);\n\n            // 存到 ThreadLocal 中去\n            ThreadLocalUtil.set(claims);\n        } catch (Exception e) {\n            log.info(\"令牌解析失败!\");\n\n            //创建响应结果对象\n            R\u003cString\u003e responseResult = R.error(\"NOT_LOGIN\");\n            //把Result对象转换为JSON格式字符串 (fastjson是阿里巴巴提供的用于实现对象和json的转换工具类)\n            String json = JSONObject.toJSONString(responseResult);\n            //设置响应头\n            response.setContentType(\"application/json;charset=utf-8\");\n            //响应\n            response.getWriter().write(json);\n\n            return false;\n        }\n\n        //6.放行\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception {\n        ThreadLocalUtil.remove();\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241019224642-9rl70r1","Type":"NodeParagraph","Properties":{"id":"20241019224642-9rl70r1","updated":"20241019224642"}},{"ID":"20241019234835-salwm08","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019234835-salwm08","updated":"20241020155818"},"Children":[{"Type":"NodeText","Data":"优缺点分析🚩"}]},{"ID":"20241020152130-q93b3w4","Type":"NodeParagraph","Properties":{"id":"20241020152130-q93b3w4","updated":"20241020152138"},"Children":[{"Type":"NodeText","Data":"参考文章"}]},{"ID":"20241020152139-ss2nfcl","Type":"NodeList","ListData":{},"Properties":{"id":"20241020152139-ss2nfcl","updated":"20241020152325"},"Children":[{"ID":"20241020152207-jc0nd54","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020152207-jc0nd54","updated":"20241020152325"},"Children":[{"ID":"20241020152207-0fscoh2","Type":"NodeParagraph","Properties":{"id":"20241020152207-0fscoh2","updated":"20241020152325"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/bgXgV1zZ0s9LAcdLaupGFQ","TextMarkTextContent":"决定放弃使用JWT了！"}]}]}]},{"ID":"20241020152130-i7vch77","Type":"NodeParagraph","Properties":{"id":"20241020152130-i7vch77","updated":"20241020152130"}},{"ID":"20241019234835-icsbsvn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241019234835-icsbsvn","updated":"20241020151846"},"Children":[{"Type":"NodeText","Data":"优点"}]},{"ID":"20241020151318-to8n6ik","Type":"NodeList","ListData":{},"Properties":{"id":"20241020151318-to8n6ik","updated":"20241020153206"},"Children":[{"ID":"20241020151702-8az8x0w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020151702-8az8x0w","updated":"20241020153200"},"Children":[{"ID":"20241020151702-2vuzn17","Type":"NodeParagraph","Properties":{"id":"20241020151702-2vuzn17","updated":"20241020153200"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"适合前后端分离、集群"}]}]},{"ID":"20241020151743-jf0bvfk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020151743-jf0bvfk","updated":"20241020153202"},"Children":[{"ID":"20241020151743-k1rpsly","Type":"NodeParagraph","Properties":{"id":"20241020151743-k1rpsly","updated":"20241020153202"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"减轻服务端的存储压力"}]},{"ID":"20241020151756-i0ciu4t","Type":"NodeList","ListData":{},"Properties":{"id":"20241020151756-i0ciu4t","updated":"20241020152105"},"Children":[{"ID":"20241020152105-16jeb6w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020152105-16jeb6w","updated":"20241020152105"},"Children":[{"ID":"20241020152105-fii8h8i","Type":"NodeParagraph","Properties":{"id":"20241020152105-fii8h8i","updated":"20241020152105"},"Children":[{"Type":"NodeText","Data":"JWT 自身包含了身份验证所需要的所有信息，因此，我们的服务器不需要存储 Session 信息。这显然增加了系统的可用性和伸缩性，大大减轻了服务端的压力。"}]}]}]}]},{"ID":"20241020151854-ck4x3g9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020151854-ck4x3g9","updated":"20241020153204"},"Children":[{"ID":"20241020151854-rwin71h","Type":"NodeParagraph","Properties":{"id":"20241020151854-rwin71h","updated":"20241020153204"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"避免了CSRF攻击"}]},{"ID":"20241020151910-74bzb9t","Type":"NodeList","ListData":{},"Properties":{"id":"20241020151910-74bzb9t","updated":"20241020151913"},"Children":[{"ID":"20241020151913-mvo92z4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020151913-mvo92z4","updated":"20241020151913"},"Children":[{"ID":"20241020151913-ffhn9op","Type":"NodeParagraph","Properties":{"id":"20241020151913-ffhn9op","updated":"20241020152058"},"Children":[{"Type":"NodeText","Data":"什么是："},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241016092346-2qqsnsc","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"CSRF跨站请求伪造"}]}]}]}]},{"ID":"20241020153145-zkbccgg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020153145-zkbccgg","updated":"20241020153206"},"Children":[{"ID":"20241020153145-rp21lh3","Type":"NodeParagraph","Properties":{"id":"20241020153145-rp21lh3","updated":"20241020153206"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"适合移动端"}]}]}]},{"ID":"20241020151846-g1k7zvo","Type":"NodeParagraph","Properties":{"id":"20241020151846-g1k7zvo","updated":"20241020151846"}},{"ID":"20241020151318-7xrwn7l","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241020151318-7xrwn7l","updated":"20241020155134"},"Children":[{"Type":"NodeText","Data":"缺点"}]},{"ID":"20241020151323-ramgsh6","Type":"NodeList","ListData":{},"Properties":{"id":"20241020151323-ramgsh6","updated":"20241020153644"},"Children":[{"ID":"20241020151718-1sklu1e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020151718-1sklu1e","updated":"20241020153644"},"Children":[{"ID":"20241020151718-fpdezk1","Type":"NodeParagraph","Properties":{"id":"20241020151718-fpdezk1","updated":"20241020153644"},"Children":[{"Type":"NodeText","Data":"最大的问题：令牌一旦发出去，如果后端不增加其他逻辑的话，它在失效之前都是有效的。如果在此期间想让令牌无效，这是很难办到的，因为令牌存在用户浏览器中，你服务端拿不到，不可能给人家删了。除非后端加额外的判断逻辑。"}]}]}]},{"ID":"20241020151309-zz7dh3r","Type":"NodeList","ListData":{},"Properties":{"id":"20241020151309-zz7dh3r","updated":"20241020155134"},"Children":[{"ID":"20241020153736-igtgbj0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020153736-igtgbj0","updated":"20241020155134"},"Children":[{"ID":"20241020153736-szapyvw","Type":"NodeParagraph","Properties":{"id":"20241020153736-szapyvw","updated":"20241020153745"},"Children":[{"Type":"NodeText","Data":"考虑以下场景："}]},{"ID":"20241020153808-1hkjv5f","Type":"NodeList","ListData":{},"Properties":{"id":"20241020153808-1hkjv5f","updated":"20241020155134"},"Children":[{"ID":"20241020155111-q3q6lz0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020155111-q3q6lz0","updated":"20241020155133"},"Children":[{"ID":"20241020155111-idwa7vk","Type":"NodeParagraph","Properties":{"id":"20241020155111-idwa7vk","updated":"20241020155133"},"Children":[{"Type":"NodeText","Data":"退出登录；"}]}]},{"ID":"20241020155120-r8pnhe5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020155120-r8pnhe5","updated":"20241020155134"},"Children":[{"ID":"20241020155120-nxn0z0p","Type":"NodeParagraph","Properties":{"id":"20241020155120-nxn0z0p","updated":"20241020155134"},"Children":[{"Type":"NodeText","Data":"修改密码；"}]}]},{"ID":"20241020153808-g7k9spi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020153808-g7k9spi","updated":"20241020153808"},"Children":[{"ID":"20241020153808-ipvrqdc","Type":"NodeParagraph","Properties":{"id":"20241020153808-ipvrqdc","updated":"20241020153808"},"Children":[{"Type":"NodeText","Data":"服务端修改了某个用户具有的权限或者角色；"}]}]},{"ID":"20241020153808-jaysn5p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020153808-jaysn5p","updated":"20241020153808"},"Children":[{"ID":"20241020153808-aohqupq","Type":"NodeParagraph","Properties":{"id":"20241020153808-aohqupq","updated":"20241020153808"},"Children":[{"Type":"NodeText","Data":"用户的帐户被封禁/删除；"}]}]},{"ID":"20241020153808-cad1oyq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020153808-cad1oyq","updated":"20241020153808"},"Children":[{"ID":"20241020153808-w6jecjt","Type":"NodeParagraph","Properties":{"id":"20241020153808-w6jecjt","updated":"20241020153808"},"Children":[{"Type":"NodeText","Data":"用户被服务端强制注销；"}]}]},{"ID":"20241020153808-u3twejg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020153808-u3twejg","updated":"20241020153808"},"Children":[{"ID":"20241020153808-13bo5jc","Type":"NodeParagraph","Properties":{"id":"20241020153808-13bo5jc","updated":"20241020153808"},"Children":[{"Type":"NodeText","Data":"用户被踢下线；"}]}]}]},{"ID":"20241020153843-iwqlir5","Type":"NodeParagraph","Properties":{"id":"20241020153843-iwqlir5","updated":"20241020153948"},"Children":[{"Type":"NodeText","Data":"如果只用JWT的话，在令牌过期之前，服务端是没办法主动把用户封禁掉的，因为用户的令牌一直有效"}]}]}]},{"ID":"20241020151230-e4x1mbv","Type":"NodeParagraph","Properties":{"id":"20241020151230-e4x1mbv","updated":"20241020151230"}},{"ID":"20241020154025-2ko1euk","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241020154025-2ko1euk","updated":"20241020154213"},"Children":[{"Type":"NodeText","Data":"解决方案"}]},{"ID":"20241020154224-vehknnj","Type":"NodeParagraph","Properties":{"id":"20241020154224-vehknnj","updated":"20241020154224"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"1、将 JWT 存入数据库"}]},{"ID":"20241020154224-rfd7jt6","Type":"NodeParagraph","Properties":{"id":"20241020154224-rfd7jt6","style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);","updated":"20241020154528"},"Children":[{"Type":"NodeText","Data":"将有效的 JWT 存入数据库中，更建议使用内存数据库比如 Redis。如果需要让某个 JWT 失效就直接从 Redis 中删除这个 JWT 即可。但是，这样会导致每次使用 JWT 都要先从 Redis 中查询 JWT 是否存在的步骤，而且违背了 JWT 的无状态原则。"}]},{"ID":"20241020154238-5ebvgiw","Type":"NodeParagraph","Properties":{"id":"20241020154238-5ebvgiw","updated":"20241020154509"},"Children":[{"Type":"NodeText","Data":"每次校验时，就不是看请求带过来的JWT是否为空，而是看是否在Redis中有，如果有，说明是有效的JWT。Redis中存放有效JWT。"}]},{"ID":"20241020154239-gp29z09","Type":"NodeParagraph","Properties":{"id":"20241020154239-gp29z09","updated":"20241020154239"}},{"ID":"20241020154224-1vnuk05","Type":"NodeParagraph","Properties":{"id":"20241020154224-1vnuk05","updated":"20241020154224"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"2、黑名单机制"}]},{"ID":"20241020154224-o7xt4cv","Type":"NodeParagraph","Properties":{"id":"20241020154224-o7xt4cv","style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);","updated":"20241020154534"},"Children":[{"Type":"NodeText","Data":"和上面的方式类似，使用内存数据库比如 Redis 维护一个黑名单，如果想让某个 JWT 失效的话就直接将这个 JWT 加入到 "},{"Type":"NodeTextMark","Properties":{"parent-style":"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);"},"TextMarkType":"strong","TextMarkTextContent":"黑名单"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"color: var(--b3-card-success-color);background-color: var(--b3-card-success-background);\"}"},{"Type":"NodeText","Data":" 即可。然后，每次使用 JWT 进行请求的话都会先判断这个 JWT 是否存在于黑名单中。"}]},{"ID":"20241020154502-nb4aucq","Type":"NodeParagraph","Properties":{"id":"20241020154502-nb4aucq","updated":"20241020154502"}},{"ID":"20241020154224-vyp7hfl","Type":"NodeParagraph","Properties":{"id":"20241020154224-vyp7hfl","updated":"20241020154224"},"Children":[{"Type":"NodeText","Data":"前两种方案的核心在于将有效的 JWT 存储起来或者将指定的 JWT 拉入黑名单。"}]},{"ID":"20241020154224-be36oe1","Type":"NodeParagraph","Properties":{"id":"20241020154224-be36oe1","updated":"20241020154950"},"Children":[{"Type":"NodeText","Data":"虽然这两种方案"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"},"TextMarkType":"text","TextMarkTextContent":"都违背了 JWT 的无状态原则"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"},{"Type":"NodeText","Data":"，但是一般实际项目中我们通常还是会使用这两种方案。"}]},{"ID":"20241020154348-pjbww9u","Type":"NodeParagraph","Properties":{"id":"20241020154348-pjbww9u","updated":"20241020154348"}},{"ID":"20241020154224-0iogtim","Type":"NodeParagraph","Properties":{"id":"20241020154224-0iogtim","updated":"20241020154224"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"3、修改密钥 (Secret)"},{"Type":"NodeText","Data":" :"}]},{"ID":"20241020154224-l99hark","Type":"NodeParagraph","Properties":{"id":"20241020154224-l99hark","updated":"20241020155047"},"Children":[{"Type":"NodeText","Data":"我们为每个用户都创建一个专属密钥，如果我们想让某个 JWT 失效，我们直接修改对应用户的密钥即可。"}]},{"ID":"20241020155039-a7es06h","Type":"NodeParagraph","Properties":{"id":"20241020155039-a7es06h","updated":"20241020155039"},"Children":[{"Type":"NodeText","Data":"但是，这样相比于前两种引入内存数据库带来了危害更大："}]},{"ID":"20241020154224-ecpsn2j","Type":"NodeList","ListData":{},"Properties":{"id":"20241020154224-ecpsn2j","updated":"20241020154224"},"Children":[{"ID":"20241020154224-i9rre7t","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020154224-i9rre7t","updated":"20241020154224"},"Children":[{"ID":"20241020154224-3xegppk","Type":"NodeParagraph","Properties":{"id":"20241020154224-3xegppk","updated":"20241020154224"},"Children":[{"Type":"NodeText","Data":"如果服务是分布式的，则每次发出新的 JWT 时都必须在多台机器同步密钥。为此，你需要将密钥存储在数据库或其他外部服务中，这样和 Session 认证就没太大区别了。"}]}]},{"ID":"20241020154224-4t7a1gn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241020154224-4t7a1gn","updated":"20241020154224"},"Children":[{"ID":"20241020154224-l97uza0","Type":"NodeParagraph","Properties":{"id":"20241020154224-l97uza0","updated":"20241020154224"},"Children":[{"Type":"NodeText","Data":"如果用户同时在两个浏览器打开系统，或者在手机端也打开了系统，如果它从一个地方将账号退出，那么其他地方都要重新进行登录，这是不可取的。"}]}]}]},{"ID":"20241020154519-yt1hxzf","Type":"NodeParagraph","Properties":{"id":"20241020154519-yt1hxzf","updated":"20241020154519"}},{"ID":"20241020154224-s2r3751","Type":"NodeParagraph","Properties":{"id":"20241020154224-s2r3751","updated":"20241020154224"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"4、保持令牌的有效期限短并经常轮换"}]},{"ID":"20241020154224-4vhekuk","Type":"NodeParagraph","Properties":{"id":"20241020154224-4vhekuk","updated":"20241020154224"},"Children":[{"Type":"NodeText","Data":"很简单的一种方式。但是，会导致用户登录状态不会被持久记录，而且需要用户经常登录。"}]},{"ID":"20241020155102-w4bhlma","Type":"NodeParagraph","Properties":{"id":"20241020155102-w4bhlma","updated":"20241020155102"}},{"ID":"20241020154224-breyi9w","Type":"NodeParagraph","Properties":{"id":"20241020154224-breyi9w","updated":"20241020154224"},"Children":[{"Type":"NodeText","Data":"另外，对于修改密码后 JWT 还有效问题的解决还是比较容易的。说一种我觉得比较好的方式："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用用户的密码的哈希值对 JWT 进行签名。因此，如果密码更改，则任何先前的令牌将自动无法验证。"}]},{"ID":"20241020154213-0p7yuc8","Type":"NodeParagraph","Properties":{"id":"20241020154213-0p7yuc8","updated":"20241020154213"}},{"ID":"20241019224642-bef88ux","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241019224642-bef88ux","updated":"20241026222107"},"Children":[{"Type":"NodeText","Data":"1.3 Redis存储token方案"}]},{"ID":"20241019224707-2ai5ix3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019224707-2ai5ix3","updated":"20241026222107"},"Children":[{"Type":"NodeText","Data":"主要流程"}]},{"ID":"20241026222052-fqnjbpu","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241026222052-fqnjbpu","updated":"20241026222107"},"Children":[{"Type":"NodeText","Data":"重点"}]},{"ID":"20241020155926-jqd4gr1","Type":"NodeParagraph","Properties":{"id":"20241020155926-jqd4gr1","updated":"20241020160434"},"Children":[{"Type":"NodeText","Data":"登录的时候，把一个键值对（UUID，用户信息）存到Redis中去，将UUID作为token返回给客户端。"}]},{"ID":"20241020160437-hcujytl","Type":"NodeParagraph","Properties":{"id":"20241020160437-hcujytl","updated":"20241020160619"},"Children":[{"Type":"NodeText","Data":"每次客户端请求时，带上这个token，服务端用这个token（也就是UUID）在Redis中找是否存在，如果不存在就拦截，如果存在就拿到用户信息。"}]},{"ID":"20241020160621-l1lbzn3","Type":"NodeParagraph","Properties":{"id":"20241020160621-l1lbzn3","updated":"20241020160621"},"Children":[{"Type":"NodeText","Data":"随后将用户信息存到ThreadLocal中，以便这次请求后续使用。"}]},{"ID":"20241020155854-wxygb6u","Type":"NodeParagraph","Properties":{"id":"20241020155854-wxygb6u","updated":"20241020155924"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"基于Redis实现session登录"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1653319474181-20241016213637-p8ru9kp.png"},{"Type":"NodeLinkSpace"},{"Type":"NodeLinkTitle","Data":"基于Redis实现session登录"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241020174739-h8mhune","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241020174739-h8mhune","updated":"20241026223433"},"Children":[{"Type":"NodeText","Data":"详细流程"}]},{"ID":"20241026222139-1f8jsdv","Type":"NodeParagraph","Properties":{"id":"20241026222139-1f8jsdv","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"重点详解"}]},{"ID":"20241026222139-d9v0mz5","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026222139-d9v0mz5","updated":"20241026222139"},"Children":[{"ID":"20241026222139-u2ztkbv","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241026222139-u2ztkbv","updated":"20241026222139"},"Children":[{"ID":"20241026222139-vlj5oof","Type":"NodeParagraph","Properties":{"id":"20241026222139-vlj5oof","updated":"20241026222139"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"验证码存在Redis中"}]},{"ID":"20241026222139-7vc598y","Type":"NodeParagraph","Properties":{"id":"20241026222139-7vc598y","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"在发送验证码的接口中，把验证码存到Redis中。"}]},{"ID":"20241026222139-nmoh1m8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026222139-nmoh1m8","updated":"20241026222139"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 4.保存验证码到 session。现在是存在Redis中了，key是LOGIN_CODE_KEY + phone\nstringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026222139-a4cqt12","Type":"NodeParagraph","Properties":{"id":"20241026222139-a4cqt12","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"然后在登录校验的接口中取验证码。"}]},{"ID":"20241026222139-sp96htm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026222139-sp96htm","updated":"20241026222139"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 3.从redis获取验证码并校验，key是LOGIN_CODE_KEY + phone\nString cacheCode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone); // 服务端Redis中的验证码\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026222139-25vgwfg","Type":"NodeParagraph","Properties":{"id":"20241026222139-25vgwfg","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"key是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LOGIN_CODE_KEY + phone"},{"Type":"NodeText","Data":"​，而"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LOGIN_CODE_KEY"},{"Type":"NodeText","Data":"​常量在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"com/hmdp/utils/RedisConstants.java"},{"Type":"NodeText","Data":"​类中定义了："}]},{"ID":"20241026222139-09f8m0m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026222139-09f8m0m","updated":"20241026222139"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public static final String LOGIN_CODE_KEY = \"login:code:\";\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20241026222139-vocbdsk","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026222139-vocbdsk","updated":"20241026223433"},"Children":[{"ID":"20241026222139-a195fb3","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241026222139-a195fb3","updated":"20241026223433"},"Children":[{"ID":"20241026222139-72qumk1","Type":"NodeParagraph","Properties":{"id":"20241026222139-72qumk1","updated":"20241026222139"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"保存用户信息到Redis中"}]},{"ID":"20241026222139-6eh27p1","Type":"NodeParagraph","Properties":{"id":"20241026222139-6eh27p1","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"具体步骤："}]},{"ID":"20241026222139-aqux0lh","Type":"NodeParagraph","Properties":{"id":"20241026222139-aqux0lh","updated":"20241026223430"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一、在"},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"UserServiceImpl"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的"},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"login"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"方法中"}]},{"ID":"20241026222139-m5c9jls","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026222139-m5c9jls","updated":"20241026222139"},"Children":[{"ID":"20241026222139-q2fvkaf","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241026222139-q2fvkaf","updated":"20241026222139"},"Children":[{"ID":"20241026222139-xcfpbw1","Type":"NodeParagraph","Properties":{"id":"20241026222139-xcfpbw1","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"随机生成UUID，作为Redis中的key，这个key后面要返回给前端作为令牌token，每次登录的时候都要带上这个"}]},{"ID":"20241026222139-laooxb6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026222139-laooxb6","updated":"20241026222139"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 7.1.随机生成token，作为登录令牌\nString token = UUID.randomUUID().toString(true);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026222139-ozc3rtd","Type":"NodeParagraph","Properties":{"id":"20241026222139-ozc3rtd","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"解释：UUID是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cn.hutool.core.lang"},{"Type":"NodeText","Data":"​下的类，参数true是生成的UUID中不带下划线"}]}]},{"ID":"20241026222139-qs0xggh","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241026222139-qs0xggh","updated":"20241026222139"},"Children":[{"ID":"20241026222139-vnoshti","Type":"NodeParagraph","Properties":{"id":"20241026222139-vnoshti","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"Redis中用户信息采用hash存储。将user对象转为一个Map"}]},{"ID":"20241026222139-mlyuf91","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026222139-mlyuf91","linewrap":"true","updated":"20241026222139"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 7.2.将User对象转为HashMap存储\nUserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); // 工具类，方便地将User类中的属性拷贝到UserDTO对象中\nMap\u003cString, Object\u003e userMap = BeanUtil.beanToMap(userDTO, new HashMap\u003c\u003e(), // beanToMap: 将一个Bean转换为map\n        CopyOptions.create()\n                .setIgnoreNullValue(true)\n                .setFieldValueEditor((fieldName, fieldValue) -\u003e fieldValue.toString())); // 自定义字段值的数据类型，把userDTO中的long类型转为string\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026222139-nhis9p8","Type":"NodeParagraph","Properties":{"id":"20241026222139-nhis9p8","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"解释：BeanUtil.beanToMap仍然是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"hutool"},{"Type":"NodeText","Data":"​包里面的，将userDTO这个javabean转换为一个map。"}]},{"ID":"20241026222139-g47su2z","Type":"NodeParagraph","Properties":{"id":"20241026222139-g47su2z","style":"color: var(--b3-card-warning-color);background-color: var(--b3-card-warning-background);","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"注意：因为stringRedisTemplate只能接受string类型"}]}]},{"ID":"20241026222139-3hfthh8","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241026222139-3hfthh8","updated":"20241026222139"},"Children":[{"ID":"20241026222139-t0s5psy","Type":"NodeParagraph","Properties":{"id":"20241026222139-t0s5psy","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"把Map存进Redis中，并给用户信息设置有效期，参考session时的有效期"}]},{"ID":"20241026222139-n61l08r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026222139-n61l08r","updated":"20241026222139"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 7.3.存储\nString tokenKey = LOGIN_USER_KEY + token;\nstringRedisTemplate.opsForHash().putAll(tokenKey, userMap);\n// 7.4.设置token有效期（参考session的有效期30分钟）\nstringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026222139-s4nh6ug","Type":"NodeParagraph","Properties":{"id":"20241026222139-s4nh6ug","updated":"20241026222139"},"Children":[{"Type":"NodeText","Data":"但是接下来还需要刷新用户的token，只要用户一直访问我们，每次访问都给他刷新token的有效期，这里使用两个拦截器来实现。具体看"},{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241016211761-1jwc01h","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"1.9 解决状态登录刷新问题"}]}]}]},{"ID":"20241026222839-f1831hp","Type":"NodeParagraph","Properties":{"id":"20241026222839-f1831hp","updated":"20241026223433"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"二、实现双拦截器"}]},{"ID":"20241026222922-waorus8","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026222922-waorus8","updated":"20241026223423"},"Children":[{"ID":"20241026222927-zbdeovh","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241026222927-zbdeovh","updated":"20241026223423"},"Children":[{"ID":"20241026222927-b7l6n60","Type":"NodeParagraph","Properties":{"id":"20241026222927-b7l6n60","updated":"20241026223423"},"Children":[{"Type":"NodeText","Data":"token校验及刷新拦截器（直接拦截全部接口）："}]},{"ID":"20241026223032-gpuwjlt","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026223032-gpuwjlt","updated":"20241026223037"},"Children":[{"ID":"20241026223037-yc1nl93","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241026223037-yc1nl93","updated":"20241026223037"},"Children":[{"ID":"20241026223037-pc1xeyk","Type":"NodeParagraph","Properties":{"id":"20241026223037-pc1xeyk","updated":"20241026223043"},"Children":[{"Type":"NodeText","Data":"获取token"}]}]},{"ID":"20241026223108-tgmcyxj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241026223108-tgmcyxj","updated":"20241026223108"},"Children":[{"ID":"20241026223108-7y3qt7x","Type":"NodeParagraph","Properties":{"id":"20241026223108-7y3qt7x","updated":"20241026223121"},"Children":[{"Type":"NodeText","Data":"查Redis中的用户信息"}]}]},{"ID":"20241026223122-hghxpfg","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241026223122-hghxpfg","updated":"20241026223122"},"Children":[{"ID":"20241026223122-1zv1y6m","Type":"NodeParagraph","Properties":{"id":"20241026223122-1zv1y6m","updated":"20241026223129"},"Children":[{"Type":"NodeText","Data":"保存到ThreadLocal中"}]}]},{"ID":"20241026223129-kybzdwf","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20241026223129-kybzdwf","updated":"20241026223129"},"Children":[{"ID":"20241026223129-hfnftuq","Type":"NodeParagraph","Properties":{"id":"20241026223129-hfnftuq","updated":"20241026223142"},"Children":[{"Type":"NodeText","Data":"刷新Redis中token的有效期"}]}]},{"ID":"20241026223201-1vkrsiq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20241026223201-1vkrsiq","updated":"20241026223201"},"Children":[{"ID":"20241026223201-jq2t8rf","Type":"NodeParagraph","Properties":{"id":"20241026223201-jq2t8rf","updated":"20241026223206"},"Children":[{"Type":"NodeText","Data":"放行"}]}]}]}]},{"ID":"20241026222948-yzyn7a7","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241026222948-yzyn7a7","updated":"20241026223414"},"Children":[{"ID":"20241026222948-zl6s732","Type":"NodeParagraph","Properties":{"id":"20241026222948-zl6s732","updated":"20241026223414"},"Children":[{"Type":"NodeText","Data":"登录验证拦截器（拦截需要登录的接口）："}]},{"ID":"20241026223213-dinycx8","Type":"NodeParagraph","Properties":{"id":"20241026223213-dinycx8","updated":"20241026223345"},"Children":[{"Type":"NodeText","Data":"直接查询ThreadLocal中的用户信息（因为这一个请求是一个线程，前面存了的话这里一定有当前请求的用户信息）"}]},{"ID":"20241026223347-c48fj7s","Type":"NodeList","ListData":{},"Properties":{"id":"20241026223347-c48fj7s","updated":"20241026223400"},"Children":[{"ID":"20241026223349-ki20ug3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026223349-ki20ug3","updated":"20241026223349"},"Children":[{"ID":"20241026223349-deskos1","Type":"NodeParagraph","Properties":{"id":"20241026223349-deskos1","updated":"20241026223357"},"Children":[{"Type":"NodeText","Data":"有的话说明登录了，放行"}]}]},{"ID":"20241026223358-j7suiq7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026223358-j7suiq7","updated":"20241026223400"},"Children":[{"ID":"20241026223358-7qhzwq4","Type":"NodeParagraph","Properties":{"id":"20241026223358-7qhzwq4","updated":"20241026223400"},"Children":[{"Type":"NodeText","Data":"没有就拦截"}]}]}]}]}]}]}]},{"ID":"20241026222829-hqyp08i","Type":"NodeParagraph","Properties":{"id":"20241026222829-hqyp08i","updated":"20241026222829"}},{"ID":"20241020155833-ny1hu34","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241020155833-ny1hu34","updated":"20241020171543"},"Children":[{"Type":"NodeText","Data":"代码实现"}]},{"ID":"20241020171407-mbq55l9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241020171407-mbq55l9","updated":"20241020171543"},"Children":[{"Type":"NodeText","Data":"工具类"}]},{"ID":"20241020171807-quxtef9","Type":"NodeParagraph","Properties":{"id":"20241020171807-quxtef9","updated":"20241020171814"},"Children":[{"Type":"NodeText","Data":"ThreadLocal工具类"}]},{"ID":"20241020171544-6wjclyj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20241020171544-6wjclyj","updated":"20241020172120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"package com.hmdp.utils;\n\nimport com.hmdp.dto.UserDTO;\n\n/**\n * ThreadLocal工具类\n */\npublic class UserHolder {\n    // ThreadLocal对象\n    private static final ThreadLocal\u003cUserDTO\u003e tl = new ThreadLocal\u003c\u003e();\n\n    public static void saveUser(UserDTO user){\n        tl.set(user);\n    }\n\n    public static UserDTO getUser(){\n        return tl.get();\n    }\n\n    public static void removeUser(){\n        tl.remove();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241020174734-sv84akg","Type":"NodeParagraph","Properties":{"id":"20241020174734-sv84akg","updated":"20241020174734"}},{"ID":"20241020171545-3hn73y9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241020171545-3hn73y9","updated":"20241026222733"},"Children":[{"Type":"NodeText","Data":"登录下发token"}]},{"ID":"20241020171553-nbmywv7","Type":"NodeParagraph","Properties":{"id":"20241020171553-nbmywv7","updated":"20241020171554"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"UserServiceImpl代码"}]},{"ID":"20241020171556-nv3eufv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20241020171556-nv3eufv","updated":"20241026222733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"/**\n * 发送验证码。校验手机号，生成验证码，并存到Redis中，key格式：LOGIN_CODE_KEY + phone\n * @param phone 用户传过来的手机号\n * @param session 没有用\n * @return Result.ok()\n */\n@Override\npublic Result sendCode(String phone, HttpSession session) {\n    // 1.校验手机号\n    if (RegexUtils.isPhoneInvalid(phone)) {\n        // 2.如果不符合，返回错误信息\n        return Result.fail(\"手机号格式错误！\");\n    }\n    // 3.符合，生成验证码（hutool工具包中的）\n    String code = RandomUtil.randomNumbers(6);\n\n    // 4.保存验证码到 session\n    stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);\n\n    // 5.发送验证码\n    log.debug(\"发送短信验证码成功，验证码：{}\", code);\n    // 返回ok\n    return Result.ok();\n}\n\n/**\n * 验证码登录校验接口。\n * @param loginForm 登录信息DTO\n * @param session 没用\n * @return 成功的话返回Result.ok(token)，token是Redis中的UUID作为key\n */\n@Override\npublic Result login(LoginFormDTO loginForm, HttpSession session) {\n    // 1.校验手机号（这里要再次校验）\n    String phone = loginForm.getPhone();\n    if (RegexUtils.isPhoneInvalid(phone)) {\n        // 2.如果不符合，返回错误信息\n        return Result.fail(\"手机号格式错误！\");\n    }\n    // 3.从redis获取验证码并校验\n    String cacheCode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);\n    String code = loginForm.getCode();\n    if (cacheCode == null || !cacheCode.equals(code)) {\n        // 不一致，报错\n        return Result.fail(\"验证码错误\");\n    }\n\n    // 4.一致，根据手机号查询用户 select * from tb_user where phone = ?\n    User user = query().eq(\"phone\", phone).one();\n\n    // 5.判断用户是否存在\n    if (user == null) {\n        // 6.不存在，创建新用户并保存\n        user = createUserWithPhone(phone);\n    }\n\n    // 7.保存用户信息到 redis中\n    // 7.1.随机生成token，作为登录令牌\n    String token = UUID.randomUUID().toString(true);\n    // 7.2.将User对象转为HashMap存储\n    UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); // 工具类，方便地将User类中的属性拷贝到UserDTO对象中\n    Map\u003cString, Object\u003e userMap = BeanUtil.beanToMap(userDTO, new HashMap\u003c\u003e(), // beanToMap: 将一个Bean转换为map\n            CopyOptions.create()\n                    .setIgnoreNullValue(true)\n                    .setFieldValueEditor((fieldName, fieldValue) -\u003e fieldValue.toString())); // 自定义字段值的数据类型，把userDTO中的long类型转为string\n    // 7.3.存储\n    String tokenKey = LOGIN_USER_KEY + token;\n    stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);\n    // 7.4.设置token有效期（参考session的有效期30分钟）\n    stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);\n\n    // 8.返回token给前端（前段才能下次带着这个token来redis中找登录用户）\n    return Result.ok(token);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241020174730-ltx0nxv","Type":"NodeParagraph","Properties":{"id":"20241020174730-ltx0nxv","updated":"20241020174730"}},{"ID":"20241020171535-uqbwgvk","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241020171535-uqbwgvk","updated":"20241026223900"},"Children":[{"Type":"NodeText","Data":"双拦截器验证"}]},{"ID":"20241020172404-bctt2g9","Type":"NodeParagraph","Properties":{"id":"20241020172404-bctt2g9","updated":"20241026222006"},"Children":[{"Type":"NodeText","Data":"在第一个拦截器中拦截所有的路径，尝试获取token，如果有就从Redis中拿到用户信息并存到ThreadLocal中，然后要刷新token的有效期（如果用户一直在访问我们，每次访问的时候都给他的token刷新有效期），然后放行；如果没有直接放行。"}]},{"ID":"20241020172504-hbebcq2","Type":"NodeParagraph","Properties":{"id":"20241020172504-hbebcq2","updated":"20241020172614"},"Children":[{"Type":"NodeText","Data":"在第二个拦截器中拦截需要认证的路径，直接检查ThreadLocal中如果没有用户数据，那就拦截，如果有就放行。"}]},{"ID":"20241020172617-xw7y7ul","Type":"NodeParagraph","Properties":{"id":"20241020172617-xw7y7ul","updated":"20241020172655"},"Children":[{"Type":"NodeText","Data":"这样可以将需要拦截的路径和不用拦截的分开。"}]},{"ID":"20241020172156-iz6r14x","Type":"NodeParagraph","Properties":{"id":"20241020172156-iz6r14x","updated":"20241020172311"},"Children":[{"Type":"NodeText","Data":"结构如下："}]},{"ID":"20241020172312-y8ztsdd","Type":"NodeParagraph","Properties":{"id":"20241020172312-y8ztsdd","updated":"20241020174506"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Properties":{"style":"width: 1051px;"},"Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1653320764547"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1653320764547-20241016213637-4upsxdl.png"},{"Type":"NodeLinkSpace"},{"Type":"NodeLinkTitle","Data":"双拦截器方案"},{"Type":"NodeCloseParen"}]},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"width: 1051px;\"}"},{"Type":"NodeText","Data":"​"}]},{"ID":"20241020172304-fezk5n5","Type":"NodeParagraph","Properties":{"id":"20241020172304-fezk5n5","updated":"20241020172721"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"RefreshTokenInterceptor"}]},{"ID":"20241020174543-w6jgfhp","Type":"NodeParagraph","Properties":{"id":"20241020174543-w6jgfhp","updated":"20241020174546"},"Children":[{"Type":"NodeText","Data":"拦截器1"}]},{"ID":"20241020172721-p9gi08a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241020172721-p9gi08a","updated":"20241020172838"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import static com.hmdp.utils.RedisConstants.LOGIN_USER_KEY;\nimport static com.hmdp.utils.RedisConstants.LOGIN_USER_TTL;\n\npublic class RefreshTokenInterceptor implements HandlerInterceptor {\n\n    private StringRedisTemplate stringRedisTemplate;\n\n    public RefreshTokenInterceptor(StringRedisTemplate stringRedisTemplate) {\n        this.stringRedisTemplate = stringRedisTemplate;\n    }\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 1.获取请求头中的token\n        String token = request.getHeader(\"authorization\");\n        if (StrUtil.isBlank(token)) {\n            return true;\n        }\n        // 2.基于TOKEN获取redis中的用户\n        String key  = LOGIN_USER_KEY + token;\n        Map\u003cObject, Object\u003e userMap = stringRedisTemplate.opsForHash().entries(key);\n        // 3.判断用户是否存在\n        if (userMap.isEmpty()) {\n            return true; // 【拦截不到没关系，可能是不需要登录的接口，直接放过去，ThreadLocal中将不会有这个用户】\n        }\n        // 5.将查询到的hash数据转为UserDTO\n        UserDTO userDTO = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false);\n        // 6.存在，保存用户信息到 ThreadLocal\n        UserHolder.saveUser(userDTO);\n        // 7.刷新token有效期\n        stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);\n        // 8.放行\n        return true;\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        // 移除用户\n        UserHolder.removeUser();\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241019224709-90yjwhp","Type":"NodeParagraph","Properties":{"id":"20241019224709-90yjwhp","updated":"20241020174536"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"LoginInterceptor"}]},{"ID":"20241020174537-3fg6bho","Type":"NodeParagraph","Properties":{"id":"20241020174537-3fg6bho","updated":"20241020174541"},"Children":[{"Type":"NodeText","Data":"拦截器2"}]},{"ID":"20241020174526-t02zo94","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241020174526-t02zo94","updated":"20241020174531"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class LoginInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        // 1.判断是否需要拦截（ThreadLocal中是否有用户）\n        if (UserHolder.getUser() == null) {\n            // 没有，需要拦截，设置状态码\n            response.setStatus(401);\n            // 拦截\n            return false;\n        }\n        // 有用户，则放行\n        return true;\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241020174526-2immvt5","Type":"NodeParagraph","Properties":{"id":"20241020174526-2immvt5","updated":"20241020174710"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"MvcConfig"}]},{"ID":"20241020174616-75vc5w1","Type":"NodeParagraph","Properties":{"id":"20241020174616-75vc5w1","updated":"20241020174619"},"Children":[{"Type":"NodeText","Data":"配置拦截器"}]},{"ID":"20241020174620-d8sbvoo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241020174620-d8sbvoo","updated":"20241020174624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Configuration\npublic class MvcConfig implements WebMvcConfigurer {\n\n    @Resource\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // 设置两个拦截器\n        // 登录拦截器（这里LoginInterceptor也可以注入）（拦截器2）\n        registry.addInterceptor(new LoginInterceptor())\n                .excludePathPatterns(\n                        \"/shop/**\",\n                        \"/voucher/**\",\n                        \"/shop-type/**\",\n                        \"/upload/**\",\n                        \"/blog/hot\",\n                        \"/user/code\",\n                        \"/user/login\"\n                ).order(1);\n        // token刷新的拦截器（拦截器1 拦截所有）\n        registry.addInterceptor(new RefreshTokenInterceptor(stringRedisTemplate)).addPathPatterns(\"/**\").order(0);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241020174526-tk6ufba","Type":"NodeParagraph","Properties":{"id":"20241020174526-tk6ufba","updated":"20241020174526"}},{"ID":"20241026223900-23ote6c","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241026223900-23ote6c","updated":"20241026225619"},"Children":[{"Type":"NodeText","Data":"Redis的使用总结✅"}]},{"ID":"20241026223916-13l341z","Type":"NodeParagraph","Properties":{"id":"20241026223916-13l341z","updated":"20241026223928"},"Children":[{"Type":"NodeText","Data":"在登录验证中Redis主要用于："}]},{"ID":"20241026223928-z6xv80g","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026223928-z6xv80g","updated":"20241026224343"},"Children":[{"ID":"20241026223935-rlx68qa","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241026223935-rlx68qa","updated":"20241026224343"},"Children":[{"ID":"20241026223935-jjsd3j1","Type":"NodeParagraph","Properties":{"id":"20241026223935-jjsd3j1","updated":"20241026223942"},"Children":[{"Type":"NodeText","Data":"存放验证码"}]},{"ID":"20241026223952-mwdh20m","Type":"NodeList","ListData":{},"Properties":{"id":"20241026223952-mwdh20m","updated":"20241026224343"},"Children":[{"ID":"20241026223954-9mmkivh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026223954-9mmkivh","updated":"20241026224343"},"Children":[{"ID":"20241026223954-tueqalp","Type":"NodeParagraph","Properties":{"id":"20241026223954-tueqalp","updated":"20241026224343"},"Children":[{"Type":"NodeText","Data":"服务端的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UserServiceImpl"},{"Type":"NodeText","Data":"​中的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sendCode"},{"Type":"NodeText","Data":"​方法中生成验证码后，先存到Redis中，然后发短信给用户"}]}]},{"ID":"20241026224220-4zby12b","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026224220-4zby12b","updated":"20241026224220"},"Children":[{"ID":"20241026224220-615ocwf","Type":"NodeParagraph","Properties":{"id":"20241026224220-615ocwf","updated":"20241026224240"},"Children":[{"Type":"NodeText","Data":"使用的是string结构"}]}]},{"ID":"20241026224242-27pvoqy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026224242-27pvoqy","updated":"20241026224303"},"Children":[{"ID":"20241026224242-7dgxygy","Type":"NodeParagraph","Properties":{"id":"20241026224242-7dgxygy","updated":"20241026224248"},"Children":[{"Type":"NodeText","Data":"具体代码："}]},{"ID":"20241026224248-qw5sdv4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026224248-qw5sdv4","updated":"20241026224303"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 4.保存验证码到 session\nstringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]}]}]},{"ID":"20241026223900-5cc46fy","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241026223900-5cc46fy","updated":"20241026225453"},"Children":[{"ID":"20241026224320-xavjaf6","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241026224320-xavjaf6","updated":"20241026225453"},"Children":[{"ID":"20241026224320-jmiaz75","Type":"NodeParagraph","Properties":{"id":"20241026224320-jmiaz75","updated":"20241026224331"},"Children":[{"Type":"NodeText","Data":"存放用户信息"}]},{"ID":"20241026224333-h102nv9","Type":"NodeList","ListData":{},"Properties":{"id":"20241026224333-h102nv9","updated":"20241026225453"},"Children":[{"ID":"20241026224334-5ce3oko","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026224334-5ce3oko","updated":"20241026224334"},"Children":[{"ID":"20241026224334-41qcsnt","Type":"NodeParagraph","Properties":{"id":"20241026224334-41qcsnt","updated":"20241026224708"},"Children":[{"Type":"NodeText","Data":"在登录方法（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UserServiceImpl"},{"Type":"NodeText","Data":"​中的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"login"},{"Type":"NodeText","Data":"​）中，如果校验用户登录成功，生成随机的UUID作为token，用户信息作为key，存到Redis中。后面每次登录的时候携带这个token，从Redis中取用户信息，以此实现身份校验"}]}]},{"ID":"20241026224710-6dc9onn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026224710-6dc9onn","updated":"20241026224710"},"Children":[{"ID":"20241026224710-1c9mma0","Type":"NodeParagraph","Properties":{"id":"20241026224710-1c9mma0","updated":"20241026224716"},"Children":[{"Type":"NodeText","Data":"使用的是hash结构"}]}]},{"ID":"20241026224717-h96uzph","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241026224717-h96uzph","updated":"20241026225453"},"Children":[{"ID":"20241026224717-72i3h3n","Type":"NodeParagraph","Properties":{"id":"20241026224717-72i3h3n","updated":"20241026224720"},"Children":[{"Type":"NodeText","Data":"具体代码："}]},{"ID":"20241026224720-wmcew6o","Type":"NodeParagraph","Properties":{"id":"20241026224720-wmcew6o","updated":"20241026225457"},"Children":[{"Type":"NodeText","Data":"存用户信息（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UserServiceImpl"},{"Type":"NodeText","Data":"​中的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"login"},{"Type":"NodeText","Data":"​方法）"}]},{"ID":"20241026224901-5u8piag","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026224901-5u8piag","updated":"20241026224923"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"// 7.保存用户信息到 redis中\n// 7.1.随机生成token，作为登录令牌\nString token = UUID.randomUUID().toString(true);\n// 7.2.将User对象转为HashMap存储\nUserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class); // 工具类，方便地将User类中的属性拷贝到UserDTO对象中\nMap\u003cString, Object\u003e userMap = BeanUtil.beanToMap(userDTO, new HashMap\u003c\u003e(), // beanToMap: 将一个Bean转换为map\n        CopyOptions.create()\n                .setIgnoreNullValue(true)\n                .setFieldValueEditor((fieldName, fieldValue) -\u003e fieldValue.toString())); // 自定义字段值的数据类型，把userDTO中的long类型转为string\n// 7.3.存储\nString tokenKey = LOGIN_USER_KEY + token;\nstringRedisTemplate.opsForHash().putAll(tokenKey, userMap); // 存用户数据\n// 7.4.设置token有效期（参考session的有效期30分钟）\nstringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241026224903-avmjzzw","Type":"NodeParagraph","Properties":{"id":"20241026224903-avmjzzw","updated":"20241026225453"},"Children":[{"Type":"NodeText","Data":"取用户数据（第一个拦截器"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RefreshTokenInterceptor"},{"Type":"NodeText","Data":"​中的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"preHandle"},{"Type":"NodeText","Data":"​方法）"}]},{"ID":"20241026225356-hi3hpux","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241026225356-hi3hpux","updated":"20241026225415"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"@Override\npublic boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n    // 1.获取请求头中的token\n    String token = request.getHeader(\"authorization\");\n    if (StrUtil.isBlank(token)) {\n        return true;\n    }\n    // 2.基于TOKEN获取redis中的用户\n    String key  = LOGIN_USER_KEY + token;\n    Map\u003cObject, Object\u003e userMap = stringRedisTemplate.opsForHash().entries(key); // 得到一个key对应的所有字段，封装成一个map\n    // 3.判断用户是否存在\n    if (userMap.isEmpty()) {\n        return true;\n    }\n    // 5.将查询到的hash数据转为UserDTO\n    UserDTO userDTO = BeanUtil.fillBeanWithMap(userMap, new UserDTO(), false);\n    // 6.存在，保存用户信息到 ThreadLocal\n    UserHolder.saveUser(userDTO);\n    // 7.刷新token有效期\n    stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);\n    // 8.放行\n    return true;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]}]}]},{"ID":"20241026223900-j44xd2g","Type":"NodeParagraph","Properties":{"id":"20241026223900-j44xd2g","updated":"20241026223900"}},{"ID":"20241019224709-5ynlyvt","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20241019224709-5ynlyvt","updated":"20241026223537"},"Children":[{"Type":"NodeText","Data":"2.身份获取"}]},{"ID":"20241019224813-npsg73k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241019224813-npsg73k","updated":"20241026223537"},"Children":[{"Type":"NodeText","Data":"使用ThreadLocal"}]},{"ID":"20241019224826-aesohdu","Type":"NodeParagraph","Properties":{"id":"20241019224826-aesohdu","updated":"20241019225118"},"Children":[{"Type":"NodeText","Data":"需要说明的是，身份获取跟采用什么方法进行身份验证没什么关系。"}]},{"ID":"20241019225118-c3sgivo","Type":"NodeParagraph","Properties":{"id":"20241019225118-c3sgivo","updated":"20241019225430"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不管"},{"Type":"NodeText","Data":"你用什么方法验证身份，都是在登录后，每次请求到来的时候①判断用户是否合法，②拿到当前用户信息。而拿到用户信息之后，都需要找一个地方放起来，就放在ThreadLocal中。"}]},{"ID":"20241019225153-9au6fhk","Type":"NodeParagraph","Properties":{"id":"20241019225153-9au6fhk","updated":"20241019232704"},"Children":[{"Type":"NodeText","Data":"你可以在session方案、JWT方案、Redis存储token方案中看到他们拿到了用户信息之后，都放在了ThreadLocal中，以便这次请求中随时拿出来使用用户信息，而不是再次解析一遍（以及避免在不同的Controller中重复解析用户信息），然后在这次请求响应后删除ThreadLocal中的用户信息。"}]},{"ID":"20241026223537-tz9jwsp","Type":"NodeParagraph","Properties":{"id":"20241026223537-tz9jwsp","updated":"20241026223537"}}]}