{"ID":"20241101231702-y2hv8k6","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241101231702-y2hv8k6","title":"跨域问题-后端解决方案","type":"doc","updated":"20241101232049"},"Children":[{"ID":"20241101231924-j3x9o83","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241101231924-j3x9o83","updated":"20241101231932"},"Children":[{"Type":"NodeText","Data":"什么是跨域问题"}]},{"ID":"20241101231924-786f0u5","Type":"NodeParagraph","Properties":{"id":"20241101231924-786f0u5","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"跨域是是因为浏览器的同源策略限制，是浏览器的一种安全机制，服务端之间是不存在跨域的。\n所谓同源指的是两个页面具有"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"相同的协议、主机和端口"},{"Type":"NodeText","Data":"，三者有任一不相同即会产生跨域。"}]},{"ID":"20241101231924-h5vcabf","Type":"NodeParagraph","Properties":{"id":"20241101231924-h5vcabf","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"一句话讲明白就是："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"浏览器不允许你在一个网页内请求另一个不同源的链接"}]},{"ID":"20241101231924-8h3o719","Type":"NodeParagraph","Properties":{"id":"20241101231924-8h3o719","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"这些是知乎上的解释："}]},{"ID":"20241101231924-8fowvsi","Type":"NodeParagraph","Properties":{"id":"20241101231924-8fowvsi","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"浏览器"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域"},{"Type":"NodeText","Data":"。 在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问问题。在请求的过程中我们要想回去数据一般都是post/get请求，所以会出现跨域问题。 出于浏览器的同源策略限制。"}]},{"ID":"20241101231924-5bh5ip8","Type":"NodeParagraph","Properties":{"id":"20241101231924-5bh5ip8","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。"}]},{"ID":"20241101231924-zn11g1y","Type":"NodeParagraph","Properties":{"id":"20241101231924-zn11g1y","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。"}]},{"ID":"20241101231924-kt2kx82","Type":"NodeParagraph","Properties":{"id":"20241101231924-kt2kx82","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）"}]},{"ID":"20241101231932-wmqa7yw","Type":"NodeParagraph","Properties":{"id":"20241101231932-wmqa7yw","updated":"20241101231932"}},{"ID":"20241101231924-0b2uldf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241101231924-0b2uldf","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"跨域问题的解决方法"}]},{"ID":"20241101231924-z2asv41","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241101231924-z2asv41","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"后端解决：使用 cors"}]},{"ID":"20241101231924-vbla0v4","Type":"NodeParagraph","Properties":{"id":"20241101231924-vbla0v4","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"cors是跨域资源共享，是一种基于 HTTP 头的机制，该机制通过允许服务器标示除了它自己以外的其它 origin（域，协议和端口），使得浏览器允许这些 origin 访问加载自己的资源。服务端设置了Access-Control-Allow-Origin就开启了CORS，所以这种方式只要后端实现了CORS，就解决跨域问题，前端不需要配置。"}]},{"ID":"20241101231924-43al7tu","Type":"NodeParagraph","Properties":{"id":"20241101231924-43al7tu","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"使用该方式的特点：与前两种方式相比，前端代码和未处理跨域前一样，即普通的 ajax 请求，但服务器代码添加了一段解决跨域的代码。"}]},{"ID":"20241101231924-wmnd61h","Type":"NodeParagraph","Properties":{"id":"20241101231924-wmnd61h","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"springboot 解决跨域问题："}]},{"ID":"20241101231924-skbzmtw","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241101231924-skbzmtw","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"1. CrossOrigin注解"}]},{"ID":"20241101231924-j479ikn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241101231924-j479ikn","updated":"20241101231924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"//@CrossOrigin  表示所有的URL均可访问此资源\n@CrossOrigin(origins = \"http://127.0.0.1:8093\")//表示只允许这一个url可以跨域访问这个controller\n@RestController\n@RequestMapping(\"/testCorss\")\npublic class CorssOriginController {\n\n    //可以对方法运用该注解\n    //@CrossOrigin(origins = \"http://127.0.0.1:8093\")\n    @GetMapping(\"/getString\")\n    public String getString(){\n        return \"跨域成功！\";\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241101231924-fppci9h","Type":"NodeParagraph","Properties":{"id":"20241101231924-fppci9h","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"代码说明："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"@CrossOrigin"},{"Type":"NodeText","Data":"​这个注解用起来很方便，这个可以用在方法上，也可以用在类上。如果你不设置他的value属性，或者是origins属性，就默认是可以允许所有的URL/域访问。"}]},{"ID":"20241101231924-v2wlzcg","Type":"NodeList","ListData":{},"Properties":{"id":"20241101231924-v2wlzcg","updated":"20241101231924"},"Children":[{"ID":"20241101231924-q3wkyhr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-q3wkyhr","updated":"20241101231924"},"Children":[{"ID":"20241101231924-wan7a5g","Type":"NodeParagraph","Properties":{"id":"20241101231924-wan7a5g","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"value属性可以设置多个URL。"}]}]},{"ID":"20241101231924-es54380","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-es54380","updated":"20241101231924"},"Children":[{"ID":"20241101231924-iblg68e","Type":"NodeParagraph","Properties":{"id":"20241101231924-iblg68e","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"origins属性也可以设置多个URL。"}]}]},{"ID":"20241101231924-czl4f50","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-czl4f50","updated":"20241101231924"},"Children":[{"ID":"20241101231924-an2gu8r","Type":"NodeParagraph","Properties":{"id":"20241101231924-an2gu8r","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"maxAge属性指定了准备响应前的缓存持续的最大时间。就是探测请求的有效期。"}]}]},{"ID":"20241101231924-wbcrd4f","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-wbcrd4f","updated":"20241101231924"},"Children":[{"ID":"20241101231924-loa9n7o","Type":"NodeParagraph","Properties":{"id":"20241101231924-loa9n7o","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"allowCredentials属性表示用户是否可以发送、处理 cookie。默认为false"}]}]},{"ID":"20241101231924-eatofqt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-eatofqt","updated":"20241101231924"},"Children":[{"ID":"20241101231924-bpta6qb","Type":"NodeParagraph","Properties":{"id":"20241101231924-bpta6qb","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"allowedHeaders 属性表示允许的请求头部有哪些。"}]}]},{"ID":"20241101231924-qh49m2o","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-qh49m2o","updated":"20241101231924"},"Children":[{"ID":"20241101231924-i401om7","Type":"NodeParagraph","Properties":{"id":"20241101231924-i401om7","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"methods 属性表示允许请求的方法，默认get，post，head。"}]}]}]},{"ID":"20241101231924-pcmayjo","Type":"NodeParagraph","Properties":{"id":"20241101231924-pcmayjo","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"这个"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.bilibili.com/video/BV1NM4y1H7mM?p=16\u0026amp;vd_source=8a230e3eb3e99863373e7c6b51f126b6","TextMarkTextContent":"视频"},{"Type":"NodeText","Data":"讲了注解的方法，可以看一下。"}]},{"ID":"20241101231924-66kdqny","Type":"NodeParagraph","Properties":{"id":"20241101231924-66kdqny","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"此方式虽然虽然实现（跨域）比较简单，但你应该也发现了，使用此方式只能实现局部跨域，当一个项目中存在多个类的话，使用此方式就会比较麻烦（需要给所有类上都添加此注解）。"}]},{"ID":"20241101231924-3xpjkih","Type":"NodeParagraph","Properties":{"id":"20241101231924-3xpjkih","updated":"20241101231924"}},{"ID":"20241101231924-6k00zua","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241101231924-6k00zua","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"2. 实现WebMvcConfigurer"}]},{"ID":"20241101231924-9djs6ws","Type":"NodeParagraph","Properties":{"id":"20241101231924-9djs6ws","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"接下来我们通过设置配置文件的方式就可以实现全局跨域了，它的实现步骤如下："}]},{"ID":"20241101231924-2qiq5xd","Type":"NodeList","ListData":{},"Properties":{"id":"20241101231924-2qiq5xd","updated":"20241101231924"},"Children":[{"ID":"20241101231924-etbrtsi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-etbrtsi","updated":"20241101231924"},"Children":[{"ID":"20241101231924-ty745mj","Type":"NodeParagraph","Properties":{"id":"20241101231924-ty745mj","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"创建一个新配置文件 implements WebMvcConfigurer；"}]}]},{"ID":"20241101231924-busorm2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-busorm2","updated":"20241101231924"},"Children":[{"ID":"20241101231924-1t4vz1g","Type":"NodeParagraph","Properties":{"id":"20241101231924-1t4vz1g","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"添加 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"@Configuration"},{"Type":"NodeText","Data":"​ 注解，实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"WebMvcConfigurer"},{"Type":"NodeText","Data":"​ 接口；"}]}]},{"ID":"20241101231924-wg45i40","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101231924-wg45i40","updated":"20241101231924"},"Children":[{"ID":"20241101231924-0wi5avh","Type":"NodeParagraph","Properties":{"id":"20241101231924-0wi5avh","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"重写 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"addCorsMappings"},{"Type":"NodeText","Data":"​ 方法，设置允许跨域的代码。"}]}]}]},{"ID":"20241101231924-3ur169s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241101231924-3ur169s","updated":"20241101231924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n@Configuration // 一定不要忽略此注解\npublic class CorsConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\") // 所有接口\n                .allowCredentials(true) // 是否发送 Cookie\n                .allowedOriginPatterns(\"*\") // 支持域\n                .allowedMethods(new String[]{\"GET\", \"POST\", \"PUT\", \"DELETE\"}) // 支持方法\n                .allowedHeaders(\"*\")\n                .exposedHeaders(\"*\");\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241101231924-6srlhe2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241101231924-6srlhe2","updated":"20241101231924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public class MyWebMvcConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/testCross/**\")\n                .allowedHeaders(\"*\")\n                .allowedMethods(\"*\")\n                .allowCredentials(true)\n                .allowedOrigins(\"http://localhost:8093\")\n                .maxAge(2000);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241101231924-fp2qu1p","Type":"NodeParagraph","Properties":{"id":"20241101231924-fp2qu1p","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"这个没什么好说的，就重写"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"addCorsMappings"},{"Type":"NodeText","Data":"​方法就行，配置好参数，参数和上面的注解的参数类似。这个配置属于全局配置，配置好了全部的接口都遵循此规则。上面的注解方式只对类或者方法生效。addMaping是设置对那种格式的URL生效，也就是跟在URL后面的路径。"}]},{"ID":"20241101231924-0dgqprg","Type":"NodeParagraph","Properties":{"id":"20241101231924-0dgqprg","updated":"20241101231924"}},{"ID":"20241101231924-mozbvi9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241101231924-mozbvi9","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"3. 过滤器配置"}]},{"ID":"20241101231924-pkygap3","Type":"NodeParagraph","Properties":{"id":"20241101231924-pkygap3","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"此实现方式和上一种实现方式类似，它也可以实现全局跨域，它的具体实现代码如下："}]},{"ID":"20241101231924-oz97gf2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241101231924-oz97gf2","updated":"20241101231924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n \n@Configuration // 一定不能忽略此注解\npublic class MyCorsFilter {\n    @Bean\n    public CorsFilter corsFilter() {\n        // 1.创建 CORS 配置对象\n        CorsConfiguration config = new CorsConfiguration();\n        // 支持域\n        config.addAllowedOriginPattern(\"*\");\n        // 是否发送 Cookie\n        config.setAllowCredentials(true);\n        // 支持请求方式\n        config.addAllowedMethod(\"*\");\n        // 允许的原始请求头部信息\n        config.addAllowedHeader(\"*\");\n        // 暴露的头部信息\n        config.addExposedHeader(\"*\");\n        // 2.添加地址映射\n        UrlBasedCorsConfigurationSource corsConfigurationSource = new UrlBasedCorsConfigurationSource();\n        corsConfigurationSource.registerCorsConfiguration(\"/**\", config);\n        // 3.返回 CorsFilter 对象\n        return new CorsFilter(corsConfigurationSource);\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241101231924-54wejtl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241101231924-54wejtl","updated":"20241101231924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"import org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\n@Configuration\npublic class Filter {\n    @Bean\n    public FilterRegistrationBean corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowCredentials(true);\n        config.addAllowedOrigin(\"http://localhost:8093\");//*表示允许所有\n        config.addAllowedHeader(\"*\");\n        config.addAllowedMethod(\"*\");\n        source.registerCorsConfiguration(\"/**\", config); // CORS 配置对所有接口都有效\n        FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source));\n        bean.setOrder(0);\n        return bean;\n    }\n\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241101231924-mw37vd2","Type":"NodeParagraph","Properties":{"id":"20241101231924-mw37vd2","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"利用过滤器配置实现跨域,还有另外一种方法"}]},{"ID":"20241101231924-mwezwx4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241101231924-mwezwx4","updated":"20241101231924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"package com.example.democrossorigin.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.*;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@Configuration\npublic class CorssFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n            throws IOException, ServletException {\n        HttpServletResponse res = (HttpServletResponse) response;\n        res.addHeader(\"Access-Control-Allow-Credentials\", \"true\");\n        res.addHeader(\"Access-Control-Allow-Origin\", \"http://localhost:8093\");\n        res.addHeader(\"Access-Control-Allow-Methods\", \"GET, POST, DELETE, PUT\");\n        res.addHeader(\"Access-Control-Allow-Headers\", \"Content-Type,X-CAF-Authorization-Token,sessionToken,X-TOKEN\");\n        chain.doFilter(request, response);\n    }\n    @Override\n    public void destroy() {\n    }\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241101231924-kgocj4x","Type":"NodeParagraph","Properties":{"id":"20241101231924-kgocj4x","updated":"20241101231924"},"Children":[{"Type":"NodeText","Data":"参考链接："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://zhuanlan.zhihu.com/p/635893212","TextMarkTextContent":"Spring Boot 解决跨域问题的 5种方案"}]},{"ID":"20241101231927-idfmn3j","Type":"NodeParagraph","Properties":{"id":"20241101231927-idfmn3j","updated":"20241101231927"}},{"ID":"20241101232049-4b9s3l4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241101232049-4b9s3l4","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"前端解决：代理服务器"}]},{"ID":"20241101232049-bwgpuld","Type":"NodeParagraph","Properties":{"id":"20241101232049-bwgpuld","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"我用的这种方法，虽然不太清楚原理但是成功部署了。"}]},{"ID":"20241101232049-l1438on","Type":"NodeParagraph","Properties":{"id":"20241101232049-l1438on","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"首先在开发环境下，你需要在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vue.config.js"},{"Type":"NodeText","Data":"​中配置代理："}]},{"ID":"20241101232049-3kuzve5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20241101232049-3kuzve5","updated":"20241101232049"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"anM="},{"Type":"NodeCodeBlockCode","Data":"proxy: {\n      '/api': { // 定义了一个代理路径，表示以 /api 开头的请求将会被代理转发\n        // 指定了代理请求的目标地址，即后台的真实接口地址。这里目标地址是 http://localhost:8080/，\n        // 即代理服务器会将以 /api 开头的请求转发到这个地址。\n        target: process.env.VUE_APP_URL, \n        ws: false,\n        secure: false,\n        changeOrigin: true, // 表示启用跨域，允许代理服务器发送带有源 origin（请求的源地址）的请求\n        pathRewrite:{\n          // 浏览器发送的 /api/core/getData/userInfo 请求，代理服务器会将该请求的地址重写为 http://localhost:8080/core/getData/userInfo\n          // 并将重写后的请求转发给真实的后台接口地址，即把 /api 换成了空字符串\n          '^/api':''\n        }\n      }\n    },\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20241101232049-s94hudk","Type":"NodeParagraph","Properties":{"id":"20241101232049-s94hudk","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"然后你的生产环境就不会出现跨域问题了。"}]},{"ID":"20241101232049-jryrvkw","Type":"NodeParagraph","Properties":{"id":"20241101232049-jryrvkw","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"当你的项目打包部署到 Nginx 服务器上时，你还要配置 Nginx 服务器的代理。在 Nginx 的文件夹下"}]},{"ID":"20241101232049-uy8a45v","Type":"NodeList","ListData":{},"Properties":{"id":"20241101232049-uy8a45v","updated":"20241101232049"},"Children":[{"ID":"20241101232049-c3bfp5d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101232049-c3bfp5d","updated":"20241101232049"},"Children":[{"ID":"20241101232049-8ujmk2n","Type":"NodeParagraph","Properties":{"id":"20241101232049-8ujmk2n","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"点击exe启动"}]}]},{"ID":"20241101232049-apdfx0k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101232049-apdfx0k","updated":"20241101232049"},"Children":[{"ID":"20241101232049-pvbkb9o","Type":"NodeParagraph","Properties":{"id":"20241101232049-pvbkb9o","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"打包后的项目放 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/html"},{"Type":"NodeText","Data":"​ 里面"}]}]},{"ID":"20241101232049-hf5spwr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101232049-hf5spwr","updated":"20241101232049"},"Children":[{"ID":"20241101232049-zu2ybfy","Type":"NodeParagraph","Properties":{"id":"20241101232049-zu2ybfy","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/logs"},{"Type":"NodeText","Data":"​ 里面有报错信息"}]}]},{"ID":"20241101232049-xrp2mg3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241101232049-xrp2mg3","updated":"20241101232049"},"Children":[{"ID":"20241101232049-nqiuyj1","Type":"NodeParagraph","Properties":{"id":"20241101232049-nqiuyj1","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/conf/nginx.conf"},{"Type":"NodeText","Data":"​ 里面修改配置信息"}]}]}]},{"ID":"20241101232049-m2e86i7","Type":"NodeParagraph","Properties":{"id":"20241101232049-m2e86i7","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"浏览器直接访问 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http://localhost:80/"},{"Type":"NodeText","Data":"​ 就可以了，要修改端口改配置信息的这里："}]},{"ID":"20241101232049-4g1q6f8","Type":"NodeParagraph","Properties":{"id":"20241101232049-4g1q6f8","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"在这里插入图片描述"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/network-asset-312b9a5761c8cb58fa2fbca3f1de0c81-20241101232122-voolsrk.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241101232049-c3qhq8t","Type":"NodeParagraph","Properties":{"id":"20241101232049-c3qhq8t","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"后端服务器的地址是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http://localhost:8080/"},{"Type":"NodeText","Data":"​ ，前端项目通过代理服务器的方式解决跨域问题，所以将打包后的文件放到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/html"},{"Type":"NodeText","Data":"​ 里面后，还要修改代理服务器。"}]},{"ID":"20241101232049-qtzfk95","Type":"NodeParagraph","Properties":{"id":"20241101232049-qtzfk95","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"我修改了配置文件中的这里："}]},{"ID":"20241101232049-3xqdi8u","Type":"NodeParagraph","Properties":{"id":"20241101232049-3xqdi8u","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"在这里插入图片描述"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/network-asset-9d182290d6c143c9276efa07b3710760-20241101232122-85msntx.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20241101232049-dakjzin","Type":"NodeParagraph","Properties":{"id":"20241101232049-dakjzin","updated":"20241101232049"},"Children":[{"Type":"NodeText","Data":"参考链接："}]},{"ID":"20241101232049-cafzgxe","Type":"NodeParagraph","Properties":{"id":"20241101232049-cafzgxe","updated":"20241101232049"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://blog.csdn.net/qq_43511063/article/details/108092284","TextMarkTextContent":"vue项目部署服务器跨域处理（nginx）_本地测试不跨域,服务器上跨域"}]},{"ID":"20241101232049-2rzadbc","Type":"NodeParagraph","Properties":{"id":"20241101232049-2rzadbc","updated":"20241101232049"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://cn.bing.com/search?q=vue项目生产环境使用%2Fapi跨域，怎么部署到Nginx上","TextMarkTextContent":"vue项目生产环境使用/api跨域，怎么部署到Nginx上 - 搜索 (bing.com)"}]},{"ID":"20241101231927-x9nbykd","Type":"NodeParagraph","Properties":{"id":"20241101231927-x9nbykd","updated":"20241101231927"}},{"ID":"20241101231927-xri0in3","Type":"NodeParagraph","Properties":{"id":"20241101231927-xri0in3","updated":"20241101231927"}},{"ID":"20241101231927-dk3246x","Type":"NodeParagraph","Properties":{"id":"20241101231927-dk3246x","updated":"20241101231927"}}]}