{"ID":"20241031152419-2u5j03n","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241031152419-2u5j03n","title":"共享内存和循环队列","type":"doc","updated":"20241031152419"},"Children":[{"ID":"20241031152420-gk0jfzv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241031152420-gk0jfzv","updated":"20241031152420"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"共享内存"}]},{"ID":"20241031152421-x7gl077","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152421-x7gl077","updated":"20241031152421"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"进程间通信"}]},{"ID":"20241031152422-490a1ef","Type":"NodeParagraph","Properties":{"id":"20241031152422-490a1ef","updated":"20241031152422"},"Children":[{"Type":"NodeText","Data":"三个方法"}]},{"ID":"20241031152423-hij60vv","Type":"NodeParagraph","Properties":{"id":"20241031152423-hij60vv","updated":"20241031152423"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20240205115714632","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/image-20240205115714632-20241031152933-0u7drvz.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241031152424-m2i01m6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152424-m2i01m6","updated":"20241031152424"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"共享内存"}]},{"ID":"20241031152425-096yhre","Type":"NodeBlockquote","Properties":{"id":"20241031152425-096yhre","updated":"20241031152425"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20241031152426-uzizmvd","Type":"NodeParagraph","Properties":{"id":"20241031152426-uzizmvd","updated":"20241031152426"},"Children":[{"Type":"NodeText","Data":"详细的可以看：【C++网络编程，从0实现Reactor高并发服务器】 https://www.bilibili.com/video/BV11Z4y157RY/?p=21\u0026share_source=copy_web\u0026vd_source=29909144aff7d2c1451e8d294e9a5437"}]}]},{"ID":"20241031152427-uotc2pm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152427-uotc2pm","updated":"20241031152427"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#include \u003ciostream\u003e\n#include \u003ccstdio\u003e\n#include \u003ccstdlib\u003e\n#include \u003ccstring\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/ipc.h\u003e\n#include \u003csys/shm.h\u003e\nusing  namespace std;\n\nstruct stgirl     // 超女结构体。\n{\n  int  no;        // 编号。\n  char name[51];  // 姓名，注意，不能用string。\n};\n\nint main(int argc,char *argv[])\n{\n  if (argc!=3) { cout \u003c\u003c \"Using:./demo no name\\n\"; return -1; }\n\n  // 第1步：创建/获取共享内存，键值key为0x5005，也可以用其它的值。\n  int shmid=shmget(0x5005, sizeof(stgirl), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout \u003c\u003c \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  cout \u003c\u003c \"shmid=\" \u003c\u003c shmid \u003c\u003c endl;\n\n  // 第2步：把共享内存连接到当前进程的地址空间。\n  stgirl *ptr=(stgirl *)shmat(shmid,0,0);\n  if ( ptr==(void *)-1 )\n  {\n    cout \u003c\u003c \"shmat() failed\\n\"; return -1;\n  }\n\n  // 第3步：使用共享内存，对共享内存进行读/写。\n  cout \u003c\u003c \"原值：no=\" \u003c\u003c ptr-\u003eno \u003c\u003c \",name=\" \u003c\u003c ptr-\u003ename \u003c\u003c endl;  // 显示共享内存中的原值。\n  ptr-\u003eno=atoi(argv[1]);        // 对超女结构体的no成员赋值。\n  //strcpy(ptr-\u003ename,argv[2]);    // 对超女结构体的name成员赋值。\n  ptr-\u003ename=argv[2];\n  cout \u003c\u003c \"新值：no=\" \u003c\u003c ptr-\u003eno \u003c\u003c \",name=\" \u003c\u003c ptr-\u003ename \u003c\u003c endl;  // 显示共享内存中的当前值。\n\n  // 第4步：把共享内存从当前进程中分离。\n  shmdt(ptr);\n\n  // 第5步：删除共享内存。\n  //if (shmctl(shmid,IPC_RMID,0)==-1)\n  //{\n   // cout \u003c\u003c \"shmctl failed\\n\"; return -1;\n  //}\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152428-vxczkmw","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241031152428-vxczkmw","updated":"20241031152428"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"命令:查看系统的共享内存"}]},{"ID":"20241031152429-75s1e5f","Type":"NodeParagraph","Properties":{"id":"20241031152429-75s1e5f","updated":"20241031152429"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20240905215019560","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/image-20240905215019560-20241031152933-gz31c6b.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241031152430-28rjkic","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241031152430-28rjkic","updated":"20241031152430"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"循环队列"}]},{"ID":"20241031152431-y35izce","Type":"NodeParagraph","Properties":{"id":"20241031152431-y35izce","updated":"20241031152431"},"Children":[{"Type":"NodeText","Data":"为什么需要循环队列？"}]},{"ID":"20241031152432-y5xj5tc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152432-y5xj5tc","updated":"20241031152432"},"Children":[{"ID":"20241031152433-eciwrtm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152433-eciwrtm","updated":"20241031152433"},"Children":[{"ID":"20241031152434-2futkzy","Type":"NodeParagraph","Properties":{"id":"20241031152434-2futkzy","updated":"20241031152434"},"Children":[{"Type":"NodeText","Data":"共享内存不能自动扩展，只能采用C++内置的数据类型。"}]}]},{"ID":"20241031152435-i6he602","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152435-i6he602","updated":"20241031152435"},"Children":[{"ID":"20241031152436-yj968tq","Type":"NodeParagraph","Properties":{"id":"20241031152436-yj968tq","updated":"20241031152436"},"Children":[{"Type":"NodeText","Data":"共享内存不能采用STL容器，也不能使用移动语义。"}]}]},{"ID":"20241031152437-10qckbf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152437-10qckbf","updated":"20241031152437"},"Children":[{"ID":"20241031152438-6nvvngy","Type":"NodeParagraph","Properties":{"id":"20241031152438-6nvvngy","updated":"20241031152438"},"Children":[{"Type":"NodeText","Data":"如果要实现多进程的生产/消费者模型，只能采用循环队列。"}]}]}]},{"ID":"20241031152439-8cub6o5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152439-8cub6o5","updated":"20241031152439"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1）_public.h"}]},{"ID":"20241031152440-duopl33","Type":"NodeParagraph","Properties":{"id":"20241031152440-duopl33","updated":"20241031152440"},"Children":[{"Type":"NodeText","Data":"循环队列的头文件、信号量的头文件"}]},{"ID":"20241031152441-q39buuv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152441-q39buuv","updated":"20241031152441"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#ifndef __PUBLIC_HH\n#define __PUBLIC_HH 1\n\n#include \u003ciostream\u003e\n#include \u003ccstdio\u003e\n#include \u003ccstdlib\u003e\n#include \u003ccstring\u003e\n#include \u003cunistd.h\u003e\n#include \u003csys/ipc.h\u003e\n#include \u003csys/shm.h\u003e\n#include \u003csys/types.h\u003e\n#include \u003csys/sem.h\u003e\nusing namespace std;\n\n// 循环队列。\ntemplate \u003cclass TT, int MaxLength\u003e\nclass squeue\n{\nprivate:\n  bool m_inited;              // 队列被初始化标志，true-已初始化；false-未初始化。\n  TT   m_data[MaxLength];     // 用数组存储循环队列中的元素。\n  int  m_head;                // 队列的头指针。\n  int  m_tail;                // 队列的尾指针，指向队尾元素。\n  int  m_length;              // 队列的实际长度。    \n  squeue(const squeue \u0026) = delete;             // 禁用拷贝构造函数。\n  squeue \u0026operator=(const squeue \u0026) = delete;  // 禁用赋值函数。\npublic:\n\n  squeue() { init(); }  // 构造函数。\n\n  // 循环队列的初始化操作。\n  // 注意：如果用于共享内存的队列，不会调用构造函数，必须调用此函数初始化。\n  void init()  \n  { \n    if (m_inited!=true)      // 循环队列的初始化只能执行一次。\n    { \n      m_head=0;              // 头指针。\n      m_tail=MaxLength-1;    // 为了方便写代码，初始化时，尾指针指向队列的最后一个位置。\n      m_length=0;            // 队列的实际长度。\n      memset(m_data,0,sizeof(m_data));  // 数组元素清零。\n      m_inited=true; \n    }\n  }\n\n  // 元素入队，返回值：false-失败；true-成功。\n  bool push(const TT \u0026ee)\n  {\n    if (full() == true)\n    {\n      cout \u003c\u003c \"循环队列已满，入队失败。\\n\"; return false;\n    }\n\n    // 先移动队尾指针，然后再拷贝数据。\n    m_tail=(m_tail+1)%MaxLength;  // 队尾指针后移。\n    m_data[m_tail]=ee;\n    m_length++;    \n\n    return true;\n  }\n\n  // 求循环队列的长度，返回值：\u003e=0-队列中元素的个数。\n  int  size()                   \n  {\n    return m_length;    \n  }\n\n  // 判断循环队列是否为空，返回值：true-空，false-非空。\n  bool empty()                    \n  {\n    if (m_length == 0) return true;    \n\n    return false;\n  }\n\n  // 判断循环队列是否已满，返回值：true-已满，false-未满。\n  bool full()\n  {\n    if (m_length == MaxLength) return true;    \n\n    return false;\n  }\n\n  // 查看队头元素的值，元素不出队。\n  TT\u0026 front()\n  {\n    return m_data[m_head];\n  }\n\n  // 元素出队，返回值：false-失败；true-成功。\n  bool pop()\n  {\n    if (empty() == true) return false;\n\n    m_head=(m_head+1)%MaxLength;  // 队列头指针后移。\n    m_length--;    \n\n    return true;\n  }\n\n  // 显示循环队列中全部的元素。\n  // 这是一个临时的用于调试的函数，队列中元素的数据类型支持cout输出才可用。\n  void printqueue()                    \n  {\n    for (int ii = 0; ii \u003c size(); ii++)\n    {\n      cout \u003c\u003c \"m_data[\" \u003c\u003c (m_head+ii)%MaxLength \u003c\u003c \"],value=\" \\\n           \u003c\u003c m_data[(m_head+ii)%MaxLength] \u003c\u003c endl;\n    }\n  }\n};\n\n// 信号量。\nclass csemp\n{\nprivate:\n  union semun  // 用于信号量操作的共同体。\n  {\n    int val;\n    struct semid_ds *buf;\n    unsigned short  *arry;\n  };\n\n  int   m_semid;         // 信号量id（描述符）。\n\n  // 如果把sem_flg设置为SEM_UNDO，操作系统将跟踪进程对信号量的修改情况，\n  // 在全部修改过信号量的进程（正常或异常）终止后，操作系统将把信号量恢复为初始值。\n  // 如果信号量用于互斥锁，设置为SEM_UNDO。\n  // 如果信号量用于生产消费者模型，设置为0。\n  short m_sem_flg;\n\n  csemp(const csemp \u0026) = delete;             // 禁用拷贝构造函数。\n  csemp \u0026operator=(const csemp \u0026) = delete;  // 禁用赋值函数。\npublic:\n  csemp():m_semid(-1){}\n  // 如果信号量已存在，获取信号量；如果信号量不存在，则创建它并初始化为value。\n  // 如果用于互斥锁，value填1，sem_flg填SEM_UNDO。\n  // 如果用于生产消费者模型，value填0，sem_flg填0。\n  bool init(key_t key,unsigned short value=1,short sem_flg=SEM_UNDO);\n  bool wait(short value=-1);// 信号量的P操作，如果信号量的值是0，将阻塞等待，直到信号量的值大于0。\n  bool post(short value=1); // 信号量的V操作。\n  int  getvalue();           // 获取信号量的值，成功返回信号量的值，失败返回-1。\n  bool destroy();            // 销毁信号量。\n ~csemp();\n};\n\n#endif\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152442-yg3y6uw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152442-yg3y6uw","updated":"20241031152442"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2）_public.cpp"}]},{"ID":"20241031152443-ug2lnsc","Type":"NodeParagraph","Properties":{"id":"20241031152443-ug2lnsc","updated":"20241031152443"},"Children":[{"Type":"NodeText","Data":"信号量的源文件"}]},{"ID":"20241031152444-m6zto9l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152444-m6zto9l","updated":"20241031152444"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#include \"_public.h\"\n\n// 如果信号量已存在，获取信号量；如果信号量不存在，则创建它并初始化为value。\n// 如果用于互斥锁，value填1，sem_flg填SEM_UNDO。\n// 如果用于生产消费者模型，value填0，sem_flg填0。\nbool csemp::init(key_t key,unsigned short value,short sem_flg)\n{\n  if (m_semid!=-1) return false; // 如果已经初始化了，不必再次初始化。\n\n  m_sem_flg=sem_flg;\n\n  // 信号量的初始化不能直接用semget(key,1,0666|IPC_CREAT)\n  // 因为信号量创建后，初始值是0，如果用于互斥锁，需要把它的初始值设置为1，\n  // 而获取信号量则不需要设置初始值，所以，创建信号量和获取信号量的流程不同。\n\n  // 信号量的初始化分三个步骤：\n  // 1）获取信号量，如果成功，函数返回。\n  // 2）如果失败，则创建信号量。\n  // 3) 设置信号量的初始值。\n\n  // 获取信号量。\n  if ( (m_semid=semget(key,1,0666)) == -1)\n  {\n    // 如果信号量不存在，创建它。\n    if (errno==ENOENT)\n    {\n      // 用IPC_EXCL标志确保只有一个进程创建并初始化信号量，其它进程只能获取。\n      if ( (m_semid=semget(key,1,0666|IPC_CREAT|IPC_EXCL)) == -1)\n      {\n        if (errno==EEXIST) // 如果错误代码是信号量已存在，则再次获取信号量。\n        {\n          if ( (m_semid=semget(key,1,0666)) == -1)\n          { \n            perror(\"init 1 semget()\"); return false; \n          }\n          return true;\n        }\n        else  // 如果是其它错误，返回失败。\n        {\n          perror(\"init 2 semget()\"); return false;\n        }\n      }\n\n      // 信号量创建成功后，还需要把它初始化成value。\n      union semun sem_union;\n      sem_union.val = value;   // 设置信号量的初始值。\n      if (semctl(m_semid,0,SETVAL,sem_union) \u003c  0) \n      { \n        perror(\"init semctl()\"); return false; \n      }\n    }\n    else\n    { perror(\"init 3 semget()\"); return false; }\n  }\n\n  return true;\n}\n\n// 信号量的P操作（把信号量的值减value），如果信号量的值是0，将阻塞等待，直到信号量的值大于0。\nbool csemp::wait(short value)\n{\n  if (m_semid==-1) return false;\n\n  struct sembuf sem_b;\n  sem_b.sem_num = 0;      // 信号量编号，0代表第一个信号量。\n  sem_b.sem_op = value;   // P操作的value必须小于0。\n  sem_b.sem_flg = m_sem_flg;\n  if (semop(m_semid,\u0026sem_b,1) == -1) { perror(\"p semop()\"); return false; }\n\n  return true;\n}\n\n// 信号量的V操作（把信号量的值减value）。\nbool csemp::post(short value)\n{\n  if (m_semid==-1) return false;\n\n  struct sembuf sem_b;\n  sem_b.sem_num = 0;     // 信号量编号，0代表第一个信号量。\n  sem_b.sem_op = value;  // V操作的value必须大于0。\n  sem_b.sem_flg = m_sem_flg;\n  if (semop(m_semid,\u0026sem_b,1) == -1) { perror(\"V semop()\"); return false; }\n\n  return true;\n}\n\n// 获取信号量的值，成功返回信号量的值，失败返回-1。\nint csemp::getvalue()\n{\n  return semctl(m_semid,0,GETVAL);\n}\n\n// 销毁信号量。\nbool csemp::destroy()\n{\n  if (m_semid==-1) return false;\n\n  if (semctl(m_semid,0,IPC_RMID) == -1) { perror(\"destroy semctl()\"); return false; }\n\n  return true;\n}\n\ncsemp::~csemp()\n{\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152445-z39vik0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152445-z39vik0","updated":"20241031152445"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3）demo1"}]},{"ID":"20241031152446-etnobaj","Type":"NodeParagraph","Properties":{"id":"20241031152446-etnobaj","updated":"20241031152446"},"Children":[{"Type":"NodeText","Data":"演示普通使用循环队列"}]},{"ID":"20241031152447-zdl1xzp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152447-zdl1xzp","updated":"20241031152447"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// demo1.cpp，本程序演示循环队列的使用。\n#include \"_public.h\"\n\nint main()\n{\n  using ElemType=int;\n\n  squeue\u003cElemType,5\u003e QQ;\n\n  ElemType ee;      // 创建一个数据元素。\n\n  cout \u003c\u003c \"元素（1、2、3）入队。\\n\";\n  ee=1;  QQ.push(ee);\n  ee=2;  QQ.push(ee);\n  ee=3;  QQ.push(ee);\n\n  cout \u003c\u003c \"队列的长度是\" \u003c\u003c QQ.size() \u003c\u003c endl;\n  QQ.printqueue();\n\n  ee=QQ.front(); QQ.pop(); cout \u003c\u003c \"出队的元素值为\" \u003c\u003c ee \u003c\u003c endl;\n  ee=QQ.front(); QQ.pop(); cout \u003c\u003c \"出队的元素值为\" \u003c\u003c ee \u003c\u003c endl;\n\n  cout \u003c\u003c \"队列的长度是\" \u003c\u003c QQ.size() \u003c\u003c endl;\n  QQ.printqueue();\n\n  cout \u003c\u003c \"元素（11、12、13、14、15）入队。\\n\";\n  ee=11;  QQ.push(ee);\n  ee=12;  QQ.push(ee);\n  ee=13;  QQ.push(ee);\n  ee=14;  QQ.push(ee);\n  ee=15;  QQ.push(ee);\n\n  cout \u003c\u003c \"队列的长度是\" \u003c\u003c QQ.size() \u003c\u003c endl;\n  QQ.printqueue();\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152448-emymuon","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152448-emymuon","updated":"20241031152448"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4）demo2"}]},{"ID":"20241031152449-mmo064r","Type":"NodeParagraph","Properties":{"id":"20241031152449-mmo064r","updated":"20241031152449"},"Children":[{"Type":"NodeText","Data":"共享内存使用循环队列"}]},{"ID":"20241031152450-o2hn8r0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152450-o2hn8r0","updated":"20241031152450"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// demo2.cpp，本程序演示基于共享内存的循环队列。\n#include \"_public.h\"\n\nint main()\n{\n  using ElemType=int;\n\n  // 初始化共享内存，大小是长度为5的循环队列\n  int shmid=shmget(0x5005, sizeof(squeue\u003cElemType,5\u003e), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout \u003c\u003c \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  // 把共享内存连接到当前进程的地址空间，要强制类型转换\n  squeue\u003cElemType,5\u003e *QQ=(squeue\u003cElemType,5\u003e *)shmat(shmid,0,0);\n  if ( QQ==(void *)-1 )\n  {\n    cout \u003c\u003c \"shmat() failed\\n\"; return -1;\n  }\n\n  QQ-\u003einit();       // 初始化循环队列。\n\n  ElemType ee;      // 创建一个数据元素。\n\n  cout \u003c\u003c \"元素（1、2、3）入队。\\n\";\n  ee=1;  QQ-\u003epush(ee);\n  ee=2;  QQ-\u003epush(ee);\n  ee=3;  QQ-\u003epush(ee);\n\n  cout \u003c\u003c \"队列的长度是\" \u003c\u003c QQ-\u003esize() \u003c\u003c endl;\n  QQ-\u003eprintqueue();\n\n  ee=QQ-\u003efront(); QQ-\u003epop(); cout \u003c\u003c \"出队的元素值为\" \u003c\u003c ee \u003c\u003c endl;\n  ee=QQ-\u003efront(); QQ-\u003epop(); cout \u003c\u003c \"出队的元素值为\" \u003c\u003c ee \u003c\u003c endl;\n\n  cout \u003c\u003c \"队列的长度是\" \u003c\u003c QQ-\u003esize() \u003c\u003c endl;\n  QQ-\u003eprintqueue();\n\n  cout \u003c\u003c \"元素（11、12、13、14、15）入队。\\n\";\n  ee=11;  QQ-\u003epush(ee);\n  ee=12;  QQ-\u003epush(ee);\n  ee=13;  QQ-\u003epush(ee);\n  ee=14;  QQ-\u003epush(ee);\n  ee=15;  QQ-\u003epush(ee);\n\n  cout \u003c\u003c \"队列的长度是\" \u003c\u003c QQ-\u003esize() \u003c\u003c endl;\n  QQ-\u003eprintqueue();\n\n  shmdt(QQ);  // 把共享内存从当前进程中分离。\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152451-mq5y5g0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241031152451-mq5y5g0","updated":"20241031152451"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"信号量"}]},{"ID":"20241031152452-557xcln","Type":"NodeParagraph","Properties":{"id":"20241031152452-557xcln","updated":"20241031152452"},"Children":[{"Type":"NodeText","Data":"基本概念"}]},{"ID":"20241031152453-7msdkv0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152453-7msdkv0","updated":"20241031152453"},"Children":[{"ID":"20241031152454-uq9p9zr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152454-uq9p9zr","updated":"20241031152454"},"Children":[{"ID":"20241031152455-pv1suhq","Type":"NodeParagraph","Properties":{"id":"20241031152455-pv1suhq","updated":"20241031152455"},"Children":[{"Type":"NodeText","Data":"信号量本质上是一个非负数(≥0)的计数器。"}]}]},{"ID":"20241031152456-jjqr367","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152456-jjqr367","updated":"20241031152456"},"Children":[{"ID":"20241031152457-oiai614","Type":"NodeParagraph","Properties":{"id":"20241031152457-oiai614","updated":"20241031152457"},"Children":[{"Type":"NodeText","Data":"用于给共享资源建立一个标志，表示该共享资源被占用情况。"}]}]}]},{"ID":"20241031152458-odcapal","Type":"NodeParagraph","Properties":{"id":"20241031152458-odcapal","updated":"20241031152458"},"Children":[{"Type":"NodeText","Data":"信号量的两种操作"}]},{"ID":"20241031152459-kykrnsp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152459-kykrnsp","updated":"20241031152459"},"Children":[{"ID":"20241031152460-jlbo9vp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152460-jlbo9vp","updated":"20241031152460"},"Children":[{"ID":"20241031152461-w2fh8pi","Type":"NodeParagraph","Properties":{"id":"20241031152461-w2fh8pi","updated":"20241031152461"},"Children":[{"Type":"NodeText","Data":"Р操作(wait)将信号量的值减1，如果信号量的值为0，将阻塞等待，直到信号量的值大于0。"}]}]},{"ID":"20241031152462-sq3ftwq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152462-sq3ftwq","updated":"20241031152462"},"Children":[{"ID":"20241031152463-tiw9yxk","Type":"NodeParagraph","Properties":{"id":"20241031152463-tiw9yxk","updated":"20241031152463"},"Children":[{"Type":"NodeText","Data":"V操作(post)将信号量的值加1，任何时候都不会阻塞。"}]}]}]},{"ID":"20241031152464-gt2r0nc","Type":"NodeParagraph","Properties":{"id":"20241031152464-gt2r0nc","updated":"20241031152464"},"Children":[{"Type":"NodeText","Data":"信号量的应用场景"}]},{"ID":"20241031152465-7mj3bhe","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152465-7mj3bhe","updated":"20241031152465"},"Children":[{"ID":"20241031152466-mt9r0mo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152466-mt9r0mo","updated":"20241031152466"},"Children":[{"ID":"20241031152467-hqpkkt0","Type":"NodeParagraph","Properties":{"id":"20241031152467-hqpkkt0","updated":"20241031152467"},"Children":[{"Type":"NodeText","Data":"如果约定信号量的取值只是0和1(0:资源不可用，1:资源可用)，可以实现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互斥锁"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20241031152468-qxn8x0k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152468-qxn8x0k","updated":"20241031152468"},"Children":[{"ID":"20241031152469-booeiva","Type":"NodeParagraph","Properties":{"id":"20241031152469-booeiva","updated":"20241031152469"},"Children":[{"Type":"NodeText","Data":"如果约定信号量的取值表示可用资源的数量，可以实现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"生产/消费者模型"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20241031152470-ec41roo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152470-ec41roo","updated":"20241031152470"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1）_public.h"}]},{"ID":"20241031152471-ek82y94","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152471-ek82y94","updated":"20241031152471"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 信号量。\nclass csemp\n{\nprivate:\n  union semun  // 用于信号量操作的共同体。\n  {\n    int val;\n    struct semid_ds *buf;\n    unsigned short  *arry;\n  };\n\n  int   m_semid;         // 信号量id（描述符）。\n\n  // 如果把sem_flg设置为SEM_UNDO，操作系统将跟踪进程对信号量的修改情况，\n  // 在全部修改过信号量的进程（正常或异常）终止后，操作系统将把信号量恢复为初始值。\n  // 如果信号量用于互斥锁，设置为SEM_UNDO。\n  // 如果信号量用于生产消费者模型，设置为0。\n  short m_sem_flg;\n\n  csemp(const csemp \u0026) = delete;             // 禁用拷贝构造函数。\n  csemp \u0026operator=(const csemp \u0026) = delete;  // 禁用赋值函数。\npublic:\n  csemp():m_semid(-1){}\n  // 如果信号量已存在，获取信号量；如果信号量不存在，则创建它并初始化为value。\n  // 如果用于互斥锁，value填1，sem_flg填SEM_UNDO。\n  // 如果用于生产消费者模型，value填0，sem_flg填0。\n  bool init(key_t key,unsigned short value=1,short sem_flg=SEM_UNDO);\n  bool wait(short value=-1);// 信号量的P操作，如果信号量的值是0，将阻塞等待，直到信号量的值大于0。\n  bool post(short value=1); // 信号量的V操作。\n  int  getvalue();           // 获取信号量的值，成功返回信号量的值，失败返回-1。\n  bool destroy();            // 销毁信号量。\n ~csemp();\n};\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152472-ol1n9tx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152472-ol1n9tx","updated":"20241031152472"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2）_public.cpp"}]},{"ID":"20241031152473-qoauchx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152473-qoauchx","updated":"20241031152473"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#include \"_public.h\"\n\n// 如果信号量已存在，获取信号量；如果信号量不存在，则创建它并初始化为value。\n// 如果用于互斥锁，value填1，sem_flg填SEM_UNDO。\n// 如果用于生产消费者模型，value填0，sem_flg填0。\nbool csemp::init(key_t key,unsigned short value,short sem_flg)\n{\n  if (m_semid!=-1) return false; // 如果已经初始化了，不必再次初始化。\n\n  m_sem_flg=sem_flg;\n\n  // 信号量的初始化不能直接用semget(key,1,0666|IPC_CREAT)\n  // 因为信号量创建后，初始值是0，如果用于互斥锁，需要把它的初始值设置为1，\n  // 而获取信号量则不需要设置初始值，所以，创建信号量和获取信号量的流程不同。\n\n  // 信号量的初始化分三个步骤：\n  // 1）获取信号量，如果成功，函数返回。\n  // 2）如果失败，则创建信号量。\n  // 3) 设置信号量的初始值。\n\n  // 获取信号量。\n  if ( (m_semid=semget(key,1,0666)) == -1)\n  {\n    // 如果信号量不存在，创建它。\n    if (errno==ENOENT)\n    {\n      // 用IPC_EXCL标志确保只有一个进程创建并初始化信号量，其它进程只能获取。\n      if ( (m_semid=semget(key,1,0666|IPC_CREAT|IPC_EXCL)) == -1)\n      {\n        if (errno==EEXIST) // 如果错误代码是信号量已存在，则再次获取信号量。\n        {\n          if ( (m_semid=semget(key,1,0666)) == -1)\n          { \n            perror(\"init 1 semget()\"); return false; \n          }\n          return true;\n        }\n        else  // 如果是其它错误，返回失败。\n        {\n          perror(\"init 2 semget()\"); return false;\n        }\n      }\n\n      // 信号量创建成功后，还需要把它初始化成value。\n      union semun sem_union;\n      sem_union.val = value;   // 设置信号量的初始值。\n      if (semctl(m_semid,0,SETVAL,sem_union) \u003c  0) \n      { \n        perror(\"init semctl()\"); return false; \n      }\n    }\n    else\n    { perror(\"init 3 semget()\"); return false; }\n  }\n\n  return true;\n}\n\n// 信号量的P操作（把信号量的值减value），如果信号量的值是0，将阻塞等待，直到信号量的值大于0。\nbool csemp::wait(short value)\n{\n  if (m_semid==-1) return false;\n\n  struct sembuf sem_b;\n  sem_b.sem_num = 0;      // 信号量编号，0代表第一个信号量。\n  sem_b.sem_op = value;   // P操作的value必须小于0。\n  sem_b.sem_flg = m_sem_flg;\n  if (semop(m_semid,\u0026sem_b,1) == -1) { perror(\"p semop()\"); return false; }\n\n  return true;\n}\n\n// 信号量的V操作（把信号量的值减value）。\nbool csemp::post(short value)\n{\n  if (m_semid==-1) return false;\n\n  struct sembuf sem_b;\n  sem_b.sem_num = 0;     // 信号量编号，0代表第一个信号量。\n  sem_b.sem_op = value;  // V操作的value必须大于0。\n  sem_b.sem_flg = m_sem_flg;\n  if (semop(m_semid,\u0026sem_b,1) == -1) { perror(\"V semop()\"); return false; }\n\n  return true;\n}\n\n// 获取信号量的值，成功返回信号量的值，失败返回-1。\nint csemp::getvalue()\n{\n  return semctl(m_semid,0,GETVAL);\n}\n\n// 销毁信号量。\nbool csemp::destroy()\n{\n  if (m_semid==-1) return false;\n\n  if (semctl(m_semid,0,IPC_RMID) == -1) { perror(\"destroy semctl()\"); return false; }\n\n  return true;\n}\n\ncsemp::~csemp()\n{\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152474-gjvkqnn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152474-gjvkqnn","updated":"20241031152474"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3）demo3"}]},{"ID":"20241031152475-da0fqqn","Type":"NodeParagraph","Properties":{"id":"20241031152475-da0fqqn","updated":"20241031152475"},"Children":[{"Type":"NodeText","Data":"用信号量给共享内存加锁"}]},{"ID":"20241031152476-8zmollx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152476-8zmollx","updated":"20241031152476"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// demo3.cpp，本程序演示用信号量给共享内存加锁。\n#include \"_public.h\"\n\nstruct stgirl     // 超女结构体。\n{\n  int  no;        // 编号。\n  char name[51];  // 姓名，注意，不能用string。\n};\n\nint main(int argc,char *argv[])\n{\n  if (argc!=3) { cout \u003c\u003c \"Using:./demo no name\\n\"; return -1; }\n\n  // 第1步：创建/获取共享内存，键值key为0x5005，也可以用其它的值。\n  int shmid=shmget(0x5005, sizeof(stgirl), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  { \n    cout \u003c\u003c \"shmget(0x5005) failed.\\n\"; return -1; \n  }\n\n  cout \u003c\u003c \"shmid=\" \u003c\u003c shmid \u003c\u003c endl;\n\n  // 第2步：把共享内存连接到当前进程的地址空间。\n  stgirl *ptr=(stgirl *)shmat(shmid,0,0);\n  if ( ptr==(void *)-1 )\n  { \n    cout \u003c\u003c \"shmat() failed\\n\"; return -1; \n  }\n\n  // 创建、初始化二元信号量。\n  csemp mutex;\n  if (mutex.init(0x5005)==false)\n  {\n    cout \u003c\u003c \"mutex.init(0x5005) failed.\\n\"; return -1;\n  }\n\n  cout \u003c\u003c \"申请加锁...\\n\";\n  mutex.wait(); // 申请加锁。\n  cout \u003c\u003c \"申请加锁成功。\\n\";\n\n  // 第3步：使用共享内存，对共享内存进行读/写。\n  cout \u003c\u003c \"原值：no=\" \u003c\u003c ptr-\u003eno \u003c\u003c \",name=\" \u003c\u003c ptr-\u003ename \u003c\u003c endl;  // 显示共享内存中的原值。\n  ptr-\u003eno=atoi(argv[1]);        // 对超女结构体的no成员赋值。\n  strcpy(ptr-\u003ename,argv[2]);    // 对超女结构体的name成员赋值。\n  cout \u003c\u003c \"新值：no=\" \u003c\u003c ptr-\u003eno \u003c\u003c \",name=\" \u003c\u003c ptr-\u003ename \u003c\u003c endl;  // 显示共享内存中的当前值。\n  sleep(10);\n\n  mutex.post(); // 解锁。\n  cout \u003c\u003c \"解锁。\\n\";\n\n  // 查看信号量  ：ipcs -s    // 删除信号量  ：ipcrm sem 信号量id\n  // 查看共享内存：ipcs -m    // 删除共享内存：ipcrm -m  共享内存id\n\n  // 第4步：把共享内存从当前进程中分离。\n  shmdt(ptr);\n\n  // 第5步：删除共享内存。\n  //if (shmctl(shmid,IPC_RMID,0)==-1)\n  //{ \n   // cout \u003c\u003c \"shmctl failed\\n\"; return -1; \n  //}\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152477-5l9ga2d","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152477-5l9ga2d","updated":"20241031152477"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"函数"}]},{"ID":"20241031152478-cg6vq07","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241031152478-cg6vq07","updated":"20241031152478"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"semget"}]},{"ID":"20241031152479-7q0sdh2","Type":"NodeParagraph","Properties":{"id":"20241031152479-7q0sdh2","updated":"20241031152479"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 是一个用于创建或获取 System V 信号量集的函数，它是 UNIX 系统 V IPC（Inter-Process Communication, 进程间通信）机制的一部分。信号量集是一个用于同步的信号量数组，可以在多个进程之间共享，用于控制访问共享资源。"}]},{"ID":"20241031152480-77u1fti","Type":"NodeParagraph","Properties":{"id":"20241031152480-77u1fti","updated":"20241031152480"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"semget"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 函数的定义"}]},{"ID":"20241031152481-gipjnl4","Type":"NodeParagraph","Properties":{"id":"20241031152481-gipjnl4","updated":"20241031152481"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 的定义在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;sys/sem.h\u0026gt;"},{"Type":"NodeText","Data":" 头文件中，函数原型如下："}]},{"ID":"20241031152482-2offdid","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152482-2offdid","updated":"20241031152482"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int semget(key_t key, int nsems, int semflg);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152483-gotnev4","Type":"NodeParagraph","Properties":{"id":"20241031152483-gotnev4","updated":"20241031152483"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"参数说明"}]},{"ID":"20241031152484-hbwz437","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152484-hbwz437","updated":"20241031152484"},"Children":[{"ID":"20241031152485-wmhtmaf","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152485-wmhtmaf","updated":"20241031152485"},"Children":[{"ID":"20241031152486-ti55tw9","Type":"NodeParagraph","Properties":{"id":"20241031152486-ti55tw9","updated":"20241031152486"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"key"},{"Type":"NodeText","Data":"：用于标识信号量集的键值。这个键值类似于一个名字，用于找到或创建特定的信号量集。可以是由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ftok"},{"Type":"NodeText","Data":" 函数生成的键，也可以是一个用户定义的整数值。特殊值 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IPC_PRIVATE"},{"Type":"NodeText","Data":" 可以用来创建一个新的信号量集，该信号量集只能在创建它的进程和其子进程之间使用。"}]}]},{"ID":"20241031152487-gkosna9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241031152487-gkosna9","updated":"20241031152487"},"Children":[{"ID":"20241031152488-osg4ddr","Type":"NodeParagraph","Properties":{"id":"20241031152488-osg4ddr","updated":"20241031152488"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"nsems"},{"Type":"NodeText","Data":"：指定信号量集包含的信号量个数。只有在创建新信号量集时（即当信号量集不存在时），"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nsems"},{"Type":"NodeText","Data":" 的值才会生效。如果获取已有的信号量集，则该参数会被忽略。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nsems"},{"Type":"NodeText","Data":" 必须是一个正数，表示信号量集内的信号量数量。"}]}]},{"ID":"20241031152489-96h2735","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241031152489-96h2735","updated":"20241031152489"},"Children":[{"ID":"20241031152490-jvap3z9","Type":"NodeParagraph","Properties":{"id":"20241031152490-jvap3z9","updated":"20241031152490"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"semflg"},{"Type":"NodeText","Data":"：标志位，用于指定创建信号量集的权限及行为。通常包括以下标志："}]},{"ID":"20241031152491-8ox8czs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152491-8ox8czs","updated":"20241031152491"},"Children":[{"ID":"20241031152492-767x55u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152492-767x55u","updated":"20241031152492"},"Children":[{"ID":"20241031152493-pxeucif","Type":"NodeParagraph","Properties":{"id":"20241031152493-pxeucif","updated":"20241031152493"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"权限标志"},{"Type":"NodeText","Data":"：与文件权限类似的值，例如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0666"},{"Type":"NodeText","Data":"（可读可写）。"}]}]},{"ID":"20241031152494-stbzvsf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152494-stbzvsf","updated":"20241031152494"},"Children":[{"ID":"20241031152495-hjvsg60","Type":"NodeParagraph","Properties":{"id":"20241031152495-hjvsg60","updated":"20241031152495"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"IPC_CREAT"},{"Type":"NodeText","Data":"：如果指定的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"key"},{"Type":"NodeText","Data":" 没有对应的信号量集，则创建一个新的信号量集。"}]}]},{"ID":"20241031152496-yq61c7u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152496-yq61c7u","updated":"20241031152496"},"Children":[{"ID":"20241031152497-zg81t6b","Type":"NodeParagraph","Properties":{"id":"20241031152497-zg81t6b","updated":"20241031152497"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"IPC_EXCL"},{"Type":"NodeText","Data":"：与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IPC_CREAT"},{"Type":"NodeText","Data":" 结合使用时，如果信号量集已存在，则返回错误，而不会打开已存在的信号量集。"}]}]}]}]}]},{"ID":"20241031152498-kn1evnt","Type":"NodeParagraph","Properties":{"id":"20241031152498-kn1evnt","updated":"20241031152498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"返回值"}]},{"ID":"20241031152499-by3sx7j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152499-by3sx7j","updated":"20241031152499"},"Children":[{"ID":"20241031152500-n8i7g5m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152500-n8i7g5m","updated":"20241031152500"},"Children":[{"ID":"20241031152501-gptrw3w","Type":"NodeParagraph","Properties":{"id":"20241031152501-gptrw3w","updated":"20241031152501"},"Children":[{"Type":"NodeText","Data":"成功时，返回信号量集的标识符（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semid"},{"Type":"NodeText","Data":"），这个标识符在后续的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semop"},{"Type":"NodeText","Data":" 或 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 操作中用于引用该信号量集。"}]}]},{"ID":"20241031152502-2zgdoo4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152502-2zgdoo4","updated":"20241031152502"},"Children":[{"ID":"20241031152503-tdzdpth","Type":"NodeParagraph","Properties":{"id":"20241031152503-tdzdpth","updated":"20241031152503"},"Children":[{"Type":"NodeText","Data":"失败时，返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-1"},{"Type":"NodeText","Data":"，并设置 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"errno"},{"Type":"NodeText","Data":" 来指示错误原因。常见的错误包括无权限、资源不足等。"}]}]}]},{"ID":"20241031152504-1d1ftka","Type":"NodeParagraph","Properties":{"id":"20241031152504-1d1ftka","updated":"20241031152504"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用示例"}]},{"ID":"20241031152505-85qfme8","Type":"NodeParagraph","Properties":{"id":"20241031152505-85qfme8","updated":"20241031152505"},"Children":[{"Type":"NodeText","Data":"下面是一个简单的示例代码，演示如何使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 创建或获取一个信号量集："}]},{"ID":"20241031152506-dzvex0b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152506-dzvex0b","updated":"20241031152506"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#include \u003csys/types.h\u003e\n#include \u003csys/ipc.h\u003e\n#include \u003csys/sem.h\u003e\n#include \u003cstdio.h\u003e\n\nint main() {\n    key_t key = ftok(\"path/to/somefile\", 'A'); // 使用文件路径和字符生成一个键\n    int semid = semget(key, 1, 0666 | IPC_CREAT); // 创建或获取一个包含1个信号量的信号量集\n\n    if (semid == -1) {\n        perror(\"semget failed\");\n        return 1;\n    }\n\n    printf(\"Semaphore ID: %d\\n\", semid);\n    return 0;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152507-gmsxy4h","Type":"NodeParagraph","Properties":{"id":"20241031152507-gmsxy4h","updated":"20241031152507"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"典型应用"}]},{"ID":"20241031152508-h0erw5a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152508-h0erw5a","updated":"20241031152508"},"Children":[{"ID":"20241031152509-4cb5cbw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152509-4cb5cbw","updated":"20241031152509"},"Children":[{"ID":"20241031152510-4wfnkmc","Type":"NodeParagraph","Properties":{"id":"20241031152510-4wfnkmc","updated":"20241031152510"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建新信号量集"},{"Type":"NodeText","Data":"：如果指定的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"key"},{"Type":"NodeText","Data":" 没有对应的信号量集，并且使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IPC_CREAT"},{"Type":"NodeText","Data":" 标志，则 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 会创建一个新的信号量集。"}]}]},{"ID":"20241031152511-dbsflkx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152511-dbsflkx","updated":"20241031152511"},"Children":[{"ID":"20241031152512-nshsx23","Type":"NodeParagraph","Properties":{"id":"20241031152512-nshsx23","updated":"20241031152512"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"获取现有信号量集"},{"Type":"NodeText","Data":"：如果信号量集已存在，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 会返回现有信号量集的标识符。"}]}]},{"ID":"20241031152513-5oo5uoh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152513-5oo5uoh","updated":"20241031152513"},"Children":[{"ID":"20241031152514-cdsu2ba","Type":"NodeParagraph","Properties":{"id":"20241031152514-cdsu2ba","updated":"20241031152514"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"用于进程间同步"},{"Type":"NodeText","Data":"：信号量集可以用于多个进程之间的同步控制，通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semop"},{"Type":"NodeText","Data":" 来操作信号量的增减，实现对共享资源的访问控制。"}]}]}]},{"ID":"20241031152515-q5wh8j8","Type":"NodeParagraph","Properties":{"id":"20241031152515-q5wh8j8","updated":"20241031152515"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意事项"}]},{"ID":"20241031152516-4ctsgbs","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152516-4ctsgbs","updated":"20241031152516"},"Children":[{"ID":"20241031152517-u5x4toh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152517-u5x4toh","updated":"20241031152517"},"Children":[{"ID":"20241031152518-izpuyld","Type":"NodeParagraph","Properties":{"id":"20241031152518-izpuyld","updated":"20241031152518"},"Children":[{"Type":"NodeText","Data":"创建信号量集时，如果指定了过多的信号量数（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nsems"},{"Type":"NodeText","Data":"），可能会导致内存分配失败或系统资源耗尽。"}]}]},{"ID":"20241031152519-vxplhd0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152519-vxplhd0","updated":"20241031152519"},"Children":[{"ID":"20241031152520-5km20ta","Type":"NodeParagraph","Properties":{"id":"20241031152520-5km20ta","updated":"20241031152520"},"Children":[{"Type":"NodeText","Data":"使用信号量集时应注意权限控制，以避免由于权限不足导致的访问失败。"}]}]}]},{"ID":"20241031152521-2np4h6a","Type":"NodeParagraph","Properties":{"id":"20241031152521-2np4h6a","updated":"20241031152521"},"Children":[{"Type":"NodeText","Data":"总结来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 是一个关键函数，用于创建或获取 System V 信号量集，通过它可以在多个进程之间实现高效的同步和控制。"}]},{"ID":"20241031152522-otqt6zt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241031152522-otqt6zt","updated":"20241031152522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"semctl"}]},{"ID":"20241031152523-gnbzlvd","Type":"NodeParagraph","Properties":{"id":"20241031152523-gnbzlvd","updated":"20241031152523"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 是 System V 信号量操作中一个非常重要的函数，用于控制信号量集或单个信号量的操作。它可以执行各种与信号量集相关的管理操作，例如设置或获取信号量的状态、删除信号量集等。"}]},{"ID":"20241031152524-t4sv76t","Type":"NodeParagraph","Properties":{"id":"20241031152524-t4sv76t","updated":"20241031152524"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"semctl"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 函数定义"}]},{"ID":"20241031152525-ejycias","Type":"NodeParagraph","Properties":{"id":"20241031152525-ejycias","updated":"20241031152525"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 通常定义在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;sys/sem.h\u0026gt;"},{"Type":"NodeText","Data":" 头文件中，函数原型如下："}]},{"ID":"20241031152526-hl1niut","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152526-hl1niut","updated":"20241031152526"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int semctl(int semid, int semnum, int cmd, ...);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152527-jn7d6a0","Type":"NodeParagraph","Properties":{"id":"20241031152527-jn7d6a0","updated":"20241031152527"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"参数解释"}]},{"ID":"20241031152528-p7h288r","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152528-p7h288r","updated":"20241031152528"},"Children":[{"ID":"20241031152529-tk795jf","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152529-tk795jf","updated":"20241031152529"},"Children":[{"ID":"20241031152530-1za7ucp","Type":"NodeParagraph","Properties":{"id":"20241031152530-1za7ucp","updated":"20241031152530"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"semid"},{"Type":"NodeText","Data":"：信号量集的标识符，通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 函数返回。该参数标识要操作的信号量集。"}]}]},{"ID":"20241031152531-wpmwwun","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241031152531-wpmwwun","updated":"20241031152531"},"Children":[{"ID":"20241031152532-5jmk22f","Type":"NodeParagraph","Properties":{"id":"20241031152532-5jmk22f","updated":"20241031152532"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"semnum"},{"Type":"NodeText","Data":"：信号量集中的信号量编号（从 0 开始），指示对哪个信号量进行操作。如果操作的是整个信号量集而非某个具体的信号量，该参数可以忽略（设置为 0）。"}]}]},{"ID":"20241031152533-mntf4iz","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241031152533-mntf4iz","updated":"20241031152533"},"Children":[{"ID":"20241031152534-8ryicqc","Type":"NodeParagraph","Properties":{"id":"20241031152534-8ryicqc","updated":"20241031152534"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"cmd"},{"Type":"NodeText","Data":"：指定要执行的命令或操作。这是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 的核心参数，决定了函数执行的具体行为。"}]}]},{"ID":"20241031152535-33rwpz7","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20241031152535-33rwpz7","updated":"20241031152535"},"Children":[{"ID":"20241031152536-e7kbr1k","Type":"NodeParagraph","Properties":{"id":"20241031152536-e7kbr1k","updated":"20241031152536"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"..."},{"Type":"NodeText","Data":"：可选参数，取决于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cmd"},{"Type":"NodeText","Data":"，可能需要提供一个指向数据的指针或整数值（例如，用于设置值或获取状态）。"}]}]}]},{"ID":"20241031152537-s1zcmg9","Type":"NodeParagraph","Properties":{"id":"20241031152537-s1zcmg9","updated":"20241031152537"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"常用命令（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"cmd"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"）"}]},{"ID":"20241031152538-m3ef32e","Type":"NodeParagraph","Properties":{"id":"20241031152538-m3ef32e","updated":"20241031152538"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 可以接受多种命令，常见的有："}]},{"ID":"20241031152539-lw1j93z","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152539-lw1j93z","updated":"20241031152539"},"Children":[{"ID":"20241031152540-f83tmnd","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152540-f83tmnd","updated":"20241031152540"},"Children":[{"ID":"20241031152541-1vgjl46","Type":"NodeParagraph","Properties":{"id":"20241031152541-1vgjl46","updated":"20241031152541"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"IPC_STAT"},{"Type":"NodeText","Data":"：获取信号量集的状态信息，填充 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semid_ds"},{"Type":"NodeText","Data":" 结构体。用于查询信号量集的元数据（权限、上次操作时间等）。"}]},{"ID":"20241031152542-0bkkm3r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152542-0bkkm3r","updated":"20241031152542"},"Children":[{"ID":"20241031152543-xavcqfi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152543-xavcqfi","updated":"20241031152543"},"Children":[{"ID":"20241031152544-9unnh9c","Type":"NodeParagraph","Properties":{"id":"20241031152544-9unnh9c","updated":"20241031152544"},"Children":[{"Type":"NodeText","Data":"需要提供一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semid_ds"},{"Type":"NodeText","Data":" 结构体的指针。"}]}]}]},{"ID":"20241031152545-gfavprf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152545-gfavprf","updated":"20241031152545"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"struct semid_ds sem_ds;\nsemctl(semid, 0, IPC_STAT, \u0026sem_ds);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152546-73mvtd9","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241031152546-73mvtd9","updated":"20241031152546"},"Children":[{"ID":"20241031152547-zetcbsi","Type":"NodeParagraph","Properties":{"id":"20241031152547-zetcbsi","updated":"20241031152547"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"IPC_SET"},{"Type":"NodeText","Data":"：设置信号量集的状态信息。通过修改 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semid_ds"},{"Type":"NodeText","Data":" 结构体中的某些字段来改变信号量集的元数据，如修改权限信息。"}]},{"ID":"20241031152548-q0qlkat","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152548-q0qlkat","updated":"20241031152548"},"Children":[{"ID":"20241031152549-y2y9g60","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152549-y2y9g60","updated":"20241031152549"},"Children":[{"ID":"20241031152550-zqw3w6w","Type":"NodeParagraph","Properties":{"id":"20241031152550-zqw3w6w","updated":"20241031152550"},"Children":[{"Type":"NodeText","Data":"需要提供一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semid_ds"},{"Type":"NodeText","Data":" 结构体的指针。"}]}]}]},{"ID":"20241031152551-fao5zfg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152551-fao5zfg","updated":"20241031152551"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"struct semid_ds sem_ds;\nsemctl(semid, 0, IPC_SET, \u0026sem_ds);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152552-ex5teg1","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20241031152552-ex5teg1","updated":"20241031152552"},"Children":[{"ID":"20241031152553-caz6wz7","Type":"NodeParagraph","Properties":{"id":"20241031152553-caz6wz7","updated":"20241031152553"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"IPC_RMID"},{"Type":"NodeText","Data":"：删除信号量集。此命令删除信号量集并释放相关的系统资源。"}]},{"ID":"20241031152554-5gm0efv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152554-5gm0efv","updated":"20241031152554"},"Children":[{"ID":"20241031152555-xrgyqc6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152555-xrgyqc6","updated":"20241031152555"},"Children":[{"ID":"20241031152556-8qm5u8j","Type":"NodeParagraph","Properties":{"id":"20241031152556-8qm5u8j","updated":"20241031152556"},"Children":[{"Type":"NodeText","Data":"不需要其他参数。"}]}]}]},{"ID":"20241031152557-d6mpc6n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152557-d6mpc6n","updated":"20241031152557"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"semctl(semid, 0, IPC_RMID);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152558-apelrsb","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20241031152558-apelrsb","updated":"20241031152558"},"Children":[{"ID":"20241031152559-cemm3a4","Type":"NodeParagraph","Properties":{"id":"20241031152559-cemm3a4","updated":"20241031152559"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"GETVAL"},{"Type":"NodeText","Data":"：获取某个信号量的当前值。"}]},{"ID":"20241031152560-3n8sls0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152560-3n8sls0","updated":"20241031152560"},"Children":[{"ID":"20241031152561-q36n03t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152561-q36n03t","updated":"20241031152561"},"Children":[{"ID":"20241031152562-m88fe9j","Type":"NodeParagraph","Properties":{"id":"20241031152562-m88fe9j","updated":"20241031152562"},"Children":[{"Type":"NodeText","Data":"需要提供信号量编号（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semnum"},{"Type":"NodeText","Data":"），返回值是该编号对应的信号量的当前值。"}]}]}]},{"ID":"20241031152563-5i37uhk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152563-5i37uhk","updated":"20241031152563"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int semval = semctl(semid, semnum, GETVAL);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152564-t6yl1de","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20241031152564-t6yl1de","updated":"20241031152564"},"Children":[{"ID":"20241031152565-dmhdwsq","Type":"NodeParagraph","Properties":{"id":"20241031152565-dmhdwsq","updated":"20241031152565"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SETVAL"},{"Type":"NodeText","Data":"：设置某个信号量的值。"}]},{"ID":"20241031152566-95blzox","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152566-95blzox","updated":"20241031152566"},"Children":[{"ID":"20241031152567-pynmxv0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152567-pynmxv0","updated":"20241031152567"},"Children":[{"ID":"20241031152568-otk00r9","Type":"NodeParagraph","Properties":{"id":"20241031152568-otk00r9","updated":"20241031152568"},"Children":[{"Type":"NodeText","Data":"需要提供信号量编号（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semnum"},{"Type":"NodeText","Data":"）以及一个新的信号量值（整数）。"}]}]}]},{"ID":"20241031152569-64tvyj3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152569-64tvyj3","updated":"20241031152569"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"semctl(semid, semnum, SETVAL, new_value);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152570-wi6x6h5","Type":"NodeListItem","Data":"6","ListData":{"Typ":1,"Tight":true,"Start":6,"Delimiter":46,"Padding":3,"Marker":"Ng==","Num":6},"Properties":{"id":"20241031152570-wi6x6h5","updated":"20241031152570"},"Children":[{"ID":"20241031152571-7pxegpr","Type":"NodeParagraph","Properties":{"id":"20241031152571-7pxegpr","updated":"20241031152571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"GETALL"},{"Type":"NodeText","Data":"：获取信号量集中所有信号量的当前值。"}]},{"ID":"20241031152572-a7lfq2o","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152572-a7lfq2o","updated":"20241031152572"},"Children":[{"ID":"20241031152573-3nilsd2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152573-3nilsd2","updated":"20241031152573"},"Children":[{"ID":"20241031152574-i1kwpup","Type":"NodeParagraph","Properties":{"id":"20241031152574-i1kwpup","updated":"20241031152574"},"Children":[{"Type":"NodeText","Data":"需要提供一个整数数组，用于存放所有信号量的值。"}]}]}]},{"ID":"20241031152575-01ovo0g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152575-01ovo0g","updated":"20241031152575"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"unsigned short semvals[num_sems];\nsemctl(semid, 0, GETALL, semvals);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152576-g9c6xqb","Type":"NodeListItem","Data":"7","ListData":{"Typ":1,"Tight":true,"Start":7,"Delimiter":46,"Padding":3,"Marker":"Nw==","Num":7},"Properties":{"id":"20241031152576-g9c6xqb","updated":"20241031152576"},"Children":[{"ID":"20241031152577-ni74j0t","Type":"NodeParagraph","Properties":{"id":"20241031152577-ni74j0t","updated":"20241031152577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"SETALL"},{"Type":"NodeText","Data":"：设置信号量集中所有信号量的值。"}]},{"ID":"20241031152578-8a39sgb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152578-8a39sgb","updated":"20241031152578"},"Children":[{"ID":"20241031152579-dbeo7j0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152579-dbeo7j0","updated":"20241031152579"},"Children":[{"ID":"20241031152580-mgyrr25","Type":"NodeParagraph","Properties":{"id":"20241031152580-mgyrr25","updated":"20241031152580"},"Children":[{"Type":"NodeText","Data":"需要提供一个整数数组，数组中的每个元素用于设置信号量集中对应信号量的值。"}]}]}]},{"ID":"20241031152581-ih5i8a1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152581-ih5i8a1","updated":"20241031152581"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"unsigned short semvals[num_sems] = {1, 2, 3};\nsemctl(semid, 0, SETALL, semvals);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152582-ztiogkz","Type":"NodeListItem","Data":"8","ListData":{"Typ":1,"Tight":true,"Start":8,"Delimiter":46,"Padding":3,"Marker":"OA==","Num":8},"Properties":{"id":"20241031152582-ztiogkz","updated":"20241031152582"},"Children":[{"ID":"20241031152583-mmp0hzi","Type":"NodeParagraph","Properties":{"id":"20241031152583-mmp0hzi","updated":"20241031152583"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"GETPID"},{"Type":"NodeText","Data":"：获取执行上一次 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semop"},{"Type":"NodeText","Data":" 操作的进程的 PID。"}]},{"ID":"20241031152584-umarr1s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152584-umarr1s","updated":"20241031152584"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int pid = semctl(semid, semnum, GETPID);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152585-eo8pdux","Type":"NodeListItem","Data":"9","ListData":{"Typ":1,"Tight":true,"Start":9,"Delimiter":46,"Padding":3,"Marker":"OQ==","Num":9},"Properties":{"id":"20241031152585-eo8pdux","updated":"20241031152585"},"Children":[{"ID":"20241031152586-9dxql5x","Type":"NodeParagraph","Properties":{"id":"20241031152586-9dxql5x","updated":"20241031152586"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"GETZCNT"},{"Type":"NodeText","Data":"：获取当前等待信号量值为 0 的进程数。"}]},{"ID":"20241031152587-excxdho","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152587-excxdho","updated":"20241031152587"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int count = semctl(semid, semnum, GETZCNT);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]},{"ID":"20241031152588-hzl23eq","Type":"NodeListItem","Data":"10","ListData":{"Typ":1,"Tight":true,"Start":10,"Delimiter":46,"Padding":4,"Marker":"MTA=","Num":10},"Properties":{"id":"20241031152588-hzl23eq","updated":"20241031152588"},"Children":[{"ID":"20241031152589-6urh65z","Type":"NodeParagraph","Properties":{"id":"20241031152589-6urh65z","updated":"20241031152589"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"GETNCNT"},{"Type":"NodeText","Data":"：获取当前等待信号量值大于 0 的进程数。"}]},{"ID":"20241031152590-ldjpnnk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152590-ldjpnnk","updated":"20241031152590"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"int count = semctl(semid, semnum, GETNCNT);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]},{"ID":"20241031152591-63p4ffd","Type":"NodeParagraph","Properties":{"id":"20241031152591-63p4ffd","updated":"20241031152591"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"semctl"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 使用示例"}]},{"ID":"20241031152592-8vbrv2w","Type":"NodeParagraph","Properties":{"id":"20241031152592-8vbrv2w","updated":"20241031152592"},"Children":[{"Type":"NodeText","Data":"下面是一个简单的使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 设置和获取信号量值的示例："}]},{"ID":"20241031152593-r09rw2o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152593-r09rw2o","updated":"20241031152593"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"#include \u003csys/types.h\u003e\n#include \u003csys/ipc.h\u003e\n#include \u003csys/sem.h\u003e\n#include \u003cstdio.h\u003e\n\nint main() {\n    key_t key = ftok(\"path/to/somefile\", 'A');\n    int semid = semget(key, 1, 0666 | IPC_CREAT); // 创建或获取信号量集\n\n    if (semid == -1) {\n        perror(\"semget failed\");\n        return 1;\n    }\n\n    // 设置信号量值\n    if (semctl(semid, 0, SETVAL, 1) == -1) {\n        perror(\"semctl SETVAL failed\");\n        return 1;\n    }\n\n    // 获取信号量值\n    int semval = semctl(semid, 0, GETVAL);\n    if (semval == -1) {\n        perror(\"semctl GETVAL failed\");\n        return 1;\n    }\n\n    printf(\"Semaphore value: %d\\n\", semval);\n\n    // 删除信号量集\n    if (semctl(semid, 0, IPC_RMID) == -1) {\n        perror(\"semctl IPC_RMID failed\");\n        return 1;\n    }\n\n    return 0;\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152594-velsy0x","Type":"NodeParagraph","Properties":{"id":"20241031152594-velsy0x","updated":"20241031152594"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20241031152595-s780aj2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152595-s780aj2","updated":"20241031152595"},"Children":[{"ID":"20241031152596-f2prf0a","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152596-f2prf0a","updated":"20241031152596"},"Children":[{"ID":"20241031152597-v24d9vt","Type":"NodeParagraph","Properties":{"id":"20241031152597-v24d9vt","updated":"20241031152597"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 是用于控制和管理 System V 信号量集的多功能工具。"}]}]},{"ID":"20241031152598-vkedron","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152598-vkedron","updated":"20241031152598"},"Children":[{"ID":"20241031152599-q5vkfnu","Type":"NodeParagraph","Properties":{"id":"20241031152599-q5vkfnu","updated":"20241031152599"},"Children":[{"Type":"NodeText","Data":"它可以执行从删除信号量集到设置和获取信号量值的各种操作。"}]}]},{"ID":"20241031152600-4z6185c","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152600-4z6185c","updated":"20241031152600"},"Children":[{"ID":"20241031152601-5tgxvpf","Type":"NodeParagraph","Properties":{"id":"20241031152601-5tgxvpf","updated":"20241031152601"},"Children":[{"Type":"NodeText","Data":"使用时要特别注意提供正确的参数，尤其是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cmd"},{"Type":"NodeText","Data":" 参数所对应的具体需求。"}]}]}]},{"ID":"20241031152602-7phg9c2","Type":"NodeParagraph","Properties":{"id":"20241031152602-7phg9c2","updated":"20241031152602"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":"，可以方便地对信号量集和信号量进行管理，确保多个进程或线程在访问共享资源时的同步和协调。"}]},{"ID":"20241031152603-dokm0xa","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20241031152603-dokm0xa","updated":"20241031152603"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"SysV 信号量与POSIX 信号量"}]},{"ID":"20241031152604-gxhs41f","Type":"NodeParagraph","Properties":{"id":"20241031152604-gxhs41f","updated":"20241031152604"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 函数属于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"System V"},{"Type":"NodeText","Data":"（SysV） 信号量的 API，而 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"POSIX 信号量"},{"Type":"NodeText","Data":" 则是另一个独立的进程间同步机制。这两种信号量机制虽然都用于进程或线程之间的同步，但它们在实现方式、使用场景和 API 上有很大不同。"}]},{"ID":"20241031152605-56zd39k","Type":"NodeParagraph","Properties":{"id":"20241031152605-56zd39k","updated":"20241031152605"},"Children":[{"Type":"NodeText","Data":"SysV 信号量 ("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":")"}]},{"ID":"20241031152606-kqa6nrq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152606-kqa6nrq","updated":"20241031152606"},"Children":[{"ID":"20241031152607-12rk0k2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152607-12rk0k2","updated":"20241031152607"},"Children":[{"ID":"20241031152608-2ehrfen","Type":"NodeParagraph","Properties":{"id":"20241031152608-2ehrfen","updated":"20241031152608"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建和管理方式"},{"Type":"NodeText","Data":"：使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semop"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":" 函数管理 SysV 信号量。信号量可以作为一个信号量集存在，一个信号量集可以包含多个信号量。"}]}]},{"ID":"20241031152609-ci3nq4z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152609-ci3nq4z","updated":"20241031152609"},"Children":[{"ID":"20241031152610-9f8z0pm","Type":"NodeParagraph","Properties":{"id":"20241031152610-9f8z0pm","updated":"20241031152610"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"标识符"},{"Type":"NodeText","Data":"：通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"key"},{"Type":"NodeText","Data":" 创建或获取一个信号量集，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"key"},{"Type":"NodeText","Data":" 通常由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ftok"},{"Type":"NodeText","Data":" 函数生成，并返回一个信号量集的标识符 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semid"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20241031152611-s9zspmx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152611-s9zspmx","updated":"20241031152611"},"Children":[{"ID":"20241031152612-r57mqku","Type":"NodeParagraph","Properties":{"id":"20241031152612-r57mqku","updated":"20241031152612"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"特性"},{"Type":"NodeText","Data":"：信号量集可以在多个不相关的进程之间使用，非常适合进程间的同步控制。SysV 信号量有较高的管理复杂性，适合用于需要严格控制并发的系统。"}]}]},{"ID":"20241031152613-pfthp4i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152613-pfthp4i","updated":"20241031152613"},"Children":[{"ID":"20241031152614-yllvuvd","Type":"NodeParagraph","Properties":{"id":"20241031152614-yllvuvd","updated":"20241031152614"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内核管理"},{"Type":"NodeText","Data":"：信号量集及其状态信息由操作系统内核维护。"}]}]}]},{"ID":"20241031152615-31rlf91","Type":"NodeParagraph","Properties":{"id":"20241031152615-31rlf91","updated":"20241031152615"},"Children":[{"Type":"NodeText","Data":"POSIX 信号量"}]},{"ID":"20241031152616-1yit47y","Type":"NodeParagraph","Properties":{"id":"20241031152616-1yit47y","updated":"20241031152616"},"Children":[{"Type":"NodeText","Data":"POSIX 信号量是另一种用于进程或线程同步的机制，它提供了两种类型的信号量："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"命名信号量"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"匿名信号量"},{"Type":"NodeText","Data":"。"}]},{"ID":"20241031152617-o84r8j6","Type":"NodeList","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152617-o84r8j6","updated":"20241031152617"},"Children":[{"ID":"20241031152618-6ehp0eq","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20241031152618-6ehp0eq","updated":"20241031152618"},"Children":[{"ID":"20241031152619-frrkxvz","Type":"NodeParagraph","Properties":{"id":"20241031152619-frrkxvz","updated":"20241031152619"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"命名信号量"},{"Type":"NodeText","Data":"："}]},{"ID":"20241031152620-1mgrx9y","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152620-1mgrx9y","updated":"20241031152620"},"Children":[{"ID":"20241031152621-nikkze8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152621-nikkze8","updated":"20241031152621"},"Children":[{"ID":"20241031152622-j85pekf","Type":"NodeParagraph","Properties":{"id":"20241031152622-j85pekf","updated":"20241031152622"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建方式"},{"Type":"NodeText","Data":"：通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_open"},{"Type":"NodeText","Data":" 函数创建或打开一个命名信号量。"}]}]},{"ID":"20241031152623-5o8z1k0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152623-5o8z1k0","updated":"20241031152623"},"Children":[{"ID":"20241031152624-jr0wt6q","Type":"NodeParagraph","Properties":{"id":"20241031152624-jr0wt6q","updated":"20241031152624"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"标识符"},{"Type":"NodeText","Data":"：通过名称（一个字符串）标识信号量，不依赖 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"key"},{"Type":"NodeText","Data":" 值。多个进程通过同一个名称来访问同一个信号量。"}]}]},{"ID":"20241031152625-diqi6gj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152625-diqi6gj","updated":"20241031152625"},"Children":[{"ID":"20241031152626-lmc6inn","Type":"NodeParagraph","Properties":{"id":"20241031152626-lmc6inn","updated":"20241031152626"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适用场景"},{"Type":"NodeText","Data":"：命名信号量可以在不同的进程之间使用，非常适合进程间同步。"}]}]}]}]},{"ID":"20241031152627-qydwmmb","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20241031152627-qydwmmb","updated":"20241031152627"},"Children":[{"ID":"20241031152628-t3ir3c1","Type":"NodeParagraph","Properties":{"id":"20241031152628-t3ir3c1","updated":"20241031152628"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"匿名信号量"},{"Type":"NodeText","Data":"："}]},{"ID":"20241031152629-b3wj4b0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152629-b3wj4b0","updated":"20241031152629"},"Children":[{"ID":"20241031152630-755q4vx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152630-755q4vx","updated":"20241031152630"},"Children":[{"ID":"20241031152631-l9y7xpi","Type":"NodeParagraph","Properties":{"id":"20241031152631-l9y7xpi","updated":"20241031152631"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"创建方式"},{"Type":"NodeText","Data":"：使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_init"},{"Type":"NodeText","Data":" 创建匿名信号量。匿名信号量不能跨进程使用，只能在线程间共享，除非它们被放置在共享内存中。"}]}]},{"ID":"20241031152632-7mp82zx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152632-7mp82zx","updated":"20241031152632"},"Children":[{"ID":"20241031152633-8g5vx51","Type":"NodeParagraph","Properties":{"id":"20241031152633-8g5vx51","updated":"20241031152633"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"标识符"},{"Type":"NodeText","Data":"：匿名信号量没有名称，必须通过传递指针共享。"}]}]}]}]}]},{"ID":"20241031152634-sqqzzf8","Type":"NodeParagraph","Properties":{"id":"20241031152634-sqqzzf8","updated":"20241031152634"},"Children":[{"Type":"NodeText","Data":"主要区别"}]},{"ID":"20241031152635-vufsepi","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152635-vufsepi","updated":"20241031152635"},"Children":[{"ID":"20241031152636-0hrq01q","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152636-0hrq01q","updated":"20241031152636"},"Children":[{"ID":"20241031152637-xd0pda4","Type":"NodeParagraph","Properties":{"id":"20241031152637-xd0pda4","updated":"20241031152637"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"API 不同"},{"Type":"NodeText","Data":"：SysV 信号量使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semop"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semctl"},{"Type":"NodeText","Data":"，而 POSIX 信号量使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_init"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_wait"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_post"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_open"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_close"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sem_unlink"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20241031152638-k116m8i","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152638-k116m8i","updated":"20241031152638"},"Children":[{"ID":"20241031152639-0jr80nd","Type":"NodeParagraph","Properties":{"id":"20241031152639-0jr80nd","updated":"20241031152639"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实现机制"},{"Type":"NodeText","Data":"："}]},{"ID":"20241031152640-a63ms11","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152640-a63ms11","updated":"20241031152640"},"Children":[{"ID":"20241031152641-kwm2vfk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152641-kwm2vfk","updated":"20241031152641"},"Children":[{"ID":"20241031152642-0thoxcq","Type":"NodeParagraph","Properties":{"id":"20241031152642-0thoxcq","updated":"20241031152642"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SysV 信号量"},{"Type":"NodeText","Data":"：信号量集的控制信息由内核维护，并且可以在不同的进程间共享。它通常适用于较复杂的 IPC（进程间通信）场景，适合长时间运行的应用。"}]}]},{"ID":"20241031152643-9816tkc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152643-9816tkc","updated":"20241031152643"},"Children":[{"ID":"20241031152644-imi9xqf","Type":"NodeParagraph","Properties":{"id":"20241031152644-imi9xqf","updated":"20241031152644"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"POSIX 信号量"},{"Type":"NodeText","Data":"：POSIX 提供了更现代的接口，POSIX 信号量可以使用更简单、直观的 API 操作，尤其在多线程场景下，POSIX 信号量更加轻量。"}]}]}]}]},{"ID":"20241031152645-4h7optu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152645-4h7optu","updated":"20241031152645"},"Children":[{"ID":"20241031152646-tullbtg","Type":"NodeParagraph","Properties":{"id":"20241031152646-tullbtg","updated":"20241031152646"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"跨进程同步"},{"Type":"NodeText","Data":"："}]},{"ID":"20241031152647-gxtaluw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152647-gxtaluw","updated":"20241031152647"},"Children":[{"ID":"20241031152648-pwuwpgy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152648-pwuwpgy","updated":"20241031152648"},"Children":[{"ID":"20241031152649-n1teala","Type":"NodeParagraph","Properties":{"id":"20241031152649-n1teala","updated":"20241031152649"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SysV 信号量"},{"Type":"NodeText","Data":"：天然支持进程间通信，通过 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 生成的信号量集可以在多个不相关的进程间使用。"}]}]},{"ID":"20241031152650-26j0z59","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152650-26j0z59","updated":"20241031152650"},"Children":[{"ID":"20241031152651-ggf5v47","Type":"NodeParagraph","Properties":{"id":"20241031152651-ggf5v47","updated":"20241031152651"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"POSIX 命名信号量"},{"Type":"NodeText","Data":"：也可以用于进程间通信，但匿名信号量只能用于线程间同步，除非通过共享内存进行传递。"}]}]}]}]},{"ID":"20241031152652-xjvf5ku","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152652-xjvf5ku","updated":"20241031152652"},"Children":[{"ID":"20241031152653-zwq9iai","Type":"NodeParagraph","Properties":{"id":"20241031152653-zwq9iai","updated":"20241031152653"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"复杂性"},{"Type":"NodeText","Data":"："}]},{"ID":"20241031152654-wue7ln1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152654-wue7ln1","updated":"20241031152654"},"Children":[{"ID":"20241031152655-sp8r4k8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152655-sp8r4k8","updated":"20241031152655"},"Children":[{"ID":"20241031152656-o98h26f","Type":"NodeParagraph","Properties":{"id":"20241031152656-o98h26f","updated":"20241031152656"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"SysV 信号量"},{"Type":"NodeText","Data":" 的使用通常较为复杂，涉及信号量集和权限管理。"}]}]},{"ID":"20241031152657-32dxccl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":1,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152657-32dxccl","updated":"20241031152657"},"Children":[{"ID":"20241031152658-2vegvvx","Type":"NodeParagraph","Properties":{"id":"20241031152658-2vegvvx","updated":"20241031152658"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"POSIX 信号量"},{"Type":"NodeText","Data":" 的接口设计更为现代化和简洁，特别是在多线程应用中更容易使用。"}]}]}]}]}]},{"ID":"20241031152659-t8wzbjc","Type":"NodeParagraph","Properties":{"id":"20241031152659-t8wzbjc","updated":"20241031152659"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20241031152660-wujosm0","Type":"NodeParagraph","Properties":{"id":"20241031152660-wujosm0","updated":"20241031152660"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"semget"},{"Type":"NodeText","Data":" 与 POSIX 信号量没有直接关系，它是 System V 信号量的专用函数。而 POSIX 信号量使用的是完全不同的 API 和机制。SysV 信号量适用于更复杂的进程间通信场景，而 POSIX 信号量提供了更轻量的接口，适合线程间或进程间的同步。"}]},{"ID":"20241031152661-tb0aaan","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152661-tb0aaan","updated":"20241031152661"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"命令:查看系统的信号量"}]},{"ID":"20241031152662-jpnp76z","Type":"NodeParagraph","Properties":{"id":"20241031152662-jpnp76z","updated":"20241031152662"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20240905214858729","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"assets/image-20240905214858729-20241031152933-wpglaif.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20241031152663-m33cu0z","Type":"NodeParagraph","Properties":{"id":"20241031152663-m33cu0z","updated":"20241031152663"},"Children":[{"Type":"NodeText","Data":"查看系统的信号量："}]},{"ID":"20241031152664-rtzppvk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"aGFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152664-rtzppvk","updated":"20241031152664"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"aGFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152665-f2vcj64","Type":"NodeParagraph","Properties":{"id":"20241031152665-f2vcj64","updated":"20241031152665"},"Children":[{"Type":"NodeText","Data":"删除系统的信号量："}]},{"ID":"20241031152666-bdr6dfx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152666-bdr6dfx","updated":"20241031152666"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152667-i100fk8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241031152667-i100fk8","updated":"20241031152667"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"生产-消费者模型"}]},{"ID":"20241031152668-mcazb0k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152668-mcazb0k","updated":"20241031152668"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"incache.cpp"}]},{"ID":"20241031152669-fkc198p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152669-fkc198p","updated":"20241031152669"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 多进程的生产消费者模型的生产者程序\n#include \"_public.h\"\n\nint main()\n{\n  struct stgirl  // 循环队列的数据元素是超女结构体。\n  {\n    int no;\n    char name[51];\n  };\n\n  using ElemType=stgirl;\n\n  // 初始化共享内存。\n  int shmid=shmget(0x5005, sizeof(squeue\u003cElemType,5\u003e), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout \u003c\u003c \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  // 把共享内存连接到当前进程的地址空间。\n  squeue\u003cElemType,5\u003e *QQ=(squeue\u003cElemType,5\u003e *)shmat(shmid,0,0);\n  if ( QQ==(void *)-1 )\n  {\n    cout \u003c\u003c \"shmat() failed\\n\"; return -1;\n  }\n\n  QQ-\u003einit();       // 初始化循环队列。\n\n  ElemType ee;      // 创建一个数据元素。\n\n  csemp mutex; mutex.init(0x5001);     // 用于给共享内存加锁。\n  csemp cond;  cond.init(0x5002,0,0);  // 信号量的值用于表示队列中数据元素的个数。\n\n  mutex.wait();  // 加锁。\n  // 生产3个数据。\n  ee.no=3; strcpy(ee.name,\"西施\"); QQ-\u003epush(ee);\n  ee.no=7; strcpy(ee.name,\"冰冰\"); QQ-\u003epush(ee);\n  ee.no=8; strcpy(ee.name,\"幂幂\"); QQ-\u003epush(ee);\n  mutex.post();  // 解锁。\n  cond.post(3);  // 实参是3，表示生产了3个数据。\n\n  shmdt(QQ);  // 把共享内存从当前进程中分离。\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152670-gf6d59b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152670-gf6d59b","updated":"20241031152670"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"outcache.cpp"}]},{"ID":"20241031152671-8jmgljs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yysr","CodeBlockCloseFence":"YGBg","Properties":{"id":"20241031152671-8jmgljs","updated":"20241031152671"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yysr","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 多进程的生产消费者模型的消费者程序\n#include \"_public.h\"\n\nint main()\n{\n  struct stgirl  // 循环队列的数据元素是超女结构体。\n  {\n    int no;\n    char name[51];\n  };\n\n  using ElemType=stgirl;\n\n  // 初始化共享内存。\n  int shmid=shmget(0x5005, sizeof(squeue\u003cElemType,5\u003e), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout \u003c\u003c \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  // 把共享内存连接到当前进程的地址空间。\n  squeue\u003cElemType,5\u003e *QQ=(squeue\u003cElemType,5\u003e *)shmat(shmid,0,0);\n  if ( QQ==(void *)-1 )\n  {\n    cout \u003c\u003c \"shmat() failed\\n\"; return -1;\n  }\n\n  QQ-\u003einit();       // 初始化循环队列。\n\n  ElemType ee;      // 创建一个数据元素。\n\n  csemp mutex; mutex.init(0x5001);     // 用于给共享内存加锁。\n  csemp cond;  cond.init(0x5002,0,0);  // 信号量的值用于表示队列中数据元素的个数。\n\n  while (true)\n  {\n    mutex.wait();  // 加锁。\n\n    while (QQ-\u003eempty())    // 如果队列空，进入循环，否则直接处理数据。必须用循环，不能用if\n    {\n      mutex.post();   // 解锁。\n      cond.wait();    // 等待生产者的唤醒信号。\n      mutex.wait();   // 加锁。\n    }\n\n    // 数据元素出队。\n    ee = QQ-\u003efront();  QQ-\u003epop();\n    mutex.post(); // 解锁。\n\n    // 处理出队的数据（把数据消费掉）。\n    cout \u003c\u003c \"no=\" \u003c\u003c ee.no \u003c\u003c \",name=\" \u003c\u003c ee.name \u003c\u003c endl;\n    usleep(100);    // 假设处理数据需要时间，方便演示。\n  }\n\n  shmdt(QQ);\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20241031152672-mw8v045","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20241031152672-mw8v045","updated":"20241031152672"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"补充:多线程\u0026多进程实现的生产-消费者模型对比"}]},{"ID":"20241031152673-f61amkw","Type":"NodeBlockquote","Properties":{"id":"20241031152673-f61amkw","updated":"20241031152673"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20241031152674-yxzftco","Type":"NodeParagraph","Properties":{"id":"20241031152674-yxzftco","updated":"20241031152674"},"Children":[{"Type":"NodeText","Data":"在c++中，多线程实现的生产-消费者模型与多进程实现的生产-消费者模型有什么区别与联系呢？"}]}]},{"ID":"20241031152675-sq1bweb","Type":"NodeParagraph","Properties":{"id":"20241031152675-sq1bweb","updated":"20241031152675"},"Children":[{"Type":"NodeText","Data":"在 C++ 中，实现多线程和多进程的生产-消费者模型存在许多区别和联系。以下是两者的比较："}]},{"ID":"20241031152676-e0x13l7","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152676-e0x13l7","updated":"20241031152676"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实现方式"}]},{"ID":"20241031152677-uhfjckb","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152677-uhfjckb","updated":"20241031152677"},"Children":[{"ID":"20241031152678-fuwuj2f","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152678-fuwuj2f","updated":"20241031152678"},"Children":[{"ID":"20241031152679-b4pfuis","Type":"NodeParagraph","Properties":{"id":"20241031152679-b4pfuis","updated":"20241031152679"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程模型"},{"Type":"NodeText","Data":"："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"多线程是指在同一个进程内，创建多个执行流（线程）。所有线程共享相同的内存空间，因此生产者和消费者可以直接通过共享内存（如队列、缓冲区）进行数据的生产和消费。在 C++ 中，标准库提供了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"std::thread"},{"Type":"NodeText","Data":" 来创建和管理线程，同时可以使用同步机制如互斥量（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"std::mutex"},{"Type":"NodeText","Data":"）、条件变量（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"std::condition_variable"},{"Type":"NodeText","Data":"）来避免线程间的竞争和死锁。"}]}]},{"ID":"20241031152680-0u9up14","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152680-0u9up14","updated":"20241031152680"},"Children":[{"ID":"20241031152681-bbleka3","Type":"NodeParagraph","Properties":{"id":"20241031152681-bbleka3","updated":"20241031152681"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多进程模型"},{"Type":"NodeText","Data":"："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"多进程指的是通过创建多个进程，每个进程都有自己独立的内存空间。生产者和消费者在不同的进程中，因此需要使用进程间通信（IPC，Inter-Process Communication）来传递数据，如管道（pipe）、消息队列（message queue）、共享内存（shared memory）等。C++ 没有直接的跨平台多进程库，但可以借助 POSIX 或 Boost 库来实现。"}]}]}]},{"ID":"20241031152682-nfhgmpl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152682-nfhgmpl","updated":"20241031152682"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"内存共享"}]},{"ID":"20241031152683-dj3gdc8","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152683-dj3gdc8","updated":"20241031152683"},"Children":[{"ID":"20241031152684-fk7qpvl","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152684-fk7qpvl","updated":"20241031152684"},"Children":[{"ID":"20241031152685-xxifpqc","Type":"NodeParagraph","Properties":{"id":"20241031152685-xxifpqc","updated":"20241031152685"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程"},{"Type":"NodeText","Data":"：由于线程共享进程的内存空间，数据共享变得很容易。生产者和消费者之间可以通过全局变量或者堆上的内存（例如共享缓冲区）进行数据传递。但共享内存也带来了线程安全问题，因此需要使用同步机制来防止数据竞争。"}]}]},{"ID":"20241031152686-ioe355m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152686-ioe355m","updated":"20241031152686"},"Children":[{"ID":"20241031152687-14s88sx","Type":"NodeParagraph","Properties":{"id":"20241031152687-14s88sx","updated":"20241031152687"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多进程"},{"Type":"NodeText","Data":"：进程之间不能直接共享内存，每个进程都有独立的地址空间。因此需要使用 IPC 机制（如共享内存或文件等）来实现数据共享。由于内存不共享，通常进程间通信的开销比线程高。"}]}]}]},{"ID":"20241031152688-uoeufj6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152688-uoeufj6","updated":"20241031152688"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同步机制"}]},{"ID":"20241031152689-ptzispo","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152689-ptzispo","updated":"20241031152689"},"Children":[{"ID":"20241031152690-7s59bra","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152690-7s59bra","updated":"20241031152690"},"Children":[{"ID":"20241031152691-khp6rfr","Type":"NodeParagraph","Properties":{"id":"20241031152691-khp6rfr","updated":"20241031152691"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程"},{"Type":"NodeText","Data":"：线程之间通过共享内存传递数据，因此需要使用互斥量（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"std::mutex"},{"Type":"NodeText","Data":"）、信号量（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"std::semaphore"},{"Type":"NodeText","Data":"）、条件变量（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"std::condition_variable"},{"Type":"NodeText","Data":"）等同步机制，防止数据竞争和确保数据一致性。"}]}]},{"ID":"20241031152692-5f0p8ly","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152692-5f0p8ly","updated":"20241031152692"},"Children":[{"ID":"20241031152693-xqr42ft","Type":"NodeParagraph","Properties":{"id":"20241031152693-xqr42ft","updated":"20241031152693"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多进程"},{"Type":"NodeText","Data":"：进程之间的同步通常依赖于操作系统提供的进程同步工具，例如信号量（POSIX 信号量）、消息队列、共享内存等。此外，有时还需要通过文件锁（file lock）等手段来实现跨进程的同步。"}]}]}]},{"ID":"20241031152694-90f1csd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152694-90f1csd","updated":"20241031152694"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"资源开销"}]},{"ID":"20241031152695-vqtlvo4","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152695-vqtlvo4","updated":"20241031152695"},"Children":[{"ID":"20241031152696-dg9r1r6","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152696-dg9r1r6","updated":"20241031152696"},"Children":[{"ID":"20241031152697-h15cnux","Type":"NodeParagraph","Properties":{"id":"20241031152697-h15cnux","updated":"20241031152697"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程"},{"Type":"NodeText","Data":"：线程的创建和上下文切换开销较小，因为线程共享相同的内存和资源。线程切换在同一个进程内部进行，代价低。"}]}]},{"ID":"20241031152698-iqscf1n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152698-iqscf1n","updated":"20241031152698"},"Children":[{"ID":"20241031152699-9m0ycil","Type":"NodeParagraph","Properties":{"id":"20241031152699-9m0ycil","updated":"20241031152699"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多进程"},{"Type":"NodeText","Data":"：进程创建和上下文切换的开销较大，因为每个进程有独立的内存空间和资源。进程切换涉及操作系统管理内存和文件描述符等资源，代价高。"}]}]}]},{"ID":"20241031152700-syfkjfy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152700-syfkjfy","updated":"20241031152700"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"故障隔离"}]},{"ID":"20241031152701-va8rr07","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152701-va8rr07","updated":"20241031152701"},"Children":[{"ID":"20241031152702-jf8smr4","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152702-jf8smr4","updated":"20241031152702"},"Children":[{"ID":"20241031152703-fsu3tqy","Type":"NodeParagraph","Properties":{"id":"20241031152703-fsu3tqy","updated":"20241031152703"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程"},{"Type":"NodeText","Data":"：由于线程共享同一进程的内存空间，如果一个线程发生了异常（如段错误），可能会影响整个进程，从而导致所有线程崩溃。"}]}]},{"ID":"20241031152704-pjtmg39","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152704-pjtmg39","updated":"20241031152704"},"Children":[{"ID":"20241031152705-i9yb90u","Type":"NodeParagraph","Properties":{"id":"20241031152705-i9yb90u","updated":"20241031152705"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多进程"},{"Type":"NodeText","Data":"：进程有独立的内存空间，某个进程崩溃不会影响到其他进程。因此，多进程模型具有更好的故障隔离性，生产者崩溃不会直接导致消费者进程崩溃。"}]}]}]},{"ID":"20241031152706-fs3l4c1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152706-fs3l4c1","updated":"20241031152706"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"开发复杂度"}]},{"ID":"20241031152707-sayf0t9","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152707-sayf0t9","updated":"20241031152707"},"Children":[{"ID":"20241031152708-6vh5nx4","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152708-6vh5nx4","updated":"20241031152708"},"Children":[{"ID":"20241031152709-rbq3r5p","Type":"NodeParagraph","Properties":{"id":"20241031152709-rbq3r5p","updated":"20241031152709"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程"},{"Type":"NodeText","Data":"：线程之间共享内存，虽然通信相对简单，但需要开发者自行管理同步问题。处理不当容易引发死锁、竞争条件等难以调试的问题。"}]}]},{"ID":"20241031152710-69d6rt9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152710-69d6rt9","updated":"20241031152710"},"Children":[{"ID":"20241031152711-sy88hot","Type":"NodeParagraph","Properties":{"id":"20241031152711-sy88hot","updated":"20241031152711"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多进程"},{"Type":"NodeText","Data":"：多进程模型由于不共享内存，因此避免了数据竞争问题，但进程间通信的实现相对复杂，需要借助操作系统的 IPC 机制。此外，处理进程创建、销毁以及进程间的同步也是开发复杂性的一部分。"}]}]}]},{"ID":"20241031152712-cfxxvwp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152712-cfxxvwp","updated":"20241031152712"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7. "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"适用场景"}]},{"ID":"20241031152713-hu7smtd","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152713-hu7smtd","updated":"20241031152713"},"Children":[{"ID":"20241031152714-wdd4eyk","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152714-wdd4eyk","updated":"20241031152714"},"Children":[{"ID":"20241031152715-nx63a2g","Type":"NodeParagraph","Properties":{"id":"20241031152715-nx63a2g","updated":"20241031152715"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多线程"},{"Type":"NodeText","Data":"：适合需要在同一个进程中并行处理的场景，比如高并发的服务器程序、需要大量计算但共享数据的场景。"}]}]},{"ID":"20241031152716-w6p03hn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152716-w6p03hn","updated":"20241031152716"},"Children":[{"ID":"20241031152717-ra6w7du","Type":"NodeParagraph","Properties":{"id":"20241031152717-ra6w7du","updated":"20241031152717"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"多进程"},{"Type":"NodeText","Data":"：适合需要更高的隔离性、稳定性，或者需要不同进程执行不同任务的场景，例如守护进程、任务调度系统等。此外，在多核 CPU 上，多进程模型可以充分利用 CPU 资源。"}]}]}]},{"ID":"20241031152718-0hcajgk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152718-0hcajgk","updated":"20241031152718"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"联系："}]},{"ID":"20241031152719-ft1kczb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152719-ft1kczb","updated":"20241031152719"},"Children":[{"ID":"20241031152720-7doqssk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152720-7doqssk","updated":"20241031152720"},"Children":[{"ID":"20241031152721-347mkql","Type":"NodeParagraph","Properties":{"id":"20241031152721-347mkql","updated":"20241031152721"},"Children":[{"Type":"NodeText","Data":"两者都是并发编程的模型，都需要考虑同步和通信的问题。"}]}]},{"ID":"20241031152722-jh8vm3g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152722-jh8vm3g","updated":"20241031152722"},"Children":[{"ID":"20241031152723-xgxy5j4","Type":"NodeParagraph","Properties":{"id":"20241031152723-xgxy5j4","updated":"20241031152723"},"Children":[{"Type":"NodeText","Data":"在生产者-消费者模型中，生产者和消费者的角色不变：生产者生产数据放入队列，消费者从队列中获取数据。在多线程模型中，生产者和消费者通过共享内存通信；在多进程模型中，生产者和消费者通过 IPC 机制通信。"}]}]}]},{"ID":"20241031152724-otmfj1k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20241031152724-otmfj1k","updated":"20241031152724"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"区别："}]},{"ID":"20241031152725-alq1twb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152725-alq1twb","updated":"20241031152725"},"Children":[{"ID":"20241031152726-jiymrs9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152726-jiymrs9","updated":"20241031152726"},"Children":[{"ID":"20241031152727-o1dmn9t","Type":"NodeParagraph","Properties":{"id":"20241031152727-o1dmn9t","updated":"20241031152727"},"Children":[{"Type":"NodeText","Data":"主要的区别在于内存管理和同步机制：多线程共享内存，而多进程使用 IPC 进行通信和同步。"}]}]},{"ID":"20241031152728-2l0oivn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152728-2l0oivn","updated":"20241031152728"},"Children":[{"ID":"20241031152729-en8b7q8","Type":"NodeParagraph","Properties":{"id":"20241031152729-en8b7q8","updated":"20241031152729"},"Children":[{"Type":"NodeText","Data":"线程上下文切换开销较低，而进程开销较大。"}]}]},{"ID":"20241031152730-be9g93j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"MarkerOffset":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20241031152730-be9g93j","updated":"20241031152730"},"Children":[{"ID":"20241031152731-ufnlew5","Type":"NodeParagraph","Properties":{"id":"20241031152731-ufnlew5","updated":"20241031152731"},"Children":[{"Type":"NodeText","Data":"多进程有更好的隔离性，某个进程崩溃不会影响其他进程。"}]}]}]},{"ID":"20241031152732-blno3ye","Type":"NodeParagraph","Properties":{"id":"20241031152732-blno3ye","updated":"20241031152732"},"Children":[{"Type":"NodeText","Data":"综上所述，多线程和多进程的生产-消费者模型在实现细节和适用场景上有明显的不同，但其核心思想相同，都是为了解决并发问题中的数据传递与同步问题。"}]}]}